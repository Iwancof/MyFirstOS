     1                                  %define		USE_SYSTEM_CALL
     2                                  %define		USE_TEST_AND_SET
     3                                  
     4                                  %include	"../include/define.s"
     1                              <1> VECT_BASE		equ	0x0010_0000
     2                              <1> KERNEL_LOAD		equ	0x0010_1000
     3                              <1> STACK_BASE		equ	0x0010_3000
     4                              <1> CR3_BASE		equ	0x0010_5000
     5                              <1> RUST_LOAD		equ	0x0000_1000
     6                              <1> RUST_MAIN		equ	0x0020_0000
     7                              <1> RUST_SIZE		equ	0x0001_0000
     8                              <1> RUST_SECT		equ	RUST_SIZE / SECT_SIZE
     9                              <1> RUST_END		equ	RUST_LOAD + RUST_SIZE
    10                              <1> HEAP_START		equ	RUST_MAIN + RUST_SIZE
    11                              <1> 
    12                              <1> BOOT_LOAD		equ	0x7c00
    13                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
    14                              <1> 
    15                              <1> BOOT_SIZE		equ	(1024 * 8)
    16                              <1> SECT_SIZE		equ	(512)
    17                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
    18                              <1> 
    19                              <1> E820_RECORD_SIZE	equ	20
    20                              <1> 
    21                              <1> KERNEL_SIZE		equ	(1024 * 8)
    22                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    23                              <1> KERNEL_END		equ	KERNEL_LOAD + KERNEL_SIZE
    24                              <1> ; KERNEL_END : 0x0010_3000
    25                              <1> 
    26                              <1> 
    27                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    28                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    29                              <1> 
    30                              <1> struc			ring_buff		; for keyboard
    31 00000000 <res 00000004>      <1> 				.rp	resd	1
    32 00000004 <res 00000004>      <1> 				.wp	resd	1
    33 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    34                              <1> endstruc
    35                              <1> 
    36                              <1> struc			rose
    37 00000000 <res 00000004>      <1> 				.x0		resd	1
    38 00000004 <res 00000004>      <1> 				.y0		resd	1
    39 00000008 <res 00000004>      <1> 				.x1		resd	1
    40 0000000C <res 00000004>      <1> 				.y1		resd	1
    41                              <1> 
    42 00000010 <res 00000004>      <1> 				.n		resd	1
    43 00000014 <res 00000004>      <1> 				.d		resd	1
    44                              <1> 
    45 00000018 <res 00000004>      <1> 				.color_x	resd	1
    46 0000001C <res 00000004>      <1> 				.color_y	resd	1
    47 00000020 <res 00000004>      <1> 				.color_z	resd	1
    48 00000024 <res 00000004>      <1> 				.color_s	resd	1
    49 00000028 <res 00000004>      <1> 				.color_f	resd	1
    50 0000002C <res 00000004>      <1> 				.color_b	resd	1
    51                              <1> 				
    52 00000030 <res 00000010>      <1> 				.title		resb	16
    53                              <1> endstruc
    54                              <1> 
    55                              <1> ;struc ring_buff
    56                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    57                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    58                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    59                              <1> ;endstruc
    60                              <1> 
    61                              <1> STACK_SIZE		equ	1024
    62                              <1> 
    63                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    64                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    65                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    66                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
    67                              <1> SP_TASK_4		equ	STACK_BASE + (STACK_SIZE * 5)
    68                              <1> SP_TASK_5		equ	STACK_BASE + (STACK_SIZE * 6)
    69                              <1> SP_TASK_6		equ	STACK_BASE + (STACK_SIZE * 7)
    70                              <1> SP_TASK_T		equ	STACK_BASE + (STACK_SIZE * 8)
    71                              <1> 
    72                              <1> PARAM_TASK_4		equ	0x0010_8000
    73                              <1> PARAM_TASK_5		equ	0x0010_9000
    74                              <1> PARAM_TASK_6		equ	0x0010_A000
    75                              <1> 
    76                              <1> CR3_TASK_4		equ	0x0020_0000
    77                              <1> CR3_TASK_5		equ	0x0020_2000
    78                              <1> CR3_TASK_6		equ	0x0020_4000
    79                              <1> CR3_TASK_T		equ	0x0020_6000
    80                              <1> 
    81                              <1> FAT_SIZE equ (1024 * 128)
    82                              <1> ROOT_SIZE equ (1024 * 16)
    83                              <1> 
    84                              <1> FAT1_START equ (KERNEL_SIZE)
    85                              <1> FAT2_START equ (FAT1_START + FAT_SIZE)
    86                              <1> ROOT_START equ (FAT2_START + FAT_SIZE)
    87                              <1> FILE_START equ (ROOT_START + ROOT_SIZE)
    88                              <1> 
    89                              <1> ATTR_VOLUME_ID equ 0x08
    90                              <1> ATTR_ARCHIVE equ 0x20
    91                              <1> 
     5                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     6                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     7                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     8                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     9                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
    10                                  %include	"../include/set_gate.s"
     1                              <1> %macro	set_gate 2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	mov	[edi + 0], ax
     9                              <1> 	shr	eax, 16
    10                              <1> 	mov	[edi + 6], ax
    11                              <1> 	
    12                              <1> 	pop	edi
    13                              <1> 	pop	eax
    14                              <1> %endmacro
    11                                  ;%include	"../../../../testOS/src/include/macro.s"
    12                                  
    13                                  ORG	KERNEL_LOAD
    14                                  
    15                                  ALIGN	4
    16 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    17 00000002 00001000                	dd	VECT_BASE
    18                                  
    19                                  
    20                                  [BITS 32]
    21                                  
    22                                  
    23                                  kernel:
    24 00000006 FA                      	cli
    25                                  
    26 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    27 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    28 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    29 00000013 C1E004                  	shl	eax, 4
    30 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    31 00000018 A3[70030000]            	mov	[FONT_ADR], eax
    32                                  	
    33                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    33 0000001D 50                  <1>  push eax
    33 0000001E 57                  <1>  push edi
    33                              <1> 
    33 0000001F BF[58130000]        <1>  mov edi, %1
    33 00000024 B8[D0120000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if %0 == 3
    33 00000029 66C7075F00          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000002E 66894702            <1>  mov [edi + 2], ax
    33 00000032 C1E810              <1>  shr eax, 16
    33 00000035 884704              <1>  mov [edi + 4], al
    33 00000038 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000003B 5F                  <1>  pop edi
    33 0000003C 58                  <1>  pop eax
    34                                  	set_desc	GDT.tss_0, TSS_0
    34 0000003D 50                  <1>  push eax
    34 0000003E 57                  <1>  push edi
    34                              <1> 
    34 0000003F BF[60130000]        <1>  mov edi, %1
    34 00000044 B8[A6130000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if %0 == 3
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 00000049 66894702            <1>  mov [edi + 2], ax
    34 0000004D C1E810              <1>  shr eax, 16
    34 00000050 884704              <1>  mov [edi + 4], al
    34 00000053 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 00000056 5F                  <1>  pop edi
    34 00000057 58                  <1>  pop eax
    35                                  	set_desc	GDT.tss_1, TSS_1
    35 00000058 50                  <1>  push eax
    35 00000059 57                  <1>  push edi
    35                              <1> 
    35 0000005A BF[68130000]        <1>  mov edi, %1
    35 0000005F B8[7E140000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if %0 == 3
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 00000064 66894702            <1>  mov [edi + 2], ax
    35 00000068 C1E810              <1>  shr eax, 16
    35 0000006B 884704              <1>  mov [edi + 4], al
    35 0000006E 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 00000071 5F                  <1>  pop edi
    35 00000072 58                  <1>  pop eax
    36                                  	set_desc	GDT.tss_2, TSS_2
    36 00000073 50                  <1>  push eax
    36 00000074 57                  <1>  push edi
    36                              <1> 
    36 00000075 BF[70130000]        <1>  mov edi, %1
    36 0000007A B8[56150000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if %0 == 3
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 0000007F 66894702            <1>  mov [edi + 2], ax
    36 00000083 C1E810              <1>  shr eax, 16
    36 00000086 884704              <1>  mov [edi + 4], al
    36 00000089 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000008C 5F                  <1>  pop edi
    36 0000008D 58                  <1>  pop eax
    37                                  	set_desc	GDT.tss_3, TSS_3
    37 0000008E 50                  <1>  push eax
    37 0000008F 57                  <1>  push edi
    37                              <1> 
    37 00000090 BF[78130000]        <1>  mov edi, %1
    37 00000095 B8[2E160000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if %0 == 3
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000009A 66894702            <1>  mov [edi + 2], ax
    37 0000009E C1E810              <1>  shr eax, 16
    37 000000A1 884704              <1>  mov [edi + 4], al
    37 000000A4 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 000000A7 5F                  <1>  pop edi
    37 000000A8 58                  <1>  pop eax
    38                                  	set_desc	GDT.tss_4, TSS_4
    38 000000A9 50                  <1>  push eax
    38 000000AA 57                  <1>  push edi
    38                              <1> 
    38 000000AB BF[80130000]        <1>  mov edi, %1
    38 000000B0 B8[06170000]        <1>  mov eax, %2
    38                              <1> 
    38                              <1>  %if %0 == 3
    38                              <1>  mov [edi + 0], %3
    38                              <1>  %endif
    38                              <1> 
    38 000000B5 66894702            <1>  mov [edi + 2], ax
    38 000000B9 C1E810              <1>  shr eax, 16
    38 000000BC 884704              <1>  mov [edi + 4], al
    38 000000BF 886707              <1>  mov [edi + 7], ah
    38                              <1> 
    38 000000C2 5F                  <1>  pop edi
    38 000000C3 58                  <1>  pop eax
    39                                  	set_desc	GDT.tss_5, TSS_5
    39 000000C4 50                  <1>  push eax
    39 000000C5 57                  <1>  push edi
    39                              <1> 
    39 000000C6 BF[88130000]        <1>  mov edi, %1
    39 000000CB B8[DE170000]        <1>  mov eax, %2
    39                              <1> 
    39                              <1>  %if %0 == 3
    39                              <1>  mov [edi + 0], %3
    39                              <1>  %endif
    39                              <1> 
    39 000000D0 66894702            <1>  mov [edi + 2], ax
    39 000000D4 C1E810              <1>  shr eax, 16
    39 000000D7 884704              <1>  mov [edi + 4], al
    39 000000DA 886707              <1>  mov [edi + 7], ah
    39                              <1> 
    39 000000DD 5F                  <1>  pop edi
    39 000000DE 58                  <1>  pop eax
    40                                  	set_desc	GDT.tss_6, TSS_6
    40 000000DF 50                  <1>  push eax
    40 000000E0 57                  <1>  push edi
    40                              <1> 
    40 000000E1 BF[90130000]        <1>  mov edi, %1
    40 000000E6 B8[B6180000]        <1>  mov eax, %2
    40                              <1> 
    40                              <1>  %if %0 == 3
    40                              <1>  mov [edi + 0], %3
    40                              <1>  %endif
    40                              <1> 
    40 000000EB 66894702            <1>  mov [edi + 2], ax
    40 000000EF C1E810              <1>  shr eax, 16
    40 000000F2 884704              <1>  mov [edi + 4], al
    40 000000F5 886707              <1>  mov [edi + 7], ah
    40                              <1> 
    40 000000F8 5F                  <1>  pop edi
    40 000000F9 58                  <1>  pop eax
    41 000000FA 0F0115[A0130000]        	lgdt		[GDTR]
    42                                  
    43 00000101 BC00341000              	mov	esp, SP_TASK_0
    44 00000106 66B83000                	mov	ax, SS_TASK_0	; set tss0
    45 0000010A 0F00D8                  	ltr	ax
    46                                  	; say "this process is task 0" to CPU
    47                                  
    48                                  
    49 0000010D E8B9090000              	cdecl	init_int
    50 00000112 E852080000              	cdecl	init_pic
    51                                  
    52 00000117 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    52 0000011F [020B0000]668907C1-
    52 00000127 E810668947065F58   
    53                                  	; set_vect	0x06, ope_exce
    54 0000012F 5057BF70001000B8-       	set_vect	0x0E, int_pf
    54 00000137 [F5110000]668907C1-
    54 0000013F E810668947065F58   
    55 00000147 5057BF38001000B8-       	set_vect	0x07, int_nm
    55 0000014F [030D0000]668907C1-
    55 00000157 E810668947065F58   
    56 0000015F 5057BF00011000B8-       	set_vect	0x20, int_timer
    56 00000167 [5B120000]668907C1-
    56 0000016F E810668947065F58   
    57 00000177 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    57 0000017F [200B0000]668907C1-
    57 00000187 E810668947065F58   
    58 0000018F 5057BF40011000B8-       	set_vect	0x28, int_rtc
    58 00000197 [2C090000]668907C1-
    58 0000019F E810668947065F58   
    59 000001A7 5057BF08041000B8-       	set_vect	0x81, trap_gate_81, word 0xEF00	; type = trap
    59 000001AF [5B0C0000]66C74704-
    59 000001B7 00EF668907C1E81066-
    59 000001C0 8947065F58         
    60 000001C5 5057BF10041000B8-       	set_vect	0x82, trap_gate_82, word 0xEF00
    60 000001CD [810C0000]66C74704-
    60 000001D5 00EF668907C1E81066-
    60 000001DE 8947065F58         
    61 000001E3 5057BFF8071000B8-       	set_vect	0xFF, panic
    61 000001EB [C1100000]668907C1-
    61 000001F3 E810668947065F58   
    62                                  
    63 000001FB E8530F0000              	cdecl	init_page
    64                                  
    65                                  	;mov	eax, CR3_BASE
    66                                  	;mov	cr3, eax
    67                                  	
    68                                  	;mov	eax, cr0
    69                                  	;or	eax, (1 << 31)
    70                                  	;mov	cr0, eax
    71                                  	;jmp	$ + 2
    72                                  
    73                                  	;mov	eax, 0xffff00
    74                                  	;mov	[eax], dword 1
    75                                  	;cdecl	itoa, dword [eax], .t1, 16, 16, 0b0100
    76                                  	;cdecl	draw_str, 0, 10, 0x010F, .t1
    77                                  
    78                                  	set_gate	GDT.call_gate, call_gate
    78 00000200 50                  <1>  push eax
    78 00000201 57                  <1>  push edi
    78                              <1> 
    78 00000202 BF[98130000]        <1>  mov edi, %1
    78 00000207 B8[0B0C0000]        <1>  mov eax, %2
    78                              <1> 
    78 0000020C 668907              <1>  mov [edi + 0], ax
    78 0000020F C1E810              <1>  shr eax, 16
    78 00000212 66894706            <1>  mov [edi + 6], ax
    78                              <1> 
    78 00000216 5F                  <1>  pop edi
    78 00000217 58                  <1>  pop eax
    79                                  	
    80 00000218 6A10E8360700006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    80 00000221 C404               
    81 00000223 E854100000              	cdecl	int_en_timer
    82                                  	
    83                                  	outp	0x21, 0b1111_1000	; slave
    83 00000228 B0F8                <1>  mov al, %2
    83 0000022A E621                <1>  out %1, al
    84                                  	outp	0xA1, 0b1111_1110	; rtc
    84 0000022C B0FE                <1>  mov al, %2
    84 0000022E E6A1                <1>  out %1, al
    85                                  	
    86 00000230 FB                      	sti
    87                                  	
    88 00000231 6A0D6A3FE8E6020000-     	cdecl	draw_font, 63, 13
    88 0000023A 6683C408           
    89 0000023E 6A046A3FE852030000-     	cdecl	draw_color_bar, 63, 4
    89 00000247 6683C408           
    90                                  
    91 0000024B 68[41030000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    91 00000253 00006A0E6A19E8FD02-
    91 0000025C 00006683C410       
    92                                  	
    93                                  	;jmp	SS_TASK_1:10000
    94 00000262 60                      	pusha
    95                                  
    96 00000263 B800000000              	mov	eax, 0		; eax is sector
    97 00000268 B900000000              	mov	ecx, 0
    98                                  .80L:	
    99 0000026D 8B1DF89B0000            	mov	ebx, [BOOT_LOAD + BOOT_SIZE - 16 + 8]
   100 00000273 8903                    	mov	[ebx], eax
   101                                  
   102 00000275 FF15F49B0000            	call	[BOOT_LOAD + BOOT_SIZE - 16 + 4]
   103 0000027B 8D3C89                  	lea	edi, [ecx * 4 + ecx]
   104 0000027E C1E70C                  	shl	edi, 12
   105 00000281 81C700002000            	add	edi, RUST_MAIN
   106                                  	
   107                                  	; cdecl	draw_num, edi, 0, ecx
   108                                  
   109 00000287 680050000068001000-     	cdecl	memcpy, edi , 0x1000, 40 * 512
   109 00000290 0057E8AC0100006683-
   109 00000299 C40C               
   110                                  
   111 0000029B 41                      	inc	ecx
   112                                  	;cdecl	draw_num, ecx, 0, 0
   113                                  
   114 0000029C 83C028                  	add	eax, 40
   115 0000029F 3D80000000              	cmp	eax, RUST_SECT
   116                                  
   117 000002A4 76C7                    	jna	.80L
   118                                  	
   119 000002A6 61                      	popa
   120                                  
   121 000002A7 A118002000              	mov	eax, dword [RUST_MAIN + 0x18]
   122                                  	;mov	eax, dword [RUST_MAIN + 0x18]
   123                                  	;add	eax, dword [RUST_MAIN + 0x38]
   124                                  
   125                                  	; cdecl	draw_num, eax, 0, 0
   126                                  	; jmp	$
   127                                  
   128                                  	; cdecl	eax	; initialize function. eax = main_entry_point
   129                                  	;call	0x2010c5
   130 000002AC FFD0                    	call	eax
   131 000002AE A3[78030000]            	mov	[RUST_ENTRY], eax
   132                                  
   133                                  .90L:
   134 000002B3 FF15[78030000]          	cdecl	[RUST_ENTRY]
   135                                  	;push	eax
   136                                  	;pop	eax
   137                                  	;cdecl	draw_num, eax, 0, 1
   138                                  
   139                                  	; jmp	.90L
   140                                  
   141                                  	; cdecl	draw_num, _KEY_BUFF, 0, 0
   142                                  
   143 000002B9 EBF8                    	jmp	.90L
   144                                  
   145                                  	; jmp	$
   146                                  
   147                                  
   148                                  .10L:
   149                                  
   150 000002BB E8D10F0000              	cdecl	draw_rotation_bar
   151                                  
   152 000002C0 68[68030000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
   152 000002C6 [440B0000]E88D0800-
   152 000002CE 006683C408         
   153 000002D3 83F800                  	cmp	eax, 0
   154 000002D6 74E3                    	je	.10L
   155                                  
   156 000002D8 68[440B0000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
   156 000002E0 02E8D20800006683C4-
   156 000002E9 0C                 
   157                                  
   158 000002EA A0[68030000]            	mov	al, [.int_key]
   159 000002EF 3C02                    	cmp	al, 0x02
   160 000002F1 7522                    	jne	.14L
   161                                  
   162 000002F3 FF15F09B0000            	call	[BOOT_LOAD + BOOT_SIZE - 16]
   163 000002F9 BE00780000              	mov	esi, 0x7800
   164 000002FE C6462000                	mov	[esi + 32], byte 0
   165 00000302 5668040F00006A006A-     	cdecl	draw_str, 0, 0, 0x0F04, esi
   165 0000030B 00E84A0200006683C4-
   165 00000314 10                 
   166                                  
   167                                  .14L:
   168 00000315 A0[68030000]            	mov	al, [.int_key]
   169 0000031A 50E85E0A00006683C4-     	cdecl	ctrl_alt_end, eax
   169 00000323 04                 
   170 00000324 83F800                  	cmp	eax, 0
   171 00000327 7492                    	je	.10L
   172                                  
   173 00000329 B800000000              	mov	eax, 0
   174 0000032E 0FAB05[6C030000]        	bts	[.once], eax
   175 00000335 7284                    	jc	.10L
   176 00000337 E8B40A0000              	cdecl	power_off
   177                                  
   178 0000033C E97AFFFFFF              	jmp	.10L
   179                                  	
   180                                  	
   181 00000341 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   181 0000034A 65726E656C212000   
   182 00000352 2D2D2D2D00              .t0:	db	"----",0
   183 00000357 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
   183 00000360 2D2D2D2D2D2D2D00   
   184 00000368 00000000                .int_key:	dd	0
   185 0000036C 00000000                .once:		dd	0
   186                                  
   187                                  ALIGN	4,	db	0
   188 00000370 00000000                FONT_ADR:	dd	0
   189 00000374 00000000                RTC_TIME:	dd	0
   190                                  
   191 00000378 00000000                RUST_ENTRY:	dd	0
   192                                  
   193                                  ope_exce:
   194 0000037C 6A026A006834120000-     	cdecl	draw_num, 0x1234, 0, 2
   194 00000385 E8B10C00006683C40C 
   195 0000038E EBFE                    	jmp	$
   196                                  
   197                                  
   198                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 00000390 55                  <1> 	push	ebp
     4 00000391 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 00000393 50                  <1> 	push	eax
     7 00000394 52                  <1> 	push	edx
     8                              <1> 
     9 00000395 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 00000398 80E403              <1> 	and	ah, 0x03
    11 0000039B B004                <1> 	mov	al, 0x04	; read map
    12 0000039D 66BACE03            <1> 	mov	dx, 0x03CE
    13 000003A1 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 000003A3 5A                  <1> 	pop	edx
    16 000003A4 58                  <1> 	pop	eax
    17                              <1> 
    18 000003A5 89EC                <1> 	mov	esp,ebp
    19 000003A7 5D                  <1> 	pop	ebp
    20                              <1> 
    21 000003A8 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 000003A9 55                  <1> 	push	ebp
    25 000003AA 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 000003AC 50                  <1> 	push	eax
    28 000003AD 52                  <1> 	push	edx
    29                              <1> 
    30 000003AE 8A6508              <1> 	mov	ah, [ebp + 8]
    31 000003B1 80E40F              <1> 	and	ah, 0x0F
    32 000003B4 B002                <1> 	mov	al, 0x02		; write select
    33 000003B6 66BAC403            <1> 	mov	dx, 0x03C4
    34 000003BA 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 000003BC 5A                  <1> 	pop	edx
    37 000003BD 58                  <1> 	pop	eax
    38                              <1> 
    39 000003BE 89EC                <1> 	mov	esp, ebp
    40 000003C0 5D                  <1> 	pop	ebp
    41                              <1> 
    42 000003C1 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 000003C2 55                  <1> 	push	ebp
    51 000003C3 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 000003C5 50                  <1> 	push	eax
    54 000003C6 53                  <1> 	push	ebx
    55 000003C7 51                  <1> 	push	ecx
    56 000003C8 52                  <1> 	push	edx
    57 000003C9 56                  <1> 	push	esi
    58 000003CA 57                  <1> 	push	edi
    59                              <1> 
    60 000003CB 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 000003CE 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 000003D1 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 000003D5 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 000003D9 84C7                <1> 	test	bh, al			; BACK
    67 000003DB 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 000003DE FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 000003E0 84C3                <1> 	test	bl, al			; FORWARD
    71 000003E2 0F94C2              <1> 	setz	dl
    72 000003E5 FECA                <1> 	dec	dl
    73                              <1> 
    74 000003E7 FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 000003E8 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 000003ED AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 000003EE 88C4                <1> 	mov	ah, al			; AL is font data
    80 000003F0 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 000003F2 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 000003F4 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 000003FA 7404                <1> 	jz	.11F
    86 000003FC 2227                <1> 	and	ah, [edi]
    87 000003FE EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 00000400 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 00000402 08E0                <1> 	or	al,ah
    92 00000404 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 00000406 83C750              <1> 	add	edi,80			; next
    95 00000409 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 0000040B 5F                  <1> 	pop	edi
    99 0000040C 5E                  <1> 	pop	esi
   100 0000040D 5A                  <1> 	pop	edx
   101 0000040E 59                  <1> 	pop	ecx
   102 0000040F 5B                  <1> 	pop	ebx
   103 00000410 58                  <1> 	pop	eax
   104                              <1> 
   105 00000411 89EC                <1> 	mov	esp, ebp
   106 00000413 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000414 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 00000415 55                  <1> 	push	ebp
   113 00000416 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 00000418 57                  <1> 	push	edi
   116 00000419 50                  <1> 	push	eax
   117 0000041A 53                  <1> 	push	ebx
   118                              <1> 
   119 0000041B 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 0000041E 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 00000422 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 00000426 84C3                <1> 	test	bl, al
   124 00000428 0F94C3              <1> 	setz	bl
   125 0000042B FECB                <1> 	dec	bl
   126                              <1> 
   127 0000042D 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 00000430 88C4                <1> 	mov	ah, al
   129 00000432 F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 00000434 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 00000436 20D8                <1> 	and	al, bl
   134 00000438 08E0                <1> 	or	al, ah
   135 0000043A 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 0000043C 5B                  <1> 	pop	ebx
   138 0000043D 58                  <1> 	pop	eax
   139 0000043E 5F                  <1> 	pop	edi
   140                              <1> 
   141 0000043F 89EC                <1> 	mov	esp, ebp
   142 00000441 5D                  <1> 	pop	ebp
   143                              <1> 
   144 00000442 C3                  <1> 	ret
   145                              <1> 
   199                                  %include	"../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2 00000443 55                  <1> 	push	ebp
     3 00000444 89E5                <1> 	mov	ebp,esp
     4                              <1> 
     5 00000446 57                  <1> 	push	edi
     6 00000447 56                  <1> 	push	esi
     7 00000448 51                  <1> 	push	ecx
     8                              <1> 
     9 00000449 FC                  <1> 	cld
    10 0000044A 8B7D08              <1> 	mov	edi,[ebp + 8]
    11 0000044D 8B750C              <1> 	mov	esi,[ebp + 12]
    12 00000450 8B4D10              <1> 	mov	ecx,[ebp + 16]
    13                              <1> 
    14 00000453 F3A4                <1> 	rep	movsb
    15                              <1> 
    16 00000455 59                  <1> 	pop	ecx
    17 00000456 5E                  <1> 	pop	esi
    18 00000457 5F                  <1> 	pop	edi
    19                              <1> 
    20 00000458 89EC                <1> 	mov	esp,ebp
    21 0000045A 5D                  <1> 	pop	ebp
    22                              <1> 
    23 0000045B C3                  <1> 	ret
    24                              <1> 
   200                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 0000045C 55                  <1> 	push	ebp
     4 0000045D 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 0000045F 56                  <1> 	push	esi
     7 00000460 57                  <1> 	push	edi
     8 00000461 50                  <1> 	push	eax
     9 00000462 53                  <1> 	push	ebx
    10 00000463 51                  <1> 	push	ecx
    11 00000464 52                  <1> 	push	edx
    12                              <1> 
    13 00000465 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 00000469 C1E604              <1> 	shl	esi, 4
    15 0000046C 0335[70030000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 00000472 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 00000475 C1E708              <1> 	shl	edi, 8
    19 00000478 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 0000047F 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 00000482 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 00000486 6A03E803FFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 0000048F C404                <1>
    25 00000491 6A08E811FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 0000049A C404                <1>
    26 0000049C 536A085756E81CFFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 000004A5 FF6683C410          <1>
    27                              <1> 
    28 000004AA 6A02E8DFFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 000004B3 C404                <1>
    29 000004B5 6A04E8EDFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 000004BE C404                <1>
    30 000004C0 536A045756E8F8FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 000004C9 FF6683C410          <1>
    31                              <1> 
    32 000004CE 6A01E8BBFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 000004D7 C404                <1>
    33 000004D9 6A02E8C9FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 000004E2 C404                <1>
    34 000004E4 536A025756E8D4FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 000004ED FF6683C410          <1>
    35                              <1> 	
    36 000004F2 6A00E897FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 000004FB C404                <1>
    37 000004FD 6A01E8A5FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 00000506 C404                <1>
    38 00000508 536A015756E8B0FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 00000511 FF6683C410          <1>
    39                              <1> 
    40 00000516 5A                  <1> 	pop	edx
    41 00000517 59                  <1> 	pop	ecx
    42 00000518 5B                  <1> 	pop	ebx
    43 00000519 58                  <1> 	pop	eax
    44 0000051A 5F                  <1> 	pop	edi
    45 0000051B 5E                  <1> 	pop	esi
    46                              <1> 
    47 0000051C 89EC                <1> 	mov	esp, ebp
    48 0000051E 5D                  <1> 	pop	ebp
    49                              <1> 
    50 0000051F C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
   201                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 00000520 55                  <1> 	push	ebp
     3 00000521 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000523 50                  <1> 	push	eax
     6 00000524 53                  <1> 	push	ebx
     7 00000525 51                  <1> 	push	ecx
     8                              <1> 
     9 00000526 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 0000052B 81F900010000        <1> 	cmp	ecx,256
    12 00000531 7321                <1> 	jae	.10E
    13                              <1> 
    14 00000533 89C8                <1> 	mov	eax, ecx
    15 00000535 83E00F              <1> 	and	eax, 0b00001111
    16 00000538 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 0000053B 89CB                <1> 	mov	ebx, ecx
    19 0000053D C1EB04              <1> 	shr	ebx, 4
    20 00000540 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 00000543 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 0000054C FF6683C410          <1>
    23                              <1> 	
    24 00000551 41                  <1> 	inc	ecx
    25 00000552 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 00000554 59                  <1> 	pop	ecx
    30 00000555 5B                  <1> 	pop	ebx
    31 00000556 58                  <1> 	pop	eax
    32                              <1> 
    33 00000557 89EC                <1> 	mov	esp, ebp
    34 00000559 5D                  <1> 	pop	ebp
    35                              <1> 
    36 0000055A C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
   202                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 0000055B 55                  <1> 	push	ebp
     3 0000055C 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 0000055E 50                  <1> 	push	eax
     6 0000055F 53                  <1> 	push	ebx
     7 00000560 51                  <1> 	push	ecx
     8 00000561 52                  <1> 	push	edx
     9 00000562 56                  <1> 	push	esi
    10                              <1> 
    11 00000563 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 00000566 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 00000569 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 0000056D 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 00000570 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 00000571 AC                  <1> 	lodsb
    20 00000572 3C00                <1> 	cmp	al, 0
    21 00000574 741A                <1> 	je	.10E
    22                              <1> %ifdef	USE_SYSTEM_CALL
    23 00000576 CD81                <1> 	int 0x81
    24                              <1> %else
    25                              <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    26                              <1> %endif
    27 00000578 43                  <1> 	inc	ebx
    28 00000579 83FB50              <1> 	cmp	ebx, 80
    29 0000057C 7CF3                <1> 	jl	.10L
    30 0000057E BB00000000          <1> 	mov	ebx, 0
    31 00000583 41                  <1> 	inc	ecx
    32 00000584 83F91E              <1> 	cmp	ecx, 30
    33 00000587 7CE8                <1> 	jl	.10L
    34 00000589 B900000000          <1> 	mov	ecx, 0
    35                              <1> 	
    36 0000058E EBE1                <1> 	jmp	.10L
    37                              <1> .10E:
    38                              <1> 
    39 00000590 5E                  <1> 	pop	esi
    40 00000591 5A                  <1> 	pop	edx
    41 00000592 59                  <1> 	pop	ecx
    42 00000593 5B                  <1> 	pop	ebx
    43 00000594 58                  <1> 	pop	eax
    44                              <1> 
    45 00000595 89EC                <1> 	mov	esp, ebp
    46 00000597 5D                  <1> 	pop	ebp
    47                              <1> 
    48 00000598 C3                  <1> 	ret
   203                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 00000599 55                  <1> 	push	ebp
     3 0000059A 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000059C 56                  <1> 	push	esi
     6 0000059D 57                  <1> 	push	edi
     7 0000059E 50                  <1> 	push	eax
     8 0000059F 53                  <1> 	push	ebx
     9 000005A0 51                  <1> 	push	ecx
    10 000005A1 52                  <1> 	push	edx
    11                              <1> 
    12 000005A2 8B7508              <1> 	mov	esi, [ebp + 8]
    13 000005A5 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 000005A8 B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 000005AD 83F910              <1> 	cmp	ecx, 16
    18 000005B0 732E                <1> 	jae	.10E
    19                              <1> 
    20 000005B2 89C8                <1> 	mov	eax, ecx
    21 000005B4 83E001              <1> 	and	eax, 0x01	; % 2
    22 000005B7 C1E003              <1> 	shl	eax, 3		; *= 8
    23 000005BA 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 000005BC 89CB                <1> 	mov	ebx, ecx
    26 000005BE D1EB                <1> 	shr	ebx, 1		; / 2
    27 000005C0 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 000005C2 89CA                <1> 	mov	edx, ecx
    32 000005C4 D1E2                <1> 	shl	edx, 1
    33 000005C6 8B92[F3050000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 000005CC 68[EA050000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 000005D4 E882FFFFFF6683C410  <1>
    36                              <1> 
    37 000005DD 41                  <1> 	inc	ecx
    38 000005DE EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 000005E0 52                  <1> 	push	edx	
    42 000005E1 51                  <1> 	push	ecx	
    43 000005E2 53                  <1> 	push	ebx	
    44 000005E3 50                  <1> 	push	eax	
    45 000005E4 57                  <1> 	push	edi	
    46 000005E5 56                  <1> 	push	esi	
    47                              <1> 
    48 000005E6 89EC                <1> 	mov	esp, ebp
    49 000005E8 5D                  <1> 	pop	ebp
    50                              <1> 
    51 000005E9 C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 000005EA 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 000005F3 00000008            <1> .t0:	dw 0x0000,0x0800
    57 000005F7 00010009            <1> 	dw 0x0100,0x0900
    58 000005FB 0002000A            <1> 	dw 0x0200,0x0A00
    59 000005FF 0003000B            <1> 	dw 0x0300,0x0B00
    60 00000603 0004000C            <1> 	dw 0x0400,0x0C00
    61 00000607 0005000D            <1> 	dw 0x0500,0x0D00
    62 0000060B 0006000E            <1> 	dw 0x0600,0x0E00
    63 0000060F 0007000F            <1> 	dw 0x0700,0x0F00
   204                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 00000613 55                  <1> 	push	ebp
     4 00000614 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000616 57                  <1> 	push	edi
     7 00000617 53                  <1> 	push	ebx
     8 00000618 51                  <1> 	push	ecx
     9                              <1> 
    10 00000619 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 0000061C C1E704              <1> 	shl	edi, 4
    12 0000061F 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 00000626 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 00000629 89D9                <1> 	mov	ecx, ebx
    16 0000062B C1EB03              <1> 	shr	ebx, 3
    17 0000062E 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 00000630 83E107              <1> 	and	ecx, 0x07
    20 00000633 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 00000638 D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 0000063A 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 0000063D 6A03E84CFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 00000646 C404                <1>
    28 00000648 6A08E85AFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 00000651 C404                <1>
    29 00000653 516A085753E8B8FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 0000065C FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 00000661 6A02E828FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 0000066A C404                <1>
    34 0000066C 6A04E836FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 00000675 C404                <1>
    35 00000677 516A045753E894FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 00000680 FF6683C410          <1>
    36                              <1> 	
    37 00000685 6A01E804FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 0000068E C404                <1>
    38 00000690 6A02E812FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 00000699 C404                <1>
    39 0000069B 516A025753E870FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 000006A4 FF6683C410          <1>
    40                              <1> 	
    41 000006A9 6A00E8E0FCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 000006B2 C404                <1>
    42 000006B4 6A01E8EEFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 000006BD C404                <1>
    43 000006BF 516A015753E84CFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 000006C8 FF6683C410          <1>
    44                              <1> 
    45 000006CD 59                  <1> 	pop	ecx
    46 000006CE 5B                  <1> 	pop	ebx
    47 000006CF 5F                  <1> 	pop	edi
    48                              <1> 
    49 000006D0 89EC                <1> 	mov	esp, ebp
    50 000006D2 5D                  <1> 	pop	ebp
    51                              <1> 
    52 000006D3 C3                  <1> 	ret
    53                              <1> 
   205                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 000006D4 55                  <1> 	push	ebp
     3 000006D5 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000006D7 6A00                <1> 	push	dword 0	; SUM: - 4
     6 000006D9 6A00                <1> 	push	dword 0	; x0 : - 8
     7 000006DB 6A00                <1> 	push	dword 0	; wid: -12
     8 000006DD 6A00                <1> 	push	dword 0	; inx: -16
     9 000006DF 6A00                <1> 	push	dword 0	; y0 : -20
    10 000006E1 6A00                <1> 	push	dword 0	; hei: -24
    11 000006E3 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 000006E5 50                  <1> 	push	eax
    14 000006E6 53                  <1> 	push	ebx
    15 000006E7 51                  <1> 	push	ecx
    16 000006E8 52                  <1> 	push	edx
    17 000006E9 56                  <1> 	push	esi
    18 000006EA 57                  <1> 	push	edi
    19                              <1> 
    20 000006EB 8B4508              <1> 	mov	eax, [ebp + 8]
    21 000006EE 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 000006F1 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 000006F3 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 000006F5 F7DB                <1> 	neg	ebx
    26 000006F7 BEFFFFFFFF          <1> 	mov	esi, -1
    27 000006FC EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 000006FE BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 00000703 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 00000706 8B5514              <1> 	mov	edx, [ebp +20]
    34 00000709 29CA                <1> 	sub	edx, ecx
    35 0000070B 7D09                <1> 	jge	.20F
    36                              <1> 
    37 0000070D F7DA                <1> 	neg	edx
    38 0000070F BFFFFFFFFF          <1> 	mov	edi, -1
    39 00000714 EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 00000716 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 0000071B 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 0000071E 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 00000721 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 00000724 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 00000727 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 0000072A 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 0000072D 39D3                <1> 	cmp	ebx, edx
    53 0000072F 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 00000731 8D75EC              <1> 	lea	esi, [ebp -20]
    56 00000734 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 00000737 EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 00000739 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 0000073C 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 0000073F 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 00000742 83F900              <1> 	cmp	ecx, 0
    67 00000745 7505                <1> 	jnz	.30E
    68 00000747 B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75                              <1> %ifdef	USE_SYSTEM_CALL
    76 0000074C 51                  <1> 	push	ecx
    77 0000074D 52                  <1> 	push	edx
    78 0000074E 53                  <1> 	push	ebx
    79                              <1> 
    80 0000074F 8B4DF8              <1> 	mov	ecx, [ebp - 8]
    81 00000752 8B55EC              <1> 	mov	edx, [ebp -20]
    82 00000755 8B5D18              <1> 	mov	ebx, [ebp +24]
    83                              <1> 
    84 00000758 CD82                <1> 	int	0x82
    85                              <1> 
    86 0000075A 5B                  <1> 	pop	ebx
    87 0000075B 5A                  <1> 	pop	edx
    88 0000075C 59                  <1> 	pop	ecx
    89                              <1> %else	
    90                              <1> 	cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    91                              <1> %endif
    92                              <1> 	
    93                              <1> 	; update coordinate
    94 0000075D 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    95 00000760 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    96                              <1> 
    97 00000762 8B45FC              <1> 	mov	eax, [ebp - 4]
    98 00000765 0347FC              <1> 	add	eax, [edi - 4]
    99 00000768 8B5EFC              <1> 	mov	ebx, [esi - 4]
   100                              <1> 
   101 0000076B 39D8                <1> 	cmp	eax, ebx
   102 0000076D 7C07                <1> 	jl	.52E
   103 0000076F 29D8                <1> 	sub	eax, ebx	; sum -= wid
   104                              <1> 	; sum can only add -1 or 1
   105                              <1> 	; so. not be  "dif * 2 < sum" 
   106                              <1> 
   107 00000771 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
   108 00000774 011F                <1> 	add	[edi - 0], ebx
   109                              <1> .52E:
   110 00000776 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
   111                              <1> 
   112 00000779 E2D1                <1> 	loop	.50L
   113                              <1> .50E:
   114                              <1> 
   115                              <1> 
   116 0000077B 5F                  <1> 	pop	edi
   117 0000077C 5E                  <1> 	pop	esi
   118 0000077D 5A                  <1> 	pop	edx
   119 0000077E 59                  <1> 	pop	ecx
   120 0000077F 5B                  <1> 	pop	ebx
   121 00000780 58                  <1> 	pop	eax
   122                              <1> 
   123 00000781 89EC                <1> 	mov	esp, ebp
   124 00000783 5D                  <1> 	pop	ebp
   125                              <1> 
   126 00000784 C3                  <1> 	ret
   127                              <1> 
   128                              <1> 
   206                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 00000785 55                  <1> 	push	ebp
     3 00000786 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000788 50                  <1> 	push	eax
     6 00000789 53                  <1> 	push	ebx
     7 0000078A 51                  <1> 	push	ecx
     8 0000078B 52                  <1> 	push	edx
     9 0000078C 56                  <1> 	push	esi
    10                              <1> 
    11 0000078D 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 00000790 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 00000793 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 00000796 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 00000799 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 0000079C 39C8                <1> 	cmp	eax, ecx
    21 0000079E 7C01                <1> 	jl	.10E		; OK
    22 000007A0 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 000007A1 39D3                <1> 	cmp	ebx, edx
    25 000007A3 7C02                <1> 	jl	.20E		; OK
    26 000007A5 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 000007A7 5653515350E823FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 000007B0 FF6683C414          <1>
    36 000007B5 5652505350E815FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 000007BE FF6683C414          <1>
    37                              <1> 
    38 000007C3 4A                  <1> 	dec	edx
    39 000007C4 5652515250E806FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 000007CD FF6683C414          <1>
    40 000007D2 42                  <1> 	inc	edx
    41                              <1> 
    42 000007D3 49                  <1> 	dec	ecx
    43 000007D4 5652515351E8F6FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 000007DD FF6683C414          <1>
    44                              <1> 
    45 000007E2 5E                  <1> 	pop	esi
    46 000007E3 5A                  <1> 	pop	edx
    47 000007E4 59                  <1> 	pop	ecx
    48 000007E5 5B                  <1> 	pop	ebx
    49 000007E6 58                  <1> 	pop	eax
    50                              <1> 
    51 000007E7 89EC                <1> 	mov	esp, ebp
    52 000007E9 5D                  <1> 	pop	ebp
    53                              <1> 
    54 000007EA C3                  <1> 	ret
    55                              <1> 
   207                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 000007EB 55                  <1> 	push 	ebp
     3 000007EC 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000007EE 50                  <1> 	push	eax
     6 000007EF 53                  <1> 	push	ebx
     7 000007F0 51                  <1> 	push	ecx
     8 000007F1 52                  <1> 	push	edx
     9 000007F2 56                  <1> 	push	esi
    10 000007F3 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 000007F4 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 000007F8 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 000007FB 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 000007FE 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 00000800 B020                <1> 	mov	al,' '
    27 00000802 F7C304000000        <1> 	test	ebx, 0b0100
    28 00000808 7402                <1> 	je	.42E
    29 0000080A B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 0000080C FC                  <1> 	cld
    32 0000080D F3AA                <1> 	rep	stosb
    33                              <1> 
    34 0000080F 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 00000812 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 00000815 89F7                <1> 	mov	edi, esi
    37 00000817 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 00000819 4F                  <1> 	dec	edi
    39                              <1> 
    40 0000081A F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 00000820 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 00000822 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 00000825 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 00000827 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 0000082A F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 00000830 7410                <1> .20Q:	je	.20E		; not print sign
    51 00000832 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 00000835 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 00000837 F7D8                <1> 	neg	eax		; ax *= -1
    54 00000839 C6062D              <1> 	mov	[esi], byte '-'
    55 0000083C EB03                <1> 	jmp	.22E
    56 0000083E C6062B              <1> .22F:	mov	[esi], byte '+'
    57 00000841 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 00000842 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 00000845 BA00000000          <1> 	mov	edx, 0
    64 0000084A F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 0000084C 89D6                <1> 	mov	esi, edx
    68 0000084E 8A96[66080000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 00000854 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 00000856 4F                  <1> 	dec	edi
    72                              <1> 
    73 00000857 83F800              <1> 	cmp	eax,0
    74 0000085A E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 0000085C 5F                  <1> 	pop	edi
    79 0000085D 5E                  <1> 	pop	esi
    80 0000085E 5A                  <1> 	pop	edx
    81 0000085F 59                  <1> 	pop	ecx
    82 00000860 5B                  <1> 	pop	ebx
    83 00000861 58                  <1> 	pop	eax
    84                              <1> 
    85 00000862 89EC                <1> 	mov	esp, ebp
    86 00000864 5D                  <1> 	pop	ebp
    87                              <1> 
    88 00000865 C3                  <1> 	ret
    89                              <1> 
    90 00000866 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 0000086F 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   208                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 00000876 55                  <1> 	push	ebp
     3 00000877 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000879 50                  <1> 	push	eax
     6 0000087A 53                  <1> 	push	ebx
     7                              <1> 
     8 0000087B 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 0000087E 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 00000881 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 00000888 [E8080000]53E859FF- <1>
    10 00000890 FFFF6683C414        <1>
    11                              <1> 
    12 00000896 88E3                <1> 	mov	bl, ah
    13 00000898 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 0000089F [E5080000]53E842FF- <1>
    13 000008A7 FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 000008AD C1E810              <1> 	shr	eax, 16
    17 000008B0 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 000008B7 [E2080000]50E82AFF- <1>
    17 000008BF FFFF6683C414        <1>
    18                              <1> 
    19 000008C5 68[E2080000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 000008CD FF750CFF7508E883FC- <1>
    19 000008D6 FFFF6683C410        <1>
    20                              <1> 
    21 000008DC 5B                  <1> 	pop	ebx
    22 000008DD 58                  <1> 	pop	eax
    23                              <1> 
    24 000008DE 89EC                <1> 	mov	esp, ebp
    25 000008E0 5D                  <1> 	pop	ebp
    26                              <1> 
    27 000008E1 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 000008E2 5A5A3A              <1> .hour:	db	"ZZ:"
    31 000008E5 5A5A3A              <1> .min:	db	"ZZ:"
    32 000008E8 5A5A00              <1> .sec:	db	"ZZ", 0
   209                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 000008EB 55                  <1> 	push	ebp
     3 000008EC 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000008EE 53                  <1> 	push	ebx
     6                              <1> 
     7 000008EF B00A                <1> 	mov	al, 0x0A
     8 000008F1 E670                <1> 	out	0x70, al
     9 000008F3 E471                <1> 	in	al, 0x71
    10                              <1> 
    11 000008F5 A880                <1> 	test	al, 0x80
    12 000008F7 7407                <1> 	je	.10F
    13 000008F9 B801000000          <1> 	mov	eax, 1		; data updating. error
    14 000008FE EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 00000900 B004                <1> 	mov	al, 0x04	; Hour
    17 00000902 E670                <1> 	out	0x70, al
    18 00000904 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 00000906 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 00000909 B002                <1> 	mov	al, 0x02
    23 0000090B E670                <1> 	out	0x70, al
    24 0000090D E471                <1> 	in	al, 0x71
    25                              <1> 
    26 0000090F C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 00000912 B000                <1> 	mov	al, 0x00
    29 00000914 E670                <1> 	out	0x70, al
    30 00000916 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 00000918 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 0000091D 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 00000920 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 00000922 B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 00000927 5B                  <1> 	pop	ebx
    45                              <1> 
    46 00000928 89EC                <1> 	mov	esp, ebp
    47 0000092A 5D                  <1> 	pop	ebp
    48                              <1> 
    49 0000092B C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   210                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 0000092C 60                  <1> 	pusha		; all registers in stack
     3 0000092D 1E                  <1> 	push	ds
     4 0000092E 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 0000092F 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 00000933 8ED8                <1> 	mov	ds, ax
     9 00000935 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 00000937 68[74030000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 0000093F FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 00000945 B00C                <2>  mov al, %2
    13 00000947 E670                <2>  out %1, al
    14 00000949 E471                <1> 	in	al, 0x71
    15                              <1> 
    16 0000094B B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 0000094D E620                <1> 	out	0x20, al
    18 0000094F E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 00000951 07                  <1> 	pop	es
    21 00000952 1F                  <1> 	pop	ds
    22 00000953 61                  <1> 	popa
    23                              <1> 
    24 00000954 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 00000955 55                  <1> 	push	ebp
    28 00000956 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 00000958 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 00000959 B00B                <2>  mov al, %2
    32 0000095B E670                <2>  out %1, al
    33                              <1> 
    34 0000095D E471                <1> 	in	al, 0x71
    35 0000095F 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 00000962 E671                <1> 	out	0x71, al
    38                              <1> 
    39 00000964 58                  <1> 	pop	eax
    40                              <1> 
    41 00000965 89EC                <1> 	mov	esp, ebp
    42 00000967 5D                  <1> 	pop	ebp
    43                              <1> 
    44 00000968 C3                  <1> 	ret
    45                              <1> 
   211                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 00000969 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 0000096A B011                <2>  mov al, %2
     6 0000096C E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 0000096E B020                <2>  mov al, %2
     7 00000970 E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 00000972 B004                <2>  mov al, %2
     8 00000974 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 00000976 B005                <2>  mov al, %2
     9 00000978 E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 0000097A B0FF                <2>  mov al, %2
    10 0000097C E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 0000097E B011                <2>  mov al, %2
    12 00000980 E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 00000982 B028                <2>  mov al, %2
    13 00000984 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 00000986 B002                <2>  mov al, %2
    14 00000988 E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 0000098A B001                <2>  mov al, %2
    15 0000098C E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 0000098E B0FF                <2>  mov al, %2
    16 00000990 E6A1                <2>  out %1, al
    17                              <1> 
    18 00000992 58                  <1> 	pop	eax
    19                              <1> 
    20 00000993 C3                  <1> 	ret
   212                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 00000994 FB                  <1> 	sti
     3                              <1> 
     4 00000995 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 0000099E 19E8B7FBFFFF6683C4- <1>
     4 000009A7 10                  <1>
     5                              <1> 
     6 000009A8 8B0424              <1> 	mov	eax, [esp + 0]
     7 000009AB 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 000009B2 [700A0000]50E82FFE- <1>
     7 000009BA FFFF6683C414        <1>
     8                              <1> 	
     9 000009C0 8B442404            <1> 	mov	eax, [esp + 4]
    10 000009C4 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 000009CB [810A0000]50E816FE- <1>
    10 000009D3 FFFF6683C414        <1>
    11                              <1> 	
    12 000009D9 8B442408            <1> 	mov	eax, [esp + 8]
    13 000009DD 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 000009E4 [920A0000]50E8FDFD- <1>
    13 000009EC FFFF6683C414        <1>
    14                              <1> 	
    15 000009F2 8B44240C            <1> 	mov	eax, [esp +12]
    16 000009F6 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 000009FD [A30A0000]50E8E4FD- <1>
    16 00000A05 FFFF6683C414        <1>
    17                              <1> 
    18 00000A0B 68[690A0000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 00000A13 00006A106A19E83DFB- <1>
    18 00000A1C FFFF6683C410        <1>
    19 00000A22 68[7A0A0000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 00000A2A 00006A116A19E826FB- <1>
    19 00000A33 FFFF6683C410        <1>
    20 00000A39 68[8B0A0000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 00000A41 00006A126A19E80FFB- <1>
    20 00000A4A FFFF6683C410        <1>
    21 00000A50 68[9C0A0000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 00000A58 00006A136A19E8F8FA- <1>
    21 00000A61 FFFF6683C410        <1>
    22                              <1> 
    23 00000A67 EBFE                <1> 	jmp	$
    24                              <1> 
    25 00000A69 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 00000A70 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 00000A79 00                  <1>
    27 00000A7A 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 00000A81 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 00000A8A 00                  <1>
    29 00000A8B 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 00000A92 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 00000A9B 00                  <1>
    31 00000A9C 2020202B31323A      <1> .s4:	db	"   +12:"
    32 00000AA3 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 00000AAC 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 00000AAD 9C                  <1> 	pushf
    37 00000AAE 0E                  <1> 	push	cs
    38 00000AAF 68[94090000]        <1> 	push	int_stop
    39                              <1> 
    40 00000AB4 B8[BA0A0000]        <1> 	mov	eax, .s0
    41 00000AB9 CF                  <1> 	iret
    42                              <1> 
    43 00000ABA 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 00000AC3 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 00000ACB 55                  <1> 	push	ebp
    47 00000ACC 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 00000ACE 50                  <1> 	push	eax
    50 00000ACF 53                  <1> 	push	ebx
    51 00000AD0 51                  <1> 	push	ecx
    52 00000AD1 57                  <1> 	push	edi
    53                              <1> 
    54 00000AD2 8D05[AD0A0000]      <1> 	lea	eax, [int_default]
    55 00000AD8 BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000ADD 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 00000ADF B900010000          <1> 	mov	ecx, 256
    65 00000AE4 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000AE9 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 00000AEB 894704              <1> 	mov	[edi + 4], eax	; top
    69 00000AEE 83C708              <1> 	add	edi, 8
    70 00000AF1 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 00000AF3 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000AFA 5F                  <1> 	pop	edi
    75 00000AFB 59                  <1> 	pop	ecx
    76 00000AFC 5B                  <1> 	pop	ebx
    77 00000AFD 58                  <1> 	pop	eax
    78                              <1> 
    79 00000AFE 89EC                <1> 	mov	esp, ebp
    80 00000B00 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00000B01 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 00000B02 9C                  <1> 	pushf
    86 00000B03 0E                  <1> 	push	cs
    87 00000B04 68[94090000]        <1> 	push	int_stop
    88                              <1> 
    89 00000B09 B8[0F0B0000]        <1> 	mov	eax, .s0
    90 00000B0E CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 00000B0F 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 00000B18 44495620203E2000    <1>
   213                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 00000B20 60                  <1> 	pusha
     3 00000B21 1E                  <1> 	push	ds
     4 00000B22 06                  <1> 	push	es
     5                              <1> 
     6 00000B23 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 00000B27 8ED8                <1> 	mov	ds, ax
     8 00000B29 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000B2B E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 00000B2D 5068[440B0000]E854- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 00000B35 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 00000B3C B020                <2>  mov al, %2
    16 00000B3E E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 00000B40 07                  <1> 	pop	es
    20 00000B41 1F                  <1> 	pop	ds
    21 00000B42 61                  <1> 	popa
    22                              <1> 
    23 00000B43 CF                  <1> 	iret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000B44 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   214                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   215                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 00000B5C 55                  <1> 	push	ebp
     4 00000B5D 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000B5F 56                  <1> 	push	esi
     7 00000B60 57                  <1> 	push	edi
     8 00000B61 53                  <1> 	push	ebx
     9                              <1> 
    10 00000B62 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000B65 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 00000B68 B800000000          <1> 	mov	eax, 0
    14 00000B6D 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000B6F 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000B72 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000B74 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 00000B78 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 00000B7A 43                  <1> 	inc	ebx
    23 00000B7B 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 00000B7E 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000B80 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000B85 5B                  <1> 	pop	ebx
    30 00000B86 5F                  <1> 	pop	edi
    31 00000B87 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000B88 89EC                <1> 	mov	esp, ebp
    34 00000B8A 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000B8B C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 00000B8C 55                  <1> 	push	ebp
    40 00000B8D 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 00000B8F 56                  <1> 	push	esi
    43 00000B90 53                  <1> 	push	ebx
    44 00000B91 51                  <1> 	push	ecx
    45                              <1> 
    46 00000B92 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000B95 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000B98 89D9                <1> 	mov	ecx, ebx
    50 00000B9A 41                  <1> 	inc	ecx
    51 00000B9B 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 00000B9E 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000BA0 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000BA2 8A450C              <1> 	mov	al, [ebp +12]
    60 00000BA5 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000BA9 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 00000BAC B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000BB1 59                  <1> 	pop	ecx
    66 00000BB2 5B                  <1> 	pop	ebx
    67 00000BB3 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000BB4 89EC                <1> 	mov	esp, ebp
    70 00000BB6 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000BB7 C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000BB8 55                  <1> 	push	ebp
    77 00000BB9 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 00000BBB 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 00000BBC 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 00000BBF 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000BC2 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000BC5 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000BC8 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 00000BCB B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000BD0 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000BD1 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000BD4 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000BD7 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000BDE [080C0000]50E803FC- <1>
    95 00000BE6 FFFF6683C414        <1>
    96 00000BEC 68[080C0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000BF4 52E861F9FFFF6683C4- <1>
    96 00000BFD 10                  <1>
    97                              <1> 
    98 00000BFE 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000C01 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000C03 61                  <1> 	popa
   104                              <1> 
   105 00000C04 89EC                <1> 	mov	esp, ebp
   106 00000C06 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000C07 C3                  <1> 	ret
   109                              <1> 
   110 00000C08 2D2D00              <1> .tmp:	db	"--",0
   216                                  %include	"../modules/protect/call_gate.s"
     1                              <1> call_gate:
     2                              <1> 	;retf	4 * 4
     3                              <1> ; if SS_GATE_0 called
     4 00000C0B 55                  <1> 	push	ebp
     5 00000C0C 89E5                <1> 	mov	ebp, esp
     6                              <1> 
     7 00000C0E 60                  <1> 	pusha
     8 00000C0F 1E                  <1> 	push	ds
     9 00000C10 06                  <1> 	push	es
    10                              <1> 
    11 00000C11 66B81000            <1> 	mov	ax, 0x0010
    12 00000C15 8ED8                <1> 	mov	ds, ax
    13 00000C17 8EC0                <1> 	mov	es, ax
    14                              <1> 
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_1
    17                              <1> 	;je	.11L
    18                              <1> 
    19                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t0
    20                              <1> 	;jmp	.10E
    21                              <1> .11L:
    22                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t1
    23                              <1> .10E:
    24                              <1> 		
    25                              <1> 	;cdecl	itoa, esp, .t2, 8, 16, 0b0100
    26                              <1> 	;cdecl	draw_str, 0, 1, 0x010F, .t2
    27                              <1> 
    28                              <1> 	;cdecl	itoa, dword [ESP_COUNTER], .t3, 8, 16, 0b0100
    29                              <1> 	;cdecl	draw_str, 0, 2, 0x010F, .t3
    30                              <1> 	
    31                              <1> 
    32                              <1> 
    33                              <1> 	; ebp + 0 -- EBP
    34                              <1> 	; ebp + 4 -- EIP
    35                              <1> 	; ebp + 8 -- CS
    36 00000C19 8B450C              <1> 	mov	eax, dword[ebp +12]
    37 00000C1C 8B5D10              <1> 	mov	ebx, dword[ebp +16]
    38 00000C1F 8B4D14              <1> 	mov	ecx, dword[ebp +20]
    39 00000C22 8B5518              <1> 	mov	edx, dword[ebp +24]
    40 00000C25 52515350E82DF9FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx
    40 00000C2E 6683C410            <1>
    41                              <1> 	; wrapper
    42                              <1> 
    43 00000C32 07                  <1> 	pop	es
    44 00000C33 1F                  <1> 	pop	ds
    45 00000C34 61                  <1> 	popa
    46                              <1> 
    47 00000C35 89EC                <1> 	mov	esp, ebp
    48 00000C37 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000C38 CA1000              <1> 	retf	4 * 4	; 4 DWORDs
    51                              <1> 
    52                              <1> 
    53 00000C3B 7461736B5F3000      <1> .t0:	db	"task_0",0
    54 00000C42 7461736B5F3100      <1> .t1:	db	"task_1",0
    55 00000C49 2D2D2D2D2D2D2D2D00  <1> .t2:	db	"--------", 0
    56 00000C52 2D2D2D2D2D2D2D2D00  <1> .t3:	db	"--------", 0
   217                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ; system calls
     2                              <1> trap_gate_81:	; system call 81, draw_char
     3                              <1> %ifdef	USE_TEST_AND_SET
     4 00000C5B 68[A80C0000]E84B00- <1> 	cdecl	test_and_set, IN_USE_81
     4 00000C63 00006683C404        <1>
     5                              <1> %endif
     6 00000C69 50525153E8EAF7FFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
     6 00000C72 6683C410            <1>
     7                              <1> %ifdef	USE_TEST_AND_SET
     8 00000C76 C705[A80C0000]0000- <1> 	mov	[IN_USE_81], dword 0
     8 00000C7E 0000                <1>
     9                              <1> %endif
    10 00000C80 CF                  <1> 	iret
    11                              <1> 
    12                              <1> trap_gate_82:
    13                              <1> %ifdef	USE_TEST_AND_SET
    14 00000C81 68[AC0C0000]E82500- <1> 	cdecl	test_and_set, IN_USE_82
    14 00000C89 00006683C404        <1>
    15                              <1> %endif
    16 00000C8F 535251E87CF9FFFF66- <1> 	cdecl	draw_pixel, ecx, edx, ebx
    16 00000C98 83C40C              <1>
    17                              <1> %ifdef	USE_TEST_AND_SET
    18 00000C9B C705[AC0C0000]0000- <1> 	mov	[IN_USE_82], dword 0
    18 00000CA3 0000                <1>
    19                              <1> %endif
    20 00000CA5 CF                  <1> 	iret
    21                              <1> 
    22 00000CA6 00<rept>            <1> ALIGN	4,		db	0
    23 00000CA8 00000000            <1> IN_USE_81:		dd	0
    24 00000CAC 00000000            <1> IN_USE_82:		dd	0
   218                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2 00000CB0 55                  <1> 	push	ebp
     3 00000CB1 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000CB3 50                  <1> 	push	eax
     6 00000CB4 53                  <1> 	push	ebx
     7                              <1> 
     8 00000CB5 B800000000          <1> 	mov	eax, 0		; set bit
     9 00000CBA 8B5D08              <1> 	mov	ebx, [ebp + 8]	; global variable
    10                              <1> 
    11                              <1> .10L:
    12 00000CBD F00FAB03            <1> 	lock	bts [ebx], eax
    13 00000CC1 7307                <1> 	jnc	.10E		; we can use registers
    14                              <1> .12L:
    15 00000CC3 0FA303              <1> 	bt	[ebx], eax
    16 00000CC6 72FB                <1> 	jc	.12L		; we can not use
    17                              <1> 
    18 00000CC8 EBF3                <1> 	jmp	.10L
    19                              <1> .10E:
    20                              <1> 	
    21 00000CCA 5B                  <1> 	pop	ebx
    22 00000CCB 58                  <1> 	pop	eax
    23                              <1> 
    24 00000CCC 89EC                <1> 	mov	esp, ebp
    25 00000CCE 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000CCF C3                  <1> 	ret
    28                              <1> 
   219                                  %include	"../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 	; eax : return value
     3                              <1> 	; ebx : segment selector
     4                              <1> 
     5 00000CD0 8B83[32130000]      <1> 	mov	eax, [GDT + ebx + 2]
     6 00000CD6 C1E008              <1> 	shl	eax, 8
     7 00000CD9 8A83[37130000]      <1> 	mov	al, [GDT + ebx + 7]
     8 00000CDF C1C808              <1> 	ror	eax, 8
     9                              <1> 
    10 00000CE2 C3                  <1> 	ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 	; eax : tss address
    14 00000CE3 DD7068              <1> 	fnsave	[eax + 104]
    15 00000CE6 C780D4000000010000- <1> 	mov	[eax + 104 + 108], dword 1	; store flag or present flag(?)
    15 00000CEF 00                  <1>
    16                              <1> 	
    17 00000CF0 C3                  <1> 	ret
    18                              <1> 
    19                              <1> load_fpu_context:
    20 00000CF1 83B8D400000000      <1> 	cmp	[eax + 104 + 108], dword 0
    21 00000CF8 7505                <1> 	jne	.10F
    22 00000CFA 9BDBE3              <1> 	finit					; not initialized yet
    23 00000CFD EB03                <1> 	jmp	.10E
    24                              <1> .10F:
    25 00000CFF DD6068              <1> 	frstor	[eax + 104]
    26                              <1> .10E:
    27 00000D02 C3                  <1> 	ret
    28                              <1> 
    29                              <1> int_nm:
    30 00000D03 60                  <1> 	pusha
    31 00000D04 06                  <1> 	push	es
    32 00000D05 1E                  <1> 	push	ds
    33                              <1> 
    34 00000D06 66B81000            <1> 	mov	ax, DS_KERNEL
    35 00000D0A 8EC0                <1> 	mov	es, ax
    36 00000D0C 8ED8                <1> 	mov	ds, ax
    37                              <1> 
    38 00000D0E 0F06                <1> 	clts
    39                              <1> 
    40 00000D10 8B3D[5C0D0000]      <1> 	mov	edi, [.last_tss]
    41 00000D16 0F00CE              <1> 	str	esi
    42 00000D19 83E6F8              <1> 	and	esi, ~0x0007	; exclude TI,RPL bits
    43                              <1> 
    44 00000D1C 83FF00              <1> 	cmp	edi, 0		; first use
    45 00000D1F 7420                <1> 	je	.10F
    46                              <1> 
    47 00000D21 39FE                <1> 	cmp	esi, edi
    48 00000D23 741A                <1> 	je	.12E
    49                              <1> 
    50 00000D25 FA                  <1> 	cli
    51                              <1> 
    52 00000D26 89FB                <1> 	mov	ebx, edi
    53 00000D28 E8A3FFFFFF          <1> 	call	get_tss_base	; eax is address to tss
    54 00000D2D E8B1FFFFFF          <1> 	call	save_fpu_context; eax used here
    55                              <1> 
    56 00000D32 89F3                <1> 	mov	ebx, esi
    57 00000D34 E897FFFFFF          <1> 	call	get_tss_base
    58 00000D39 E8B3FFFFFF          <1> 	call	load_fpu_context
    59                              <1> 
    60 00000D3E FB                  <1> 	sti
    61                              <1> .12E:
    62 00000D3F EB0E                <1> 	jmp	.10E
    63                              <1> .10F:
    64 00000D41 FA                  <1> 	cli
    65                              <1> 
    66 00000D42 89F3                <1> 	mov	ebx, esi
    67 00000D44 E887FFFFFF          <1> 	call	get_tss_base
    68 00000D49 E8A3FFFFFF          <1> 	call	load_fpu_context
    69                              <1> 
    70 00000D4E FB                  <1> 	sti
    71                              <1> .10E:
    72                              <1> 
    73 00000D4F 8935[5C0D0000]      <1> 	mov	[.last_tss], esi
    74                              <1> 
    75 00000D55 1F                  <1> 	pop	ds
    76 00000D56 07                  <1> 	pop	es
    77 00000D57 61                  <1> 	popa
    78                              <1> 
    79 00000D58 CF                  <1> 	iret
    80                              <1> 
    81 00000D59 00<rept>            <1> ALIGN	4,	db	0
    82 00000D5C 00000000            <1> .last_tss:	dd	0
   220                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2 00000D60 55                  <1> 	push	ebp
     3 00000D61 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000D63 50                  <1> 	push	eax
     6 00000D64 51                  <1> 	push	ecx
     7                              <1> 
     8 00000D65 8B4D08              <1> 	mov	ecx, [ebp + 8]
     9 00000D68 A1[74120000]        <1> 	mov	eax, [TIMER_COUNT]
    10                              <1> .10L:
    11 00000D6D 3905[74120000]      <1> 	cmp	[TIMER_COUNT], eax
    12 00000D73 74F8                <1> 	je	.10L
    13 00000D75 40                  <1> 	inc	eax		; per 10ms
    14 00000D76 E2F5                <1> 	loop	.10L		; 10ms * ecx]
    15                              <1> 
    16 00000D78 59                  <1> 	pop	ecx
    17 00000D79 58                  <1> 	pop	eax
    18                              <1> 
    19 00000D7A 89EC                <1> 	mov	esp, ebp
    20 00000D7C 5D                  <1> 	pop	ebp
    21                              <1> 
    22 00000D7D C3                  <1> 	ret
    23                              <1> 
   221                                  %include	"../modules/protect/ctrl_alt_end.s"
     1                              <1> ctrl_alt_end:
     2 00000D7E 55                  <1> 	push	ebp
     3 00000D7F 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000D81 8B4508              <1> 	mov	eax, [ebp + 8]
     6 00000D84 0FBAF007            <1> 	btr	eax, 7		; press : 0*******, pull : 1*******
     7 00000D88 7209                <1> 	jc	.10F
     8 00000D8A 0FAB05[D00D0000]    <1> 	bts	[.key_state], eax	; set
     9 00000D91 EB07                <1> 	jmp	.10E
    10                              <1> .10F:
    11 00000D93 0FBB05[D00D0000]    <1> 	btc	[.key_state], eax	; clear
    12                              <1> .10E:
    13                              <1> 	; key press check
    14 00000D9A B81D000000          <1> 	mov	eax, 0x1D		; ctrl
    15 00000D9F 0FA305[D00D0000]    <1> 	bt	[.key_state], eax
    16 00000DA6 7321                <1> 	jnc	.20E			; not press
    17                              <1> 
    18 00000DA8 B838000000          <1> 	mov	eax, 0x38
    19 00000DAD 0FA305[D00D0000]    <1> 	bt	[.key_state], eax
    20 00000DB4 7313                <1> 	jnc	.20E
    21                              <1> 
    22 00000DB6 B84F000000          <1> 	mov	eax, 0x4F
    23 00000DBB 0FA305[D00D0000]    <1> 	bt	[.key_state], eax
    24 00000DC2 7305                <1> 	jnc	.20E
    25                              <1> 
    26 00000DC4 B8FFFFFFFF          <1> 	mov	eax, -1			; success
    27                              <1> .20E:
    28 00000DC9 C1F808              <1> 	sar	eax, 8
    29                              <1> 
    30 00000DCC 89EC                <1> 	mov	esp, ebp
    31 00000DCE 5D                  <1> 	pop	ebp
    32                              <1> 
    33 00000DCF C3                  <1> 	ret
    34                              <1> 
    35                              <1> 
    36 00000DD0 00<rept>            <1> .key_state:	times	32	db	0
   222                                  %include	"../modules/protect/power_off.s"
     1                              <1> power_off:
     2 00000DF0 55                  <1> 	push	ebp
     3 00000DF1 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000DF3 50                  <1> 	push	eax
     6 00000DF4 53                  <1> 	push	ebx
     7 00000DF5 51                  <1> 	push	ecx
     8 00000DF6 52                  <1> 	push	edx
     9 00000DF7 56                  <1> 	push	esi
    10                              <1> 
    11 00000DF8 68[7B0F0000]680F02- <1> 	cdecl	draw_str, 25, 14, 0x020F, .s0
    11 00000E00 00006A0E6A19E850F7- <1>
    11 00000E09 FFFF6683C410        <1>
    12                              <1> 
    13 00000E0F 0F20C0              <1> 	mov	eax, cr0
    14 00000E12 25FFFFFF7F          <1> 	and	eax, 0x7FFF_FFFF
    15 00000E17 0F22C0              <1> 	mov	cr0, eax
    16 00000E1A EB00                <1> 	jmp	$ + 2
    17                              <1> 
    18 00000E1C A1047E0000          <1> 	mov	eax, [0x7C00 + 512 + 4]
    19 00000E21 8B1D087E0000        <1> 	mov	ebx, [0x7C00 + 512 + 8]
    20 00000E27 83F800              <1> 	cmp	eax, 0
    21 00000E2A 7473                <1> 	je	.10E
    22                              <1> 	
    23 00000E2C 68525344545350E86C- <1> 	cdecl	acpi_find, eax, ebx, 'RSDT'
    23 00000E35 0100006683C40C      <1>
    24 00000E3C 83F800              <1> 	cmp	eax, 0
    25 00000E3F 745E                <1> 	je	.10E
    26                              <1> 
    27 00000E41 684641435050E88601- <1> 	cdecl	find_rsdt_entry, eax, 'FACP'
    27 00000E4A 00006683C408        <1>
    28 00000E50 83F800              <1> 	cmp	eax, 0
    29 00000E53 744A                <1> 	je	.10E
    30                              <1> 
    31 00000E55 8B5828              <1> 	mov	ebx, [eax + 40]	; DSDT address
    32 00000E58 83FB00              <1> 	cmp	ebx, 0
    33 00000E5B 7442                <1> 	je	.10E
    34                              <1> 
    35 00000E5D 8B4840              <1> 	mov	ecx, [eax + 64] ; PM1a_CNT_BLK
    36 00000E60 890D[980F0000]      <1> 	mov	[PM1a_CNT_BLK], ecx
    37                              <1> 
    38 00000E66 8B4844              <1> 	mov	ecx, [eax + 68]
    39 00000E69 890D[9C0F0000]      <1> 	mov	[PM1b_CNT_BLK], ecx
    40                              <1> 
    41 00000E6F 8B4B04              <1> 	mov	ecx, [ebx + 4]	; DSDT table length
    42 00000E72 83E924              <1> 	sub	ecx, 36		; exclude header
    43 00000E75 83C324              <1> 	add	ebx, 36		; exclude header
    44                              <1> 
    45 00000E78 685F53355F5153E820- <1> 	cdecl	acpi_find, ebx, ecx, '_S5_'
    45 00000E81 0100006683C40C      <1>
    46 00000E88 83F800              <1> 	cmp	eax, 0
    47 00000E8B 7412                <1> 	je	.10E		; S5 package not found
    48                              <1> 
    49 00000E8D 83C004              <1> 	add	eax, 4
    50 00000E90 50E86B0100006683C4- <1> 	cdecl	acpi_package_value, eax
    50 00000E99 04                  <1>
    51 00000E9A A3[A00F0000]        <1> 	mov	[S5_PACKAGE], eax
    52                              <1> 
    53                              <1> .10E:
    54                              <1> 	; power off failed
    55                              <1> 
    56 00000E9F 0F20C0              <1> 	mov	eax, cr0
    57 00000EA2 0D00000080          <1> 	or	eax, 0x8000_0000
    58 00000EA7 0F22C0              <1> 	mov	cr0, eax
    59 00000EAA EB00                <1> 	jmp	$ + 2
    60                              <1> 
    61 00000EAC 8B15[980F0000]      <1> 	mov	edx, [PM1a_CNT_BLK]
    62 00000EB2 83FA00              <1> 	cmp	edx, 0
    63 00000EB5 0F8495000000        <1> 	je	.20E
    64                              <1> 
    65 00000EBB 68[910F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s3
    65 00000EC3 00006A0E6A26E88DF6- <1>
    65 00000ECC FFFF6683C410        <1>
    66 00000ED2 6A64E887FEFFFF6683- <1> 	cdecl	wait_tick, 100
    66 00000EDB C404                <1>
    67 00000EDD 68[8E0F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s2
    67 00000EE5 00006A0E6A26E86BF6- <1>
    67 00000EEE FFFF6683C410        <1>
    68 00000EF4 6A64E865FEFFFF6683- <1> 	cdecl	wait_tick, 100
    68 00000EFD C404                <1>
    69 00000EFF 68[8B0F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s1
    69 00000F07 00006A0E6A26E849F6- <1>
    69 00000F10 FFFF6683C410        <1>
    70 00000F16 6A64E843FEFFFF6683- <1> 	cdecl	wait_tick, 100
    70 00000F1F C404                <1>
    71                              <1> 	
    72 00000F21 660FB605[A00F0000]  <1> 	movzx	ax, [S5_PACKAGE.0]
    73 00000F29 66C1E00A            <1> 	shl	ax, 10
    74 00000F2D 660D0020            <1> 	or	ax, 1 << 13
    75 00000F31 66EF                <1> 	out	dx, ax
    76                              <1> 
    77 00000F33 8B15[9C0F0000]      <1> 	mov	edx, [PM1b_CNT_BLK]
    78 00000F39 83FA00              <1> 	cmp	edx, 0
    79 00000F3C 7412                <1> 	je	.20E
    80                              <1> 
    81 00000F3E 660FB605[A10F0000]  <1> 	movzx	ax, [S5_PACKAGE.1]
    82 00000F46 66C1E00A            <1> 	shl	ax, 10
    83 00000F4A 660D0020            <1> 	or	ax, 1 << 13
    84 00000F4E 66EF                <1> 	out	dx, ax
    85                              <1> .20E:
    86 00000F50 6A64E809FEFFFF6683- <1> 	cdecl	wait_tick, 100
    86 00000F59 C404                <1>
    87 00000F5B 68[940F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s4
    87 00000F63 00006A0E6A26E8EDF5- <1>
    87 00000F6C FFFF6683C410        <1>
    88                              <1> 
    89 00000F72 5E                  <1> 	pop	esi
    90 00000F73 5A                  <1> 	pop	edx
    91 00000F74 59                  <1> 	pop	ecx
    92 00000F75 5B                  <1> 	pop	ebx
    93 00000F76 58                  <1> 	pop	eax
    94                              <1> 
    95 00000F77 89EC                <1> 	mov	esp, ebp
    96 00000F79 5D                  <1> 	pop	ebp
    97                              <1> 
    98 00000F7A C3                  <1> 	ret
    99                              <1> 	
   100 00000F7B 506F776572206F6666- <1> .s0:		db	"Power off...   ", 0
   100 00000F84 2E2E2E20202000      <1>
   101 00000F8B 203100              <1> .s1:		db	" 1", 0
   102 00000F8E 203200              <1> .s2:		db	" 2", 0
   103 00000F91 203300              <1> .s3:		db	" 3", 0
   104 00000F94 4E4700              <1> .s4:		db	"NG", 0
   105                              <1> 
   106 00000F97 00                  <1> ALIGN	4,	db	0
   107 00000F98 00000000            <1> PM1a_CNT_BLK:	dd	0
   108 00000F9C 00000000            <1> PM1b_CNT_BLK:	dd	0
   109                              <1> S5_PACKAGE:
   110 00000FA0 00                  <1> .0:		db	0
   111 00000FA1 00                  <1> .1:		db	0
   112 00000FA2 00                  <1> .2:		db	0
   113 00000FA3 00                  <1> .3:		db	0
   114                              <1> 
   115                              <1> 
   116                              <1> 
   223                                  %include	"../modules/protect/acpi_find.s"
     1                              <1> acpi_find:
     2 00000FA4 55                  <1> 	push	ebp
     3 00000FA5 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000FA7 50                  <1> 	push	eax
     6 00000FA8 51                  <1> 	push	ecx
     7 00000FA9 57                  <1> 	push	edi
     8                              <1> 
     9 00000FAA 8B7D08              <1> 	mov	edi, [ebp + 8]	; address
    10 00000FAD 8B4D0C              <1> 	mov	ecx, [ebp +12]	; length
    11 00000FB0 8B4510              <1> 	mov	eax, [ebp +16]	; search string
    12                              <1> 
    13 00000FB3 FC                  <1> 	cld
    14                              <1> .10L:
    15 00000FB4 F2AE                <1> 	repne	scasb		; compare only 1 byte(AL)
    16                              <1> 
    17 00000FB6 83F900              <1> 	cmp	ecx, 0
    18 00000FB9 7507                <1> 	jnz	.11E
    19 00000FBB B800000000          <1> 	mov	eax, 0
    20 00000FC0 EB09                <1> 	jmp	.10E		; failed
    21                              <1> .11E:
    22 00000FC2 263B47FF            <1> 	cmp	eax, [es:edi - 1]	; compare 4 bytes(name)
    23 00000FC6 75EC                <1> 	jne	.10L
    24                              <1> 	
    25 00000FC8 4F                  <1> 	dec	edi
    26 00000FC9 89F8                <1> 	mov	eax, edi
    27                              <1> .10E:
    28                              <1> 	
    29 00000FCB 5F                  <1> 	pop	edi
    30 00000FCC 59                  <1> 	pop	ecx
    31 00000FCD 5B                  <1> 	pop	ebx
    32                              <1> 
    33 00000FCE 89EC                <1> 	mov	esp, ebp
    34 00000FD0 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000FD1 C3                  <1> 	ret
    37                              <1> 
   224                                  %include	"../modules/protect/find_rsdt_entry.s"
     1                              <1> find_rsdt_entry:
     2 00000FD2 55                  <1> 	push	ebp
     3 00000FD3 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000FD5 53                  <1> 	push	ebx
     6 00000FD6 51                  <1> 	push	ecx
     7 00000FD7 56                  <1> 	push	esi
     8 00000FD8 57                  <1> 	push	edi
     9                              <1> 
    10 00000FD9 8B7508              <1> 	mov	esi, [ebp + 8]	; table address
    11 00000FDC 8B4D0C              <1> 	mov	ecx, [ebp +12]	; name
    12                              <1> 
    13 00000FDF BB00000000          <1> 	mov	ebx, 0
    14                              <1> 
    15 00000FE4 89F7                <1> 	mov	edi, esi
    16 00000FE6 037E04              <1> 	add	edi, [esi + 4]	; [esi + 4] is header length
    17 00000FE9 83C624              <1> 	add	esi, 36
    18                              <1> 	
    19                              <1> 	; search from esi to edi
    20                              <1> .10L:
    21 00000FEC 39FE                <1> 	cmp	esi, edi
    22 00000FEE 7D07                <1> 	jge	.10E
    23                              <1> 
    24 00000FF0 AD                  <1> 	lodsd			; eax = [esi]; esi++
    25                              <1> 
    26 00000FF1 3908                <1> 	cmp	[eax], ecx
    27 00000FF3 75F7                <1> 	jne	.10L
    28 00000FF5 89C3                <1> 	mov	ebx, eax
    29                              <1> .10E:
    30 00000FF7 89D8                <1> 	mov	eax, ebx	
    31                              <1> 
    32 00000FF9 5F                  <1> 	pop	edi
    33 00000FFA 5E                  <1> 	pop	esi
    34 00000FFB 59                  <1> 	pop	ecx
    35 00000FFC 5B                  <1> 	pop	ebx
    36                              <1> 
    37 00000FFD 89EC                <1> 	mov	esp, ebp
    38 00000FFF 5D                  <1> 	pop	ebp
    39                              <1> 
    40 00001000 C3                  <1> 	ret
   225                                  %include	"../modules/protect/acpi_package_value.s"
     1                              <1> acpi_package_value:
     2 00001001 55                  <1> 	push	ebp
     3 00001002 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00001004 56                  <1> 	push	esi
     6                              <1> 
     7 00001005 8B7508              <1> 	mov	esi, [ebp + 8]
     8                              <1> 
     9 00001008 46                  <1> 	inc	esi
    10 00001009 46                  <1> 	inc	esi
    11 0000100A 46                  <1> 	inc	esi
    12                              <1> 
    13                              <1> 	; see 343p
    14 0000100B 8A06                <1> 	mov	al, [esi]
    15 0000100D 3C0B                <1> 	cmp	al, 0x0B
    16 0000100F 740A                <1> 	je	.C0B
    17 00001011 3C0C                <1> 	cmp	al, 0x0C
    18 00001013 7406                <1> 	je	.C0C
    19 00001015 3C0E                <1> 	cmp	al, 0x0E
    20 00001017 7402                <1> 	je	.C0E
    21 00001019 EB08                <1> 	jmp	.C0A
    22                              <1> .C0B:
    23                              <1> .C0C:
    24                              <1> .C0E:
    25 0000101B 8A4601              <1> 	mov	al, [esi + 1]
    26 0000101E 8A6602              <1> 	mov	ah, [esi + 2]
    27 00001021 EB13                <1> 	jmp	.10E
    28                              <1> .C0A:
    29 00001023 3C0A                <1> 	cmp	al, 0x0A
    30 00001025 7504                <1> 	jne	.11E
    31 00001027 8A4601              <1> 	mov	al, [esi + 1]
    32 0000102A 46                  <1> 	inc	esi
    33                              <1> .11E:
    34 0000102B 46                  <1> 	inc	esi
    35                              <1> 
    36 0000102C 8A26                <1> 	mov	ah, [esi]
    37 0000102E 80FC0A              <1> 	cmp	ah, 0x0A
    38 00001031 7503                <1> 	jne	.12E
    39 00001033 8A6601              <1> 	mov	ah, [esi + 1]
    40                              <1> .12E:
    41                              <1> .10E:
    42 00001036 5E                  <1> 	pop	esi
    43                              <1> 
    44 00001037 89EC                <1> 	mov	esp, ebp
    45 00001039 5D                  <1> 	pop	ebp
    46                              <1> 
    47 0000103A C3                  <1> 	ret
    48                              <1> 	
    49                              <1> 
   226                                  %include	"../modules/protect/draw_num.s"
     1                              <1> draw_num:	; draw_num(num, x, y)
     2 0000103B 55                  <1> 	push	ebp
     3 0000103C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000103E 6A046A106A1068-     <1> 	cdecl	itoa, dword [ebp + 8], .t1, 16, 16, 0b0100
     5 00001045 [74100000]FF7508E8- <1>
     5 0000104D 9AF7FFFF6683C414    <1>
     6 00001055 68[72100000]68010F- <1> 	cdecl	draw_str, dword [ebp +12], dword [ebp +16], 0x0F01, .t0
     6 0000105D 0000FF7510FF750CE8- <1>
     6 00001066 F1F4FFFF6683C410    <1>
     7                              <1> 
     8 0000106E 89EC                <1> 	mov	esp, ebp
     9 00001070 5D                  <1> 	pop	ebp
    10                              <1> 	
    11 00001071 C3                  <1> 	ret
    12                              <1> 
    13 00001072 3078                <1> .t0:	db	"0x"
    14 00001074 2D2D2D2D2D2D2D2D2D- <1> .t1:	db	"----------------", 0
    14 0000107D 2D2D2D2D2D2D2D00    <1>
    15                              <1> 
    16                              <1> draw_num_pixel:	; draw_num_pixel(num, x, y)
    17 00001085 55                  <1> 	push	ebp
    18 00001086 89E5                <1> 	mov	ebp, esp
    19                              <1> 
    20 00001088 6A046A106A0168-     <1> 	cdecl	itoa, dword[ebp + 8], .t0, 1, 16, 0b0100
    20 0000108F [BC100000]FF7508E8- <1>
    20 00001097 50F7FFFF6683C414    <1>
    21 0000109F 68[BC100000]68010F- <1> 	cdecl	draw_str, dword[ebp +12], dword[ebp +16], 0x0F01, .t0
    21 000010A7 0000FF7510FF750CE8- <1>
    21 000010B0 A7F4FFFF6683C410    <1>
    22                              <1> 
    23 000010B8 89EC                <1> 	mov	esp, ebp
    24 000010BA 5D                  <1> 	pop	ebp
    25                              <1> 
    26 000010BB C3                  <1> 	ret
    27                              <1> 
    28 000010BC 2D00                <1> .t0:	db	"-", 0
   227                                  %include	"../modules/protect/panic_handler.s"
     1                              <1> panic_handler : 
     2 000010BE CDFF                <1> 	int	0xFF
     3 000010C0 C3                  <1> 	ret
     4                              <1> 
     5                              <1> panic:
     6 000010C1 60                  <1> 	pusha
     7 000010C2 1E                  <1> 	push	ds
     8 000010C3 06                  <1> 	push	es
     9                              <1> 
    10 000010C4 66B81000            <1> 	mov	ax, 0x0010
    11 000010C8 8ED8                <1> 	mov	ds, ax
    12 000010CA 8EC0                <1> 	mov	es, ax
    13                              <1> 
    14 000010CC 68[FA100000]6A0C6A- <1> 	cdecl	draw_str, 25, 10, 0x000c, .t0
    14 000010D4 0A6A19E87FF4FFFF66- <1>
    14 000010DD 83C410              <1>
    15 000010E0 68[231D0000]6A0C6A- <1> 	cdecl	draw_str, 25, 11, 0x000c, panic_message
    15 000010E8 0B6A19E86BF4FFFF66- <1>
    15 000010F1 83C410              <1>
    16                              <1> 
    17 000010F4 07                  <1> 	pop	es
    18 000010F5 1F                  <1> 	pop	ds
    19                              <1> 
    20 000010F6 61                  <1> 	popa
    21                              <1> 
    22 000010F7 EBFE                <1> 	jmp	$
    23                              <1> 
    24 000010F9 CF                  <1> 	iret
    25                              <1> 
    26 000010FA 525553542050616E69- <1> .t0:	db	"RUST Panic!!",0
    26 00001103 63212100            <1>
    27                              <1> 
    28                              <1> 
   228                                  ;%include	"../modules/protect/int_pf.s"
   229                                  %include	"modules/paging.s"
     1                              <1> page_set_4m:
     2 00001107 55                  <1> 	push	ebp
     3 00001108 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 0000110A 60                  <1> 	pusha
     6                              <1> 
     7 0000110B FC                  <1> 	cld
     8 0000110C 8B7D08              <1> 	mov	edi, [ebp + 8]
     9 0000110F B800000000          <1> 	mov	eax, 0x00000000		; null page directory
    10 00001114 B900040000          <1> 	mov	ecx, 1024		; 1024 directories
    11 00001119 F3AB                <1> 	rep	stosd
    12                              <1> 
    13 0000111B 89F8                <1> 	mov	eax, edi		; we use memory after page directory
    14 0000111D 2500F0FFFF          <1> 	and	eax, ~0x0000_0FFF
    15 00001122 83C807              <1> 	or	eax, 0b0000_0111	; enable read write
    16                              <1> 
    17 00001125 898700F0FFFF        <1> 	mov	[edi - (1024 * 4)], eax
    18                              <1> 	
    19 0000112B B807000000          <1> 	mov	eax, 0x0000_0007
    20 00001130 B900040000          <1> 	mov	ecx, 1024		; 1024 pages
    21                              <1> .10L:
    22 00001135 AB                  <1> 	stosd
    23 00001136 0500100000          <1> 	add	eax, 0x0000_1000
    24 0000113B E2F8                <1> 	loop	.10L
    25                              <1> 
    26 0000113D 61                  <1> 	popa
    27                              <1> 
    28 0000113E 89EC                <1> 	mov	esp, ebp
    29 00001140 5D                  <1> 	pop	ebp
    30                              <1> 
    31 00001141 C3                  <1> 	ret
    32                              <1> 
    33 00001142 2D2D2D2D2D2D2D2D2D- <1> .t0:	db	"----------------", 0
    33 0000114B 2D2D2D2D2D2D2D00    <1>
    34                              <1> 
    35                              <1> init_page:
    36 00001153 60                  <1> 	pusha
    37 00001154 6800501000E8A9FFFF- <1> 	cdecl	page_set_4m, CR3_BASE
    37 0000115D FF6683C404          <1>
    38 00001162 6800002000E89BFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_4
    38 0000116B FF6683C404          <1>
    39 00001170 6800202000E88DFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_5
    39 00001179 FF6683C404          <1>
    40 0000117E 6800402000E87FFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_6
    40 00001187 FF6683C404          <1>
    41 0000118C C7051C641000000000- <1> 	mov [CR3_BASE + 0x1000 + 0x107 * 4], dword 0
    41 00001195 00                  <1>
    42 00001196 C7051C142000078010- <1> 	mov [CR3_TASK_4 + 0x1000 + 0x107 * 4], dword PARAM_TASK_4 + 7
    42 0000119F 00                  <1>
    43 000011A0 C7051C342000079010- <1> 	mov [CR3_TASK_5 + 0x1000 + 0x107 * 4], dword PARAM_TASK_5 + 7
    43 000011A9 00                  <1>
    44 000011AA C7051C54200007A010- <1> 	mov [CR3_TASK_6 + 0x1000 + 0x107 * 4], dword PARAM_TASK_6 + 7
    44 000011B3 00                  <1>
    45                              <1> 
    46 000011B4 6A4068[D41B0000]68- <1> 	cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size
    46 000011BC 00801000E87EF2FFFF- <1>
    46 000011C5 6683C40C            <1>
    47 000011C9 6A4068[141C0000]68- <1> 	cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size
    47 000011D1 00901000E869F2FFFF- <1>
    47 000011DA 6683C40C            <1>
    48 000011DE 6A4068[541C0000]68- <1> 	cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size
    48 000011E6 00A01000E854F2FFFF- <1>
    48 000011EF 6683C40C            <1>
    49                              <1> 
    50                              <1> 	; [0x00000000] = 0x0
    51 000011F3 61                  <1> 	popa
    52                              <1> 
    53 000011F4 C3                  <1> 	ret
    54                              <1> 
   230                                  %include	"modules/int_pf.s"
     1                              <1> int_pf:
     2 000011F5 55                  <1> 	push	ebp
     3 000011F6 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 000011F8 60                  <1> 	pusha
     6 000011F9 06                  <1> 	push	es
     7 000011FA 1E                  <1> 	push	ds
     8                              <1> 
     9                              <1> 	; mov	ax, DS_KERNEL
    10                              <1> 	; mov	es, ax
    11                              <1> 	; mov	ds, ax
    12                              <1> 
    13 000011FB 0F20D0              <1> 	mov	eax, cr2	; interrupt address
    14 000011FE 2500F0FFFF          <1> 	and	eax, ~0x0FFF
    15 00001203 3D00701000          <1> 	cmp	eax, 0x0010_7000
    16 00001208 7521                <1> 	jne	.10F
    17                              <1> 	
    18 0000120A C7051C641000077010- <1> 	mov	[0x00106000 + 0x107 * 4], dword 0x0010_7007
    18 00001213 00                  <1>
    19                              <1> 	; 0x00107007 means 0x00107000 can use as read and write
    20 00001214 6A4068[941B0000]68- <1> 	cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    20 0000121C 00701000E81EF2FFFF- <1>
    20 00001225 6683C40C            <1>
    21                              <1> 
    22 00001229 EB15                <1> 	jmp	.10E
    23                              <1> .10F:
    24 0000122B 83C404              <1> 	add	esp, 4
    25 0000122E 83C404              <1> 	add	esp, 4
    26 00001231 61                  <1> 	popa
    27 00001232 5D                  <1> 	pop	ebp
    28                              <1> 
    29 00001233 9C                  <1> 	pushf
    30 00001234 0E                  <1> 	push	cs
    31 00001235 68[94090000]        <1> 	push	int_stop
    32                              <1> 
    33 0000123A B8[4A120000]        <1> 	mov	eax, .s0
    34 0000123F CF                  <1> 	iret			; kernel stop
    35                              <1> .10E:
    36 00001240 1F                  <1> 	pop	ds
    37 00001241 07                  <1> 	pop	es
    38 00001242 61                  <1> 	popa
    39                              <1> 
    40 00001243 89EC                <1> 	mov	esp, ebp
    41 00001245 5D                  <1> 	pop	ebp
    42                              <1> 	
    43 00001246 83C404              <1> 	add	esp, 4	; error code clear
    44 00001249 CF                  <1> 	iret
    45                              <1> 	
    46 0000124A 203C20504147452046- <1> .s0	db	" < PAGE FAULT > ", 0
    46 00001253 41554C54203E2000    <1>
    47                              <1> 
   231                                  ;%include	"../modules/protect/int_timer.s"
   232                                  %include	"modules/my_int_timer.s"
     1                              <1> int_timer:
     2 0000125B 60                  <1> 	pushad
     3 0000125C 06                  <1> 	push	es
     4 0000125D 1E                  <1> 	push	ds
     5                              <1> 
     6 0000125E 66B81000            <1> 	mov	ax, 0x10
     7 00001262 8ED8                <1> 	mov	ds, ax
     8 00001264 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00001266 FF05[74120000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 0000126C B020                <2>  mov al, %2
    12 0000126E E620                <2>  out %1, al
    13                              <1> 
    14                              <1> 	
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_0
    17                              <1> 	;je	.11L
    18                              <1> 	;cmp	ax, SS_TASK_1
    19                              <1> 	;je	.12L
    20                              <1> 	;cmp	ax, SS_TASK_2
    21                              <1> 	;je	.13L
    22                              <1> 	;cmp	ax, SS_TASK_3
    23                              <1> 	;je	.14L
    24                              <1> 	;cmp	ax, SS_TASK_4
    25                              <1> 	;je	.15L
    26                              <1> 	;cmp	ax, SS_TASK_5
    27                              <1> 	;je	.16L
    28                              <1> ;
    29                              <1> ;	jmp	SS_TASK_0:0
    30                              <1> ;	jmp	.10E
    31                              <1> ;.11L:
    32                              <1> ;	jmp	SS_TASK_1:0
    33                              <1> ;	jmp	.10E
    34                              <1> ;.12L:
    35                              <1> ;	jmp	SS_TASK_2:0
    36                              <1> ;	jmp	.10E
    37                              <1> ;.13L:
    38                              <1> ;	jmp	SS_TASK_3:0
    39                              <1> ;	jmp	.10E
    40                              <1> ;.14L:
    41                              <1> ;	jmp	SS_TASK_4:0
    42                              <1> ;	jmp	.10E
    43                              <1> ;.15L:
    44                              <1> ;	jmp	SS_TASK_5:0
    45                              <1> ;	jmp	.10E
    46                              <1> ;.16L:
    47                              <1> ;	jmp	SS_TASK_6:0
    48                              <1> ;	jmp	.10E
    49                              <1> ;.10E:
    50                              <1> ;
    51 00001270 1F                  <1> 	pop	ds
    52 00001271 07                  <1> 	pop	es
    53 00001272 61                  <1> 	popad
    54                              <1> 	
    55 00001273 CF                  <1> 	iret
    56                              <1> 
    57                              <1> ALIGN	4,	db	0
    58 00001274 0000000000000000    <1> TIMER_COUNT:	dq	0
    59                              <1> 
    60                              <1> 
    61                              <1> int_en_timer:
    62 0000127C 55                  <1> 	push	ebp
    63 0000127D 89E5                <1> 	mov	ebp, esp
    64                              <1> 	
    65 0000127F 50                  <1> 	push	eax
    66                              <1> 
    67                              <1> 	outp	0x43, 0b00_11_010_0
    67 00001280 B034                <2>  mov al, %2
    67 00001282 E643                <2>  out %1, al
    68                              <1> 	; counter 0
    69                              <1> 	; access mode, bottom -> top
    70                              <1> 	; mode, 2
    71                              <1> 	; bcd
    72                              <1> 
    73                              <1> 	outp	0x40, 0x9C
    73 00001284 B09C                <2>  mov al, %2
    73 00001286 E640                <2>  out %1, al
    74                              <1> 	outp	0x40, 0x2E
    74 00001288 B02E                <2>  mov al, %2
    74 0000128A E640                <2>  out %1, al
    75                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    76                              <1> 
    77 0000128C 58                  <1> 	pop	eax
    78                              <1> 
    79 0000128D 89EC                <1> 	mov 	esp, ebp
    80 0000128F 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00001290 C3                  <1> 	ret
    83                              <1> 
    84                              <1> 
   233                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00001291 55                  <1> 	push	ebp
     3 00001292 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00001294 50                  <1> 	push	eax
     6                              <1> 
     7 00001295 A1[74120000]        <1> 	mov	eax, [TIMER_COUNT]
     8 0000129A C1E808              <1> 	shr	eax, 8
     9 0000129D 3B05[C8120000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 000012A3 741E                <1> 	je	.10E
    11                              <1> 
    12 000012A5 A3[C8120000]        <1> 	mov	[.index], eax
    13 000012AA 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 000012AD 8A80[CC120000]      <1> 	mov	al, [.table + eax]
    16 000012B3 506A0F6A1D6A00E89D- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 000012BC F1FFFF6683C410      <1>
    17                              <1> .10E:
    18 000012C3 58                  <1> 	pop	eax
    19                              <1> 
    20 000012C4 89EC                <1> 	mov	esp, ebp
    21 000012C6 5D                  <1> 	pop	ebp
    22                              <1> 
    23 000012C7 C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 000012C8 00000000            <1> .index:		dd	0
    27 000012CC 7C2F2D5C            <1> .table:		dd	"|/-\"
   234                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 000012D0 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 000012D8 FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 000012E0 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 000012E8 FFFF000000FACF00    <1> .cs_task_1:	dq	0x00CF_FA00_0000_FFFF
     6 000012F0 FFFF000000F2CF00    <1> .ds_task_1:	dq	0x00CF_F200_0000_FFFF
     7 000012F8 FFFF000000FACF00    <1> .cs_task_2:	dq	0x00CF_FA00_0000_FFFF
     8 00001300 FFFF000000F2CF00    <1> .ds_task_2:	dq	0x00CF_F200_0000_FFFF
     9 00001308 FFFF000000FACF00    <1> .cs_task_3:	dq	0x00CF_FA00_0000_FFFF
    10 00001310 FFFF000000F2CF00    <1> .ds_task_3:	dq	0x00CF_F200_0000_FFFF
    11 00001318 FFFF000000F2CF00    <1> .ds_task_4:	dq	0x00CF_F200_0000_FFFF
    12 00001320 FFFF000000F2CF00    <1> .ds_task_5:	dq	0x00CF_F200_0000_FFFF
    13 00001328 FFFF000000F2CF00    <1> .ds_task_6:	dq	0x00CF_F200_0000_FFFF
    14                              <1> .end:
    15                              <1> 
    16                              <1> ; ldt indexes
    17                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    18                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    19                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4 | 3	; offset | (use LDT bit) | (level = 3)
    20                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4 | 3	
    21                              <1> CS_TASK_2:	equ	(.cs_task_2 - LDT) | 4 | 3
    22                              <1> DS_TASK_2:	equ	(.ds_task_2 - LDT) | 4 | 3	
    23                              <1> CS_TASK_3:	equ	(.cs_task_3 - LDT) | 4 | 3
    24                              <1> DS_TASK_3:	equ	(.ds_task_3 - LDT) | 4 | 3
    25                              <1> DS_TASK_4:	equ	(.ds_task_4 - LDT) | 4 | 3
    26                              <1> DS_TASK_5:	equ	(.ds_task_5 - LDT) | 4 | 3
    27                              <1> DS_TASK_6:	equ	(.ds_task_6 - LDT) | 4 | 3
    28                              <1> 
    29                              <1> LDT_LIMIT	equ	.end - LDT - 1
    30                              <1> 
    31                              <1> 
    32 00001330 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    33 00001338 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    34 00001340 FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    35 00001348 FFFF0000009A0F00    <1> .cs_bit16:	dq	0x000F_9A00_0000_FFFF
    36 00001350 FFFF000000920F00    <1> .ds_bit16:	dq	0x000F_9200_0000_FFFF
    37 00001358 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    38 00001360 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    39 00001368 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    40 00001370 6700000000890000    <1> .tss_2:		dq	0x0000_8900_0000_0067
    41 00001378 6700000000890000    <1> .tss_3:		dq	0x0000_8900_0000_0067
    42 00001380 6700000000890000    <1> .tss_4:		dq	0x0000_8900_0000_0067
    43 00001388 6700000000890000    <1> .tss_5:		dq	0x0000_8900_0000_0067
    44 00001390 6700000000890000    <1> .tss_6:		dq	0x0000_8900_0000_0067
    45 00001398 0000080004EC0000    <1> .call_gate:	dq	0x0000_EC04_0008_0000
    46                              <1> .end:
    47                              <1> 
    48                              <1> ; gdt indexes
    49                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    50                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    51                              <1> SS_LDT		equ	.ldt - GDT
    52                              <1> SS_TASK_0	equ	.tss_0 - GDT		; jump point
    53                              <1> SS_TASK_1	equ	.tss_1 - GDT
    54                              <1> SS_TASK_2	equ	.tss_2 - GDT
    55                              <1> SS_TASK_3	equ	.tss_3 - GDT
    56                              <1> SS_TASK_4	equ	.tss_4 - GDT
    57                              <1> SS_TASK_5	equ	.tss_5 - GDT
    58                              <1> SS_TASK_6	equ	.tss_6 - GDT
    59                              <1> SS_GATE_0	equ	.call_gate - GDT
    60                              <1> 
    61 000013A0 6F00                <1> GDTR:		dw	GDT.end - GDT - 1
    62 000013A2 [30130000]          <1> 		dd	GDT
    63                              <1> 
    64                              <1> TSS_0:
    65 000013A6 00000000            <1> .link:    dd 0
    66 000013AA 00321000            <1> .esp0:    dd SP_TASK_0 - STACK_SIZE / 2
    67 000013AE 10000000            <1> .ss0:     dd DS_KERNEL
    68 000013B2 00000000            <1> .esp1:    dd 0
    69 000013B6 00000000            <1> .ss1:     dd 0
    70 000013BA 00000000            <1> .esp2:    dd 0
    71 000013BE 00000000            <1> .ss2:     dd 0
    72 000013C2 00501000            <1> .cr3:     dd CR3_BASE
    73 000013C6 00000000            <1> .eip:     dd 0
    74 000013CA 00000000            <1> .eflags:  dd 0
    75 000013CE 00000000            <1> .eax:     dd 0
    76 000013D2 00000000            <1> .ecx:     dd 0
    77 000013D6 00000000            <1> .edx:     dd 0
    78 000013DA 00000000            <1> .ebx:     dd 0
    79 000013DE 00000000            <1> .esp:     dd 0
    80 000013E2 00000000            <1> .ebp:     dd 0
    81 000013E6 00000000            <1> .esi:     dd 0
    82 000013EA 00000000            <1> .edi:     dd 0
    83 000013EE 00000000            <1> .es:      dd 0
    84 000013F2 00000000            <1> .cs:      dd 0
    85 000013F6 00000000            <1> .ss:      dd 0
    86 000013FA 00000000            <1> .ds:      dd 0
    87 000013FE 00000000            <1> .fs:      dd 0
    88 00001402 00000000            <1> .gs:      dd 0
    89 00001406 00000000            <1> .ldt:     dd 0
    90 0000140A 00000000            <1> .io:      dd 0
    91 0000140E 00<rept>            <1> .fp_save: times 108 + 4 db 0
    92                              <1> 
    93                              <1> TSS_1:
    94 0000147E 00000000            <1> .link:    dd 0
    95 00001482 00361000            <1> .esp0:    dd SP_TASK_1 - STACK_SIZE / 2
    96 00001486 10000000            <1> .ss0:     dd DS_KERNEL
    97 0000148A 00000000            <1> .esp1:    dd 0
    98 0000148E 00000000            <1> .ss1:     dd 0
    99 00001492 00000000            <1> .esp2:    dd 0
   100 00001496 00000000            <1> .ss2:     dd 0
   101 0000149A 00501000            <1> .cr3:     dd CR3_BASE
   102 0000149E [8E190000]          <1> .eip:     dd task_1	; start at task_1
   103 000014A2 02020000            <1> .eflags:  dd 0x0202
   104 000014A6 00000000            <1> .eax:     dd 0
   105 000014AA 00000000            <1> .ecx:     dd 0
   106 000014AE 00000000            <1> .edx:     dd 0
   107 000014B2 00000000            <1> .ebx:     dd 0
   108 000014B6 00381000            <1> .esp:     dd SP_TASK_1
   109 000014BA 00000000            <1> .ebp:     dd 0
   110 000014BE 00000000            <1> .esi:     dd 0
   111 000014C2 00000000            <1> .edi:     dd 0
   112 000014C6 27000000            <1> .es:      dd DS_TASK_1
   113 000014CA 1F000000            <1> .cs:      dd CS_TASK_1
   114 000014CE 27000000            <1> .ss:      dd DS_TASK_1
   115 000014D2 27000000            <1> .ds:      dd DS_TASK_1
   116 000014D6 27000000            <1> .fs:      dd DS_TASK_1
   117 000014DA 27000000            <1> .gs:      dd DS_TASK_1
   118 000014DE 28000000            <1> .ldt:     dd SS_LDT
   119 000014E2 00000000            <1> .io:      dd 0
   120 000014E6 00<rept>            <1> .fp_save: times 108 + 4 db 0
   121                              <1> 
   122                              <1> TSS_2:
   123 00001556 00000000            <1> .link:    dd 0
   124 0000155A 003A1000            <1> .esp0:    dd SP_TASK_2 - STACK_SIZE / 2
   125 0000155E 10000000            <1> .ss0:     dd DS_KERNEL
   126 00001562 00000000            <1> .esp1:    dd 0
   127 00001566 00000000            <1> .ss1:	    dd 0
   128 0000156A 00000000            <1> .esp2:    dd 0
   129 0000156E 00000000            <1> .ss2:     dd 0
   130 00001572 00501000            <1> .cr3:     dd CR3_BASE
   131 00001576 [C3190000]          <1> .eip:     dd task_2	; start at task_2
   132 0000157A 02020000            <1> .eflags:  dd 0x0202
   133 0000157E 00000000            <1> .eax:     dd 0
   134 00001582 00000000            <1> .ecx:     dd 0
   135 00001586 00000000            <1> .edx:     dd 0
   136 0000158A 00000000            <1> .ebx:			dd 0
   137 0000158E 003C1000            <1> .esp:			dd SP_TASK_2
   138 00001592 00000000            <1> .ebp:			dd 0
   139 00001596 00000000            <1> .esi:			dd 0
   140 0000159A 00000000            <1> .edi:			dd 0
   141 0000159E 37000000            <1> .es:			dd DS_TASK_2
   142 000015A2 2F000000            <1> .cs:			dd CS_TASK_2
   143 000015A6 37000000            <1> .ss:			dd DS_TASK_2
   144 000015AA 37000000            <1> .ds:			dd DS_TASK_2
   145 000015AE 37000000            <1> .fs:			dd DS_TASK_2
   146 000015B2 37000000            <1> .gs:			dd DS_TASK_2
   147 000015B6 28000000            <1> .ldt:			dd SS_LDT
   148 000015BA 00000000            <1> .io:			dd 0
   149 000015BE 00<rept>            <1> .fp_save: times 108 + 4 db 0
   150                              <1> 
   151                              <1> TSS_3:
   152 0000162E 00000000            <1> .link:    dd 0
   153 00001632 003E1000            <1> .esp0:    dd SP_TASK_3 - 512
   154 00001636 10000000            <1> .ss0:     dd DS_KERNEL
   155 0000163A 00000000            <1> .esp1:    dd 0
   156 0000163E 00000000            <1> .ss1:     dd 0
   157 00001642 00000000            <1> .esp2:    dd 0
   158 00001646 00000000            <1> .ss2:     dd 0
   159 0000164A 00501000            <1> .cr3:     dd CR3_BASE
   160 0000164E [941A0000]          <1> .eip:     dd task_3
   161 00001652 02020000            <1> .eflags:  dd 0x0202
   162 00001656 00000000            <1> .eax:     dd 0
   163 0000165A 00000000            <1> .ecx:     dd 0
   164 0000165E 00000000            <1> .edx:     dd 0
   165 00001662 00000000            <1> .ebx:     dd 0
   166 00001666 00401000            <1> .esp:     dd SP_TASK_3
   167 0000166A 00000000            <1> .ebp:     dd 0
   168 0000166E 00000000            <1> .esi:     dd 0
   169 00001672 00000000            <1> .edi:     dd 0
   170 00001676 47000000            <1> .es:      dd DS_TASK_3
   171 0000167A 3F000000            <1> .cs:      dd CS_TASK_3
   172 0000167E 47000000            <1> .ss:      dd DS_TASK_3
   173 00001682 47000000            <1> .ds:      dd DS_TASK_3
   174 00001686 47000000            <1> .fs:      dd DS_TASK_3
   175 0000168A 47000000            <1> .gs:      dd DS_TASK_3
   176 0000168E 28000000            <1> .ldt:     dd SS_LDT
   177 00001692 00000000            <1> .io:      dd 0
   178 00001696 00<rept>            <1> .fp_save: times 108 + 4 db 0
   179                              <1> 
   180                              <1> TSS_4:
   181 00001706 00000000            <1> .link:    dd 0
   182 0000170A 00421000            <1> .esp0:    dd SP_TASK_4 - 512
   183 0000170E 10000000            <1> .ss0:     dd DS_KERNEL
   184 00001712 00000000            <1> .esp1:    dd 0
   185 00001716 00000000            <1> .ss1:     dd 0
   186 0000171A 00000000            <1> .esp2:    dd 0
   187 0000171E 00000000            <1> .ss2:     dd 0
   188 00001722 00002000            <1> .cr3:     dd CR3_TASK_4
   189 00001726 [941A0000]          <1> .eip:     dd task_3
   190 0000172A 02020000            <1> .eflags:  dd 0x0202
   191 0000172E 00000000            <1> .eax:     dd 0
   192 00001732 00000000            <1> .ecx:     dd 0
   193 00001736 00000000            <1> .edx:     dd 0
   194 0000173A 00000000            <1> .ebx:     dd 0
   195 0000173E 00441000            <1> .esp:     dd SP_TASK_4
   196 00001742 00000000            <1> .ebp:     dd 0
   197 00001746 00000000            <1> .esi:     dd 0
   198 0000174A 00000000            <1> .edi:     dd 0
   199 0000174E 4F000000            <1> .es:      dd DS_TASK_4
   200 00001752 3F000000            <1> .cs:      dd CS_TASK_3
   201 00001756 4F000000            <1> .ss:      dd DS_TASK_4
   202 0000175A 4F000000            <1> .ds:      dd DS_TASK_4
   203 0000175E 4F000000            <1> .fs:      dd DS_TASK_4
   204 00001762 4F000000            <1> .gs:      dd DS_TASK_4
   205 00001766 28000000            <1> .ldt:     dd SS_LDT
   206 0000176A 00000000            <1> .io:      dd 0
   207 0000176E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   208                              <1> 
   209                              <1> TSS_5:
   210 000017DE 00000000            <1> .link:    dd 0
   211 000017E2 00461000            <1> .esp0:    dd SP_TASK_5 - 512
   212 000017E6 10000000            <1> .ss0:     dd DS_KERNEL
   213 000017EA 00000000            <1> .esp1:    dd 0
   214 000017EE 00000000            <1> .ss1:     dd 0
   215 000017F2 00000000            <1> .esp2:    dd 0
   216 000017F6 00000000            <1> .ss2:     dd 0
   217 000017FA 00202000            <1> .cr3:     dd CR3_TASK_5
   218 000017FE [941A0000]          <1> .eip:     dd task_3
   219 00001802 02020000            <1> .eflags:  dd 0x0202
   220 00001806 00000000            <1> .eax:     dd 0
   221 0000180A 00000000            <1> .ecx:     dd 0
   222 0000180E 00000000            <1> .edx:     dd 0
   223 00001812 00000000            <1> .ebx:     dd 0
   224 00001816 00481000            <1> .esp:     dd SP_TASK_5
   225 0000181A 00000000            <1> .ebp:     dd 0
   226 0000181E 00000000            <1> .esi:     dd 0
   227 00001822 00000000            <1> .edi:     dd 0
   228 00001826 57000000            <1> .es:      dd DS_TASK_5
   229 0000182A 3F000000            <1> .cs:      dd CS_TASK_3
   230 0000182E 57000000            <1> .ss:      dd DS_TASK_5
   231 00001832 57000000            <1> .ds:      dd DS_TASK_5
   232 00001836 57000000            <1> .fs:      dd DS_TASK_5
   233 0000183A 57000000            <1> .gs:      dd DS_TASK_5
   234 0000183E 28000000            <1> .ldt:     dd SS_LDT
   235 00001842 00000000            <1> .io:      dd 0
   236 00001846 00<rept>            <1> .fp_save: times 108 + 4 db 0
   237                              <1> 
   238                              <1> TSS_6:
   239 000018B6 00000000            <1> .link:    dd 0
   240 000018BA 004A1000            <1> .esp0:    dd SP_TASK_6 - 512
   241 000018BE 10000000            <1> .ss0:     dd DS_KERNEL
   242 000018C2 00000000            <1> .esp1:    dd 0
   243 000018C6 00000000            <1> .ss1:     dd 0
   244 000018CA 00000000            <1> .esp2:    dd 0
   245 000018CE 00000000            <1> .ss2:     dd 0
   246 000018D2 00402000            <1> .cr3:     dd CR3_TASK_6
   247 000018D6 [941A0000]          <1> .eip:     dd task_3
   248 000018DA 02020000            <1> .eflags:  dd 0x0202
   249 000018DE 00000000            <1> .eax:     dd 0
   250 000018E2 00000000            <1> .ecx:     dd 0
   251 000018E6 00000000            <1> .edx:     dd 0
   252 000018EA 00000000            <1> .ebx:     dd 0
   253 000018EE 004C1000            <1> .esp:     dd SP_TASK_6
   254 000018F2 00000000            <1> .ebp:     dd 0
   255 000018F6 00000000            <1> .esi:     dd 0
   256 000018FA 00000000            <1> .edi:     dd 0
   257 000018FE 5F000000            <1> .es:      dd DS_TASK_6
   258 00001902 3F000000            <1> .cs:      dd CS_TASK_3
   259 00001906 5F000000            <1> .ss:      dd DS_TASK_6
   260 0000190A 5F000000            <1> .ds:      dd DS_TASK_6
   261 0000190E 5F000000            <1> .fs:      dd DS_TASK_6
   262 00001912 5F000000            <1> .gs:      dd DS_TASK_6
   263 00001916 28000000            <1> .ldt:     dd SS_LDT
   264 0000191A 00000000            <1> .io:      dd 0
   265 0000191E 00<rept>            <1> .fp_save:	times 108 + 4 db 0
   266                              <1> 
   235                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 0000198E 68[BC190000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 00001996 006A3FE8BDEBFFFF66- <1>
     2 0000199F 83C410              <1>
     3                              <1> 	; cdecl	itoa, esp, .t0, 8, 16, 0b0100
     4                              <1> 	; cdecl	draw_str, 0, 2, 0x010F, .s0
     5                              <1> 	;mov	[ESP_COUNTER], esp
     6                              <1> 	; task_1 dose not have level 0
     7                              <1> 	; cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
     8                              <1> .10L:
     9                              <1> 	;cdecl	itoa, esp, .t0, 8, 16, 0b0100	
    10                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .t0
    11                              <1> 	;mov	[ESP_COUNTER], esp
    12                              <1> 	
    13                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
    14                              <1> 	
    15 000019A2 A1[74030000]        <1> 	mov	eax, [RTC_TIME]
    16 000019A7 5068000700006A006A- <1> 	cdecl	draw_time, 72, 0, 0x0700, eax
    16 000019B0 48E8C0EEFFFF6683C4- <1>
    16 000019B9 10                  <1>
    17                              <1> 
    18                              <1> 	; jmp	SS_TASK_0:0	
    19                              <1> 
    20 000019BA EBE6                <1> 	jmp	.10L
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24 000019BC 5461736B2D3100      <1> .s0	db	"Task-1", 0
   236                                  %include	"task/task_2.s"
     1                              <1> task_2:
     2 000019C3 68[861A0000]6A076A- <1> 	cdecl	draw_str, 63, 1, 0x07, .s0
     2 000019CB 016A3FE888EBFFFF66- <1>
     2 000019D4 83C410              <1>
     3                              <1> 	
     4 000019D7 DB05[741A0000]      <1> 	fild	dword [.c1000]
     5 000019DD D9EB                <1> 	fldpi
     6 000019DF DA35[781A0000]      <1> 	fidiv	dword [.c180]
     7 000019E5 D9EB                <1> 	fldpi
     8 000019E7 DCC0                <1> 	fadd	st0, st0
     9 000019E9 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 000019EB D8C2                <1> 	fadd	st0, st2
    14 000019ED D9F8                <1> 	fprem
    15 000019EF D9C0                <1> 	fld	st0	; copy st0
    16 000019F1 D9FE                <1> 	fsin
    17 000019F3 D8CC                <1> 	fmul	st0, st4
    18 000019F5 DF35[7C1A0000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 000019FB A1[7C1A0000]        <1> 	mov	eax, [.bcd]
    21 00001A00 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 00001A02 250F0F0000          <1> 	and	eax, 0x0F0F
    24 00001A07 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 00001A0C C1EB04              <1> 	shr	ebx, 4
    27 00001A0F 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 00001A15 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 00001A1B 883D[8E1A0000]      <1> 	mov	[.s2 + 0], bh
    31 00001A21 8825[901A0000]      <1> 	mov	[.s3 + 0], ah
    32 00001A27 881D[911A0000]      <1> 	mov	[.s3 + 1], bl
    33 00001A2D A2[921A0000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 00001A32 B807000000          <1> 	mov	eax, 7		; sign bit
    36 00001A37 0FA305[851A0000]    <1> 	bt	[.bcd + 9], eax
    37 00001A3E 7209                <1> 	jc	.10F
    38                              <1> 	
    39 00001A40 C605[8D1A0000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 00001A47 EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 00001A49 C605[8D1A0000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 00001A50 68[8D1A0000]6A076A- <1> 	cdecl	draw_str, 72, 1, 0x07, .s1
    44 00001A58 016A48E8FBEAFFFF66- <1>
    44 00001A61 83C410              <1>
    45                              <1> 	
    46 00001A64 6A0AE8F5F2FFFF6683- <1> 	cdecl	wait_tick, 10
    46 00001A6D C404                <1>
    47                              <1> 
    48 00001A6F E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 00001A74 E8030000            <1> .c1000	dd	1000
    53 00001A78 B4000000            <1> .c180	dd	180
    54 00001A7C 00<rept>            <1> .bcd:	times	10	db	0x00
    55 00001A86 5461736B2D3200      <1> .s0	db	"Task-2", 0
    56 00001A8D 2D                  <1> .s1:	db	"-"
    57 00001A8E 302E                <1> .s2:	db	"0."
    58 00001A90 30303000            <1> .s3:	db	"000", 0
   237                                  %include	"task/task_3.s"
     1                              <1> task_3:
     2                              <1> 	; push	ebp
     3 00001A94 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00001A96 6A00                <1> 	push	dword 0	; origin x
     6 00001A98 6A00                <1> 	push	dword 0	; origin y
     7 00001A9A 6A00                <1> 	push	dword 0	; 
     8 00001A9C 6A00                <1> 	push	dword 0
     9 00001A9E 6A00                <1> 	push	dword 0
    10                              <1> 
    11                              <1> 
    12 00001AA0 BE00701000          <1> 	mov	esi, 0x0010_7000
    13                              <1> 
    14 00001AA5 8B06                <1> 	mov	eax, [esi + rose.x0]
    15 00001AA7 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    16                              <1> 
    17 00001AAA C1E803              <1> 	shr	eax, 3		; eax is x
    18 00001AAD C1EB04              <1> 	shr	ebx, 4		; ebx is y
    19 00001AB0 4B                  <1> 	dec	ebx
    20 00001AB1 8B4E24              <1> 	mov	ecx, [esi + rose.color_s]
    21 00001AB4 8D5630              <1> 	lea	edx, [esi + rose.title]
    22                              <1> 
    23 00001AB7 52515350E89BEAFFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx	; draw title
    23 00001AC0 6683C410            <1>
    24                              <1> 
    25 00001AC4 8B06                <1> 	mov	eax, [esi + rose.x0]
    26 00001AC6 8B5E08              <1> 	mov	ebx, [esi + rose.x1]
    27 00001AC9 29C3                <1> 	sub	ebx, eax
    28 00001ACB D1EB                <1> 	shr	ebx, 1			; half of size
    29 00001ACD 01C3                <1> 	add	ebx, eax		; origin x
    30 00001ACF 895DFC              <1> 	mov	[ebp - 4], ebx
    31                              <1> 
    32 00001AD2 8B4604              <1> 	mov	eax, [esi + rose.y0]
    33 00001AD5 8B5E0C              <1> 	mov	ebx, [esi + rose.y1]
    34 00001AD8 29C3                <1> 	sub	ebx, eax
    35 00001ADA D1EB                <1> 	shr	ebx, 1
    36 00001ADC 01C3                <1> 	add	ebx, eax
    37 00001ADE 895DF8              <1> 	mov	[ebp - 8], ebx
    38                              <1> 
    39 00001AE1 8B06                <1> 	mov	eax, [esi + rose.x0]	; x start
    40 00001AE3 8B5DF8              <1> 	mov	ebx, [ebp - 8]		; y
    41 00001AE6 8B4E08              <1> 	mov	ecx, [esi + rose.x1]	; x end
    42                              <1> 
    43 00001AE9 FF761853515350E8DF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; x axis
    43 00001AF2 EBFFFF6683C414      <1>
    44                              <1> 
    45 00001AF9 8B4604              <1> 	mov	eax, [esi + rose.y0]	; y start
    46 00001AFC 8B5DFC              <1> 	mov	ebx, [ebp - 4]		; x
    47 00001AFF 8B4E0C              <1> 	mov	ecx, [esi + rose.y1]	; y end
    48                              <1> 
    49 00001B02 FF761C51535053E8C6- <1> 	cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
    49 00001B0B EBFFFF6683C414      <1>
    50                              <1> 
    51 00001B12 8B06                <1> 	mov	eax, [esi + rose.x0]
    52 00001B14 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    53 00001B17 8B4E08              <1> 	mov	ecx, [esi + rose.x1]
    54 00001B1A 8B560C              <1> 	mov	edx, [esi + rose.y1]
    55                              <1> 
    56 00001B1D FF762052515350E85C- <1> 	cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
    56 00001B26 ECFFFF6683C414      <1>
    57                              <1> 
    58 00001B2D 8B4608              <1> 	mov	eax, [esi + rose.x1]
    59 00001B30 2B06                <1> 	sub	eax, [esi + rose.x0]
    60 00001B32 D1E8                <1> 	shr	eax, 1
    61 00001B34 89C3                <1> 	mov	ebx, eax
    62 00001B36 C1EB04              <1> 	shr	ebx, 4
    63 00001B39 29D8                <1> 	sub	eax, ebx
    64                              <1> 	; eax -= eax / 16
    65                              <1> 
    66 00001B3B FF7614FF761050E84D- <1> 	cdecl	fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
    66 00001B44 0100006683C40C      <1>
    67                              <1> .10L:
    68                              <1> 
    69 00001B4B 8D5DF4              <1> 	lea	ebx, [ebp - 12]	; x position address
    70 00001B4E 8D4DF0              <1> 	lea	ecx, [ebp - 16]	; y position address
    71 00001B51 8B45EC              <1> 	mov	eax, [ebp - 20]	; t
    72                              <1> 
    73 00001B54 505153E85201000066- <1> 	cdecl	fpu_rose_update, ebx, ecx, eax
    73 00001B5D 83C40C              <1>
    74                              <1> 
    75 00001B60 BA00000000          <1> 	mov	edx, 0
    76 00001B65 40                  <1> 	inc	eax
    77 00001B66 BBA08C0000          <1> 	mov	ebx, 360 * 100
    78 00001B6B F7F3                <1> 	div	ebx
    79                              <1> 	; EDX:EAX div ebx. EAX : /, EDX : %.
    80 00001B6D 8955EC              <1> 	mov	[ebp -20], edx
    81                              <1> 
    82 00001B70 8B4DF4              <1> 	mov	ecx, [ebp -12]	; x = 0
    83 00001B73 8B55F0              <1> 	mov	edx, [ebp -16]	; y = 0
    84                              <1> 
    85 00001B76 034DFC              <1> 	add	ecx, [ebp - 4]	; x += X
    86 00001B79 0355F8              <1> 	add	edx, [ebp - 8]	; t += Y
    87                              <1> 
    88 00001B7C 8B5E28              <1> 	mov	ebx, [esi + rose.color_f]
    89 00001B7F CD82                <1> 	int	0x82		; draw_pixel at (ecx, edx). color is ebx
    90                              <1> 
    91 00001B81 6A02E8D8F1FFFF6683- <1> 	cdecl	wait_tick, 2
    91 00001B8A C404                <1>
    92                              <1> 
    93 00001B8C 8B5E2C              <1> 	mov	ebx, [esi + rose.color_b]
    94 00001B8F CD82                <1> 	int	0x82
    95                              <1> 	
    96 00001B91 EBB8                <1> 	jmp	.10L
    97                              <1> 
    98 00001B93 00                  <1> ALIGN	4,	db	0
    99                              <1> 
   100                              <1> ALIGN 4, db 0
   101                              <1> DRAW_PARAM:
   102                              <1> .t3:
   103                              <1>     istruc rose
   104 00001B94 20000000            <1>         at rose.x0, dd 32
   105 00001B98 20000000            <1>         at rose.y0, dd 32
   106 00001B9C D0000000            <1>         at rose.x1, dd 208
   107 00001BA0 D0000000            <1>         at rose.y1, dd 208
   108                              <1> 
   109 00001BA4 02000000            <1>         at rose.n, dd 2
   110 00001BA8 01000000            <1>         at rose.d, dd 1
   111                              <1> 
   112 00001BAC 07000000            <1>         at rose.color_x, dd 0x0007
   113 00001BB0 07000000            <1>         at rose.color_y, dd 0x0007
   114 00001BB4 0F000000            <1>         at rose.color_z, dd 0x000F
   115 00001BB8 0F030000            <1>         at rose.color_s, dd 0x030F
   116 00001BBC 0F000000            <1>         at rose.color_f, dd 0x000F
   117 00001BC0 03000000            <1>         at rose.color_b, dd 0x0003
   118                              <1> 
   119 00001BC4 5461736B2D3300      <1>         at rose.title, db "Task-3", 0
   120 00001BCB 00<rept>            <1>     iend
   121                              <1> 
   122                              <1> .t4:
   123                              <1>     istruc rose
   124 00001BD4 F8000000            <1>         at rose.x0, dd 248
   125 00001BD8 20000000            <1>         at rose.y0, dd 32
   126 00001BDC A8010000            <1>         at rose.x1, dd 424
   127 00001BE0 D0000000            <1>         at rose.y1, dd 208
   128                              <1> 
   129 00001BE4 03000000            <1>         at rose.n, dd 3
   130 00001BE8 01000000            <1>         at rose.d, dd 1
   131                              <1> 
   132 00001BEC 07000000            <1>         at rose.color_x, dd 0x0007
   133 00001BF0 07000000            <1>         at rose.color_y, dd 0x0007
   134 00001BF4 0F000000            <1>         at rose.color_z, dd 0x000F
   135 00001BF8 0F040000            <1>         at rose.color_s, dd 0x040F
   136 00001BFC 0F000000            <1>         at rose.color_f, dd 0x000F
   137 00001C00 04000000            <1>         at rose.color_b, dd 0x0004
   138                              <1> 
   139 00001C04 5461736B2D3400      <1>         at rose.title, db "Task-4", 0
   140 00001C0B 00<rept>            <1>     iend
   141                              <1> 
   142                              <1> .t5:
   143                              <1>     istruc rose
   144 00001C14 20000000            <1>         at rose.x0, dd 32
   145 00001C18 10010000            <1>         at rose.y0, dd 272
   146 00001C1C D0000000            <1>         at rose.x1, dd 208
   147 00001C20 C0010000            <1>         at rose.y1, dd 448
   148                              <1> 
   149 00001C24 02000000            <1>         at rose.n, dd 2
   150 00001C28 06000000            <1>         at rose.d, dd 6
   151                              <1> 
   152 00001C2C 07000000            <1>         at rose.color_x, dd 0x0007
   153 00001C30 07000000            <1>         at rose.color_y, dd 0x0007
   154 00001C34 0F000000            <1>         at rose.color_z, dd 0x000F
   155 00001C38 0F050000            <1>         at rose.color_s, dd 0x050F
   156 00001C3C 0F000000            <1>         at rose.color_f, dd 0x000F
   157 00001C40 05000000            <1>         at rose.color_b, dd 0x0005
   158                              <1> 
   159 00001C44 5461736B2D3500      <1>         at rose.title, db "Task-5", 0
   160 00001C4B 00<rept>            <1>     iend
   161                              <1> 
   162                              <1> .t6:
   163                              <1>     istruc rose
   164 00001C54 F8000000            <1>         at rose.x0, dd 248
   165 00001C58 10010000            <1>         at rose.y0, dd 272
   166 00001C5C A8010000            <1>         at rose.x1, dd 424
   167 00001C60 C0010000            <1>         at rose.y1, dd 448
   168                              <1> 
   169 00001C64 04000000            <1>         at rose.n, dd 4
   170 00001C68 06000000            <1>         at rose.d, dd 6
   171                              <1> 
   172 00001C6C 07000000            <1>         at rose.color_x, dd 0x0007
   173 00001C70 07000000            <1>         at rose.color_y, dd 0x0007
   174 00001C74 0F000000            <1>         at rose.color_z, dd 0x000F
   175 00001C78 0F060000            <1>         at rose.color_s, dd 0x060F
   176 00001C7C 0F000000            <1>         at rose.color_f, dd 0x000F
   177 00001C80 06000000            <1>         at rose.color_b, dd 0x0006
   178                              <1> 
   179 00001C84 5461736B2D3600      <1>         at rose.title, db "Task-6", 0
   180 00001C8B 00<rept>            <1>     iend
   181                              <1> 
   182                              <1> 
   183                              <1> 
   184                              <1> fpu_rose_init:	;	fpu_rose_init(A,n,d)
   185 00001C94 55                  <1> 	push	ebp
   186 00001C95 89E5                <1> 	mov	ebp, esp
   187                              <1> 
   188 00001C97 68B4000000          <1> 	push	dword 180
   189                              <1> 
   190 00001C9C D9EB                <1> 	fldpi
   191 00001C9E DA75FC              <1> 	fidiv	dword [ebp - 4]	; 180
   192 00001CA1 DB450C              <1> 	fild	dword [ebp +12]	; n
   193 00001CA4 DA7510              <1> 	fidiv	dword [ebp +16]	; n / d
   194 00001CA7 DB4508              <1> 	fild	dword [ebp + 8]	; A
   195                              <1> 
   196 00001CAA 89EC                <1> 	mov	esp, ebp
   197 00001CAC 5D                  <1> 	pop	ebp
   198                              <1> 
   199 00001CAD C3                  <1> 	ret
   200                              <1> 
   201                              <1> fpu_rose_update:	;	fpu_rose_update(px, py, t)
   202                              <1> ; px,py is address. t is angle
   203 00001CAE 55                  <1> 	push	ebp
   204 00001CAF 89E5                <1> 	mov	ebp, esp
   205                              <1> 
   206 00001CB1 50                  <1> 	push	eax
   207 00001CB2 53                  <1> 	push	ebx
   208                              <1> 
   209 00001CB3 8B4508              <1> 	mov	eax, [ebp + 8]
   210 00001CB6 8B5D0C              <1> 	mov	ebx, [ebp +12]
   211                              <1> 
   212 00001CB9 DB4510              <1> 	fild	dword [ebp +16]
   213 00001CBC D8CB                <1> 	fmul	st0, st3		; st0 is degree, st3 is radian / degree. st0 is radian
   214 00001CBE D9C0                <1> 	fld	st0
   215                              <1> 
   216 00001CC0 D9FB                <1> 	fsincos
   217 00001CC2 D9CA                <1> 	fxch	st2			; change st0, st2
   218 00001CC4 D8CC                <1> 	fmul	st0, st4		; st0 = kθ
   219 00001CC6 D9FE                <1> 	fsin				; st0 = sin(kθ)
   220 00001CC8 D8CB                <1> 	fmul	st0, st3		; st0 = Asin(kθ)
   221                              <1> 
   222 00001CCA D9CA                <1> 	fxch	st2
   223 00001CCC D8CA                <1> 	fmul	st0, st2
   224 00001CCE DB18                <1> 	fistp	dword [eax]		; store x pos
   225                              <1> 
   226 00001CD0 DEC9                <1> 	fmulp	st1, st0
   227 00001CD2 D9E0                <1> 	fchs				; convert to display coordinate
   228 00001CD4 DB1B                <1> 	fistp	dword [ebx]		; store y pos
   229                              <1> 
   230 00001CD6 5B                  <1> 	pop	ebx
   231 00001CD7 58                  <1> 	pop	eax
   232                              <1> 
   233 00001CD8 89EC                <1> 	mov	esp, ebp
   234 00001CDA 5D                  <1> 	pop	ebp
   235                              <1> 
   236 00001CDB C3                  <1> 	ret
   237                              <1> 
   238                              <1> 
   239                              <1> 	
   240                              <1> 
   241                              <1> 
   238                                  ;%include	"../../../../testOS/src/39_rose/tasks/task_3.s"
   239                                  
   240                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   241                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   242                                  test_func:
   243 00001CDC 68[F41C0000]680F01-     	cdecl	draw_str, 0, 20, 0x010F, .t0
   243 00001CE4 00006A146A00E86CE8-
   243 00001CED FFFF6683C410       
   244 00001CF3 C3                      	ret
   245                                  
   246 00001CF4 54657374206D657373-     .t0:	db	"Test message", 0
   246 00001CFD 61676500           
   247                                  
   248                                  debug:
   249 00001D01 55                      	push	ebp
   250 00001D02 89E5                    	mov	ebp, esp
   251 00001D04 68[1F1D0000]680F01-     	cdecl	draw_str, 0, 1, 0x010F, .t0
   251 00001D0C 00006A016A00E844E8-
   251 00001D15 FFFF6683C410       
   252 00001D1B 89EC                    	mov	esp, ebp
   253 00001D1D 5D                      	pop	ebp
   254                                  
   255 00001D1E C3                      	ret
   256 00001D1F 74657374                .t0:	db	"test"
   257                                  
   258 00001D23 00<rept>                panic_message:	times	0xff	db	0
   259                                  
   260 00001E22 01<rept>                	times	KERNEL_SIZE - ($ - $$) - 0x100	db	1
   261                                  
   262 00001F00 [3B100000]              funcs:	dd	draw_num
   263 00001F04 [DC1C0000]              	dd	test_func
   264 00001F08 [5B050000]              	dd	draw_str
   265 00001F0C [600D0000]              	dd	wait_tick
   266 00001F10 [13060000]              	dd	draw_pixel
   267 00001F14 10000000                	dd	RING_ITEM_SIZE
   268 00001F18 [440B0000]              	dd	_KEY_BUFF
   269 00001F1C [BE100000]              	dd	panic_handler
   270 00001F20 [5C0B0000]              	dd	ring_rd
   271 00001F24 [5C040000]              	dd	draw_char
   272 00001F28 [F00D0000]              	dd	power_off
   273 00001F2C [231D0000]              	dd	panic_message
   274 00001F30 00002100                	dd	HEAP_START
   275                                  
   276 00001F34 01<rept>                	times	KERNEL_SIZE - ($ - $$)	db	1
   277                                  
   278                                  ; KERNEL_END:
   279                                  
