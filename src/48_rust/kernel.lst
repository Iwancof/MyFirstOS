     1                                  %define		USE_SYSTEM_CALL
     2                                  %define		USE_TEST_AND_SET
     3                                  
     4                                  %include	"../include/define.s"
     1                              <1> VECT_BASE		equ	0x0010_0000
     2                              <1> KERNEL_LOAD		equ	0x0010_1000
     3                              <1> STACK_BASE		equ	0x0010_3000
     4                              <1> CR3_BASE		equ	0x0010_5000
     5                              <1> RUST_LOAD		equ	0x0000_1000
     6                              <1> RUST_SIZE		equ	0x0000_6000
     7                              <1> RUST_SECT		equ	RUST_SIZE / SECT_SIZE
     8                              <1> RUST_END		equ	RUST_LOAD + RUST_SIZE
     9                              <1> 
    10                              <1> BOOT_LOAD		equ	0x7c00
    11                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
    12                              <1> 
    13                              <1> BOOT_SIZE		equ	(1024 * 8)
    14                              <1> SECT_SIZE		equ	(512)
    15                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
    16                              <1> 
    17                              <1> E820_RECORD_SIZE	equ	20
    18                              <1> 
    19                              <1> KERNEL_SIZE		equ	(1024 * 8)
    20                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    21                              <1> KERNEL_END		equ	KERNEL_LOAD + KERNEL_SIZE
    22                              <1> ; KERNEL_END : 0x0010_3000
    23                              <1> 
    24                              <1> 
    25                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    26                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    27                              <1> 
    28                              <1> struc			ring_buff		; for keyboard
    29 00000000 <res 00000004>      <1> 				.rp	resd	1
    30 00000004 <res 00000004>      <1> 				.wp	resd	1
    31 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    32                              <1> endstruc
    33                              <1> 
    34                              <1> struc			rose
    35 00000000 <res 00000004>      <1> 				.x0		resd	1
    36 00000004 <res 00000004>      <1> 				.y0		resd	1
    37 00000008 <res 00000004>      <1> 				.x1		resd	1
    38 0000000C <res 00000004>      <1> 				.y1		resd	1
    39                              <1> 
    40 00000010 <res 00000004>      <1> 				.n		resd	1
    41 00000014 <res 00000004>      <1> 				.d		resd	1
    42                              <1> 
    43 00000018 <res 00000004>      <1> 				.color_x	resd	1
    44 0000001C <res 00000004>      <1> 				.color_y	resd	1
    45 00000020 <res 00000004>      <1> 				.color_z	resd	1
    46 00000024 <res 00000004>      <1> 				.color_s	resd	1
    47 00000028 <res 00000004>      <1> 				.color_f	resd	1
    48 0000002C <res 00000004>      <1> 				.color_b	resd	1
    49                              <1> 				
    50 00000030 <res 00000010>      <1> 				.title		resb	16
    51                              <1> endstruc
    52                              <1> 
    53                              <1> ;struc ring_buff
    54                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    55                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    56                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    57                              <1> ;endstruc
    58                              <1> 
    59                              <1> STACK_SIZE		equ	1024
    60                              <1> 
    61                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    62                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    63                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    64                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
    65                              <1> SP_TASK_4		equ	STACK_BASE + (STACK_SIZE * 5)
    66                              <1> SP_TASK_5		equ	STACK_BASE + (STACK_SIZE * 6)
    67                              <1> SP_TASK_6		equ	STACK_BASE + (STACK_SIZE * 7)
    68                              <1> SP_TASK_T		equ	STACK_BASE + (STACK_SIZE * 8)
    69                              <1> 
    70                              <1> PARAM_TASK_4		equ	0x0010_8000
    71                              <1> PARAM_TASK_5		equ	0x0010_9000
    72                              <1> PARAM_TASK_6		equ	0x0010_A000
    73                              <1> 
    74                              <1> CR3_TASK_4		equ	0x0020_0000
    75                              <1> CR3_TASK_5		equ	0x0020_2000
    76                              <1> CR3_TASK_6		equ	0x0020_4000
    77                              <1> CR3_TASK_T		equ	0x0020_6000
    78                              <1> 
    79                              <1> FAT_SIZE equ (1024 * 128)
    80                              <1> ROOT_SIZE equ (1024 * 16)
    81                              <1> 
    82                              <1> FAT1_START equ (KERNEL_SIZE)
    83                              <1> FAT2_START equ (FAT1_START + FAT_SIZE)
    84                              <1> ROOT_START equ (FAT2_START + FAT_SIZE)
    85                              <1> FILE_START equ (ROOT_START + ROOT_SIZE)
    86                              <1> 
    87                              <1> ATTR_VOLUME_ID equ 0x08
    88                              <1> ATTR_ARCHIVE equ 0x20
    89                              <1> 
     5                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     6                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     7                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     8                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     9                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
    10                                  %include	"../include/set_gate.s"
     1                              <1> %macro	set_gate 2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	mov	[edi + 0], ax
     9                              <1> 	shr	eax, 16
    10                              <1> 	mov	[edi + 6], ax
    11                              <1> 	
    12                              <1> 	pop	edi
    13                              <1> 	pop	eax
    14                              <1> %endmacro
    11                                  ;%include	"../../../../testOS/src/include/macro.s"
    12                                  
    13                                  ORG	KERNEL_LOAD
    14                                  
    15                                  ALIGN	4
    16 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    17 00000002 00001000                	dd	VECT_BASE
    18                                  
    19                                  
    20                                  [BITS 32]
    21                                  
    22                                  
    23                                  kernel:
    24 00000006 FA                      	cli
    25                                  
    26 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    27 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    28 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    29 00000013 C1E004                  	shl	eax, 4
    30 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    31 00000018 A3[34030000]            	mov	[FONT_ADR], eax
    32                                  	
    33                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    33 0000001D 50                  <1>  push eax
    33 0000001E 57                  <1>  push edi
    33                              <1> 
    33 0000001F BF[08130000]        <1>  mov edi, %1
    33 00000024 B8[80120000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if %0 == 3
    33 00000029 66C7075F00          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000002E 66894702            <1>  mov [edi + 2], ax
    33 00000032 C1E810              <1>  shr eax, 16
    33 00000035 884704              <1>  mov [edi + 4], al
    33 00000038 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000003B 5F                  <1>  pop edi
    33 0000003C 58                  <1>  pop eax
    34                                  	set_desc	GDT.tss_0, TSS_0
    34 0000003D 50                  <1>  push eax
    34 0000003E 57                  <1>  push edi
    34                              <1> 
    34 0000003F BF[10130000]        <1>  mov edi, %1
    34 00000044 B8[56130000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if %0 == 3
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 00000049 66894702            <1>  mov [edi + 2], ax
    34 0000004D C1E810              <1>  shr eax, 16
    34 00000050 884704              <1>  mov [edi + 4], al
    34 00000053 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 00000056 5F                  <1>  pop edi
    34 00000057 58                  <1>  pop eax
    35                                  	set_desc	GDT.tss_1, TSS_1
    35 00000058 50                  <1>  push eax
    35 00000059 57                  <1>  push edi
    35                              <1> 
    35 0000005A BF[18130000]        <1>  mov edi, %1
    35 0000005F B8[2E140000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if %0 == 3
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 00000064 66894702            <1>  mov [edi + 2], ax
    35 00000068 C1E810              <1>  shr eax, 16
    35 0000006B 884704              <1>  mov [edi + 4], al
    35 0000006E 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 00000071 5F                  <1>  pop edi
    35 00000072 58                  <1>  pop eax
    36                                  	set_desc	GDT.tss_2, TSS_2
    36 00000073 50                  <1>  push eax
    36 00000074 57                  <1>  push edi
    36                              <1> 
    36 00000075 BF[20130000]        <1>  mov edi, %1
    36 0000007A B8[06150000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if %0 == 3
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 0000007F 66894702            <1>  mov [edi + 2], ax
    36 00000083 C1E810              <1>  shr eax, 16
    36 00000086 884704              <1>  mov [edi + 4], al
    36 00000089 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000008C 5F                  <1>  pop edi
    36 0000008D 58                  <1>  pop eax
    37                                  	set_desc	GDT.tss_3, TSS_3
    37 0000008E 50                  <1>  push eax
    37 0000008F 57                  <1>  push edi
    37                              <1> 
    37 00000090 BF[28130000]        <1>  mov edi, %1
    37 00000095 B8[DE150000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if %0 == 3
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000009A 66894702            <1>  mov [edi + 2], ax
    37 0000009E C1E810              <1>  shr eax, 16
    37 000000A1 884704              <1>  mov [edi + 4], al
    37 000000A4 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 000000A7 5F                  <1>  pop edi
    37 000000A8 58                  <1>  pop eax
    38                                  	set_desc	GDT.tss_4, TSS_4
    38 000000A9 50                  <1>  push eax
    38 000000AA 57                  <1>  push edi
    38                              <1> 
    38 000000AB BF[30130000]        <1>  mov edi, %1
    38 000000B0 B8[B6160000]        <1>  mov eax, %2
    38                              <1> 
    38                              <1>  %if %0 == 3
    38                              <1>  mov [edi + 0], %3
    38                              <1>  %endif
    38                              <1> 
    38 000000B5 66894702            <1>  mov [edi + 2], ax
    38 000000B9 C1E810              <1>  shr eax, 16
    38 000000BC 884704              <1>  mov [edi + 4], al
    38 000000BF 886707              <1>  mov [edi + 7], ah
    38                              <1> 
    38 000000C2 5F                  <1>  pop edi
    38 000000C3 58                  <1>  pop eax
    39                                  	set_desc	GDT.tss_5, TSS_5
    39 000000C4 50                  <1>  push eax
    39 000000C5 57                  <1>  push edi
    39                              <1> 
    39 000000C6 BF[38130000]        <1>  mov edi, %1
    39 000000CB B8[8E170000]        <1>  mov eax, %2
    39                              <1> 
    39                              <1>  %if %0 == 3
    39                              <1>  mov [edi + 0], %3
    39                              <1>  %endif
    39                              <1> 
    39 000000D0 66894702            <1>  mov [edi + 2], ax
    39 000000D4 C1E810              <1>  shr eax, 16
    39 000000D7 884704              <1>  mov [edi + 4], al
    39 000000DA 886707              <1>  mov [edi + 7], ah
    39                              <1> 
    39 000000DD 5F                  <1>  pop edi
    39 000000DE 58                  <1>  pop eax
    40                                  	set_desc	GDT.tss_6, TSS_6
    40 000000DF 50                  <1>  push eax
    40 000000E0 57                  <1>  push edi
    40                              <1> 
    40 000000E1 BF[40130000]        <1>  mov edi, %1
    40 000000E6 B8[66180000]        <1>  mov eax, %2
    40                              <1> 
    40                              <1>  %if %0 == 3
    40                              <1>  mov [edi + 0], %3
    40                              <1>  %endif
    40                              <1> 
    40 000000EB 66894702            <1>  mov [edi + 2], ax
    40 000000EF C1E810              <1>  shr eax, 16
    40 000000F2 884704              <1>  mov [edi + 4], al
    40 000000F5 886707              <1>  mov [edi + 7], ah
    40                              <1> 
    40 000000F8 5F                  <1>  pop edi
    40 000000F9 58                  <1>  pop eax
    41 000000FA 0F0115[50130000]        	lgdt		[GDTR]
    42                                  
    43 00000101 BC00341000              	mov	esp, SP_TASK_0
    44 00000106 66B83000                	mov	ax, SS_TASK_0	; set tss0
    45 0000010A 0F00D8                  	ltr	ax
    46                                  	; say "this process is task 0" to CPU
    47                                  
    48                                  
    49 0000010D E87D090000              	cdecl	init_int
    50 00000112 E816080000              	cdecl	init_pic
    51                                  
    52 00000117 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    52 0000011F [C60A0000]668907C1-
    52 00000127 E810668947065F58   
    53                                  	; set_vect	0x06, ope_exce
    54 0000012F 5057BF70001000B8-       	set_vect	0x0E, int_pf
    54 00000137 [A5110000]668907C1-
    54 0000013F E810668947065F58   
    55 00000147 5057BF38001000B8-       	set_vect	0x07, int_nm
    55 0000014F [C70C0000]668907C1-
    55 00000157 E810668947065F58   
    56 0000015F 5057BF00011000B8-       	set_vect	0x20, int_timer
    56 00000167 [0B120000]668907C1-
    56 0000016F E810668947065F58   
    57 00000177 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    57 0000017F [E40A0000]668907C1-
    57 00000187 E810668947065F58   
    58 0000018F 5057BF40011000B8-       	set_vect	0x28, int_rtc
    58 00000197 [F0080000]668907C1-
    58 0000019F E810668947065F58   
    59 000001A7 5057BF08041000B8-       	set_vect	0x81, trap_gate_81, word 0xEF00	; type = trap
    59 000001AF [1F0C0000]66C74704-
    59 000001B7 00EF668907C1E81066-
    59 000001C0 8947065F58         
    60 000001C5 5057BF10041000B8-       	set_vect	0x82, trap_gate_82, word 0xEF00
    60 000001CD [450C0000]66C74704-
    60 000001D5 00EF668907C1E81066-
    60 000001DE 8947065F58         
    61 000001E3 5057BFF8071000B8-       	set_vect	0xFF, panic
    61 000001EB [85100000]668907C1-
    61 000001F3 E810668947065F58   
    62                                  
    63 000001FB E8030F0000              	cdecl	init_page
    64                                  
    65                                  	;mov	eax, CR3_BASE
    66                                  	;mov	cr3, eax
    67                                  	
    68                                  	;mov	eax, cr0
    69                                  	;or	eax, (1 << 31)
    70                                  	;mov	cr0, eax
    71                                  	;jmp	$ + 2
    72                                  
    73                                  	;mov	eax, 0xffff00
    74                                  	;mov	[eax], dword 1
    75                                  	;cdecl	itoa, dword [eax], .t1, 16, 16, 0b0100
    76                                  	;cdecl	draw_str, 0, 10, 0x010F, .t1
    77                                  
    78                                  	set_gate	GDT.call_gate, call_gate
    78 00000200 50                  <1>  push eax
    78 00000201 57                  <1>  push edi
    78                              <1> 
    78 00000202 BF[48130000]        <1>  mov edi, %1
    78 00000207 B8[CF0B0000]        <1>  mov eax, %2
    78                              <1> 
    78 0000020C 668907              <1>  mov [edi + 0], ax
    78 0000020F C1E810              <1>  shr eax, 16
    78 00000212 66894706            <1>  mov [edi + 6], ax
    78                              <1> 
    78 00000216 5F                  <1>  pop edi
    78 00000217 58                  <1>  pop eax
    79                                  	
    80 00000218 6A10E8FA0600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    80 00000221 C404               
    81 00000223 E804100000              	cdecl	int_en_timer
    82                                  	
    83                                  	outp	0x21, 0b1111_1000	; slave
    83 00000228 B0F8                <1>  mov al, %2
    83 0000022A E621                <1>  out %1, al
    84                                  	outp	0xA1, 0b1111_1110	; rtc
    84 0000022C B0FE                <1>  mov al, %2
    84 0000022E E6A1                <1>  out %1, al
    85                                  	
    86 00000230 FB                      	sti
    87                                  	
    88 00000231 6A0D6A3FE8AA020000-     	cdecl	draw_font, 63, 13
    88 0000023A 6683C408           
    89 0000023E 6A046A3FE816030000-     	cdecl	draw_color_bar, 63, 4
    89 00000247 6683C408           
    90                                  
    91 0000024B 68[04030000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    91 00000253 00006A0E6A19E8C102-
    91 0000025C 00006683C410       
    92                                  	
    93                                  	;jmp	SS_TASK_1:10000
    94                                  
    95 00000262 66A118100000            	mov	ax, word [RUST_LOAD + 0x18]
    96 00000268 66030538100000          	add	ax, word [RUST_LOAD + 0x38]
    97                                  
    98 0000026F FFD0                    	cdecl	eax	; initialize function. eax = main_entry_point
    99 00000271 A3[3C030000]            	mov	[RUST_ENTRY], eax
   100                                  
   101                                  .90L:
   102 00000276 FF15[3C030000]          	cdecl	[RUST_ENTRY]
   103                                  	;push	eax
   104                                  	;pop	eax
   105                                  	;cdecl	draw_num, eax, 0, 1
   106                                  
   107                                  	; jmp	.90L
   108                                  
   109                                  	; cdecl	draw_num, _KEY_BUFF, 0, 0
   110                                  
   111 0000027C EBF8                    	jmp	.90L
   112                                  
   113                                  	; jmp	$
   114                                  
   115                                  .10L:
   116                                  
   117 0000027E E8BE0F0000              	cdecl	draw_rotation_bar
   118                                  
   119 00000283 68[2B030000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
   119 00000289 [080B0000]E88E0800-
   119 00000291 006683C408         
   120 00000296 83F800                  	cmp	eax, 0
   121 00000299 74E3                    	je	.10L
   122                                  
   123 0000029B 68[080B0000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
   123 000002A3 02E8D30800006683C4-
   123 000002AC 0C                 
   124                                  
   125 000002AD A0[2B030000]            	mov	al, [.int_key]
   126 000002B2 3C02                    	cmp	al, 0x02
   127 000002B4 7522                    	jne	.14L
   128                                  
   129 000002B6 FF15F09B0000            	call	[BOOT_LOAD + BOOT_SIZE - 16]
   130 000002BC BE00780000              	mov	esi, 0x7800
   131 000002C1 C6462000                	mov	[esi + 32], byte 0
   132 000002C5 5668040F00006A006A-     	cdecl	draw_str, 0, 0, 0x0F04, esi
   132 000002CE 00E84B0200006683C4-
   132 000002D7 10                 
   133                                  
   134                                  .14L:
   135 000002D8 A0[2B030000]            	mov	al, [.int_key]
   136 000002DD 50E85F0A00006683C4-     	cdecl	ctrl_alt_end, eax
   136 000002E6 04                 
   137 000002E7 83F800                  	cmp	eax, 0
   138 000002EA 7492                    	je	.10L
   139                                  
   140 000002EC B800000000              	mov	eax, 0
   141 000002F1 0FAB05[2F030000]        	bts	[.once], eax
   142 000002F8 7284                    	jc	.10L
   143 000002FA E8B50A0000              	cdecl	power_off
   144                                  
   145 000002FF E97AFFFFFF              	jmp	.10L
   146                                  	
   147                                  	
   148 00000304 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   148 0000030D 65726E656C212000   
   149 00000315 2D2D2D2D00              .t0:	db	"----",0
   150 0000031A 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
   150 00000323 2D2D2D2D2D2D2D00   
   151 0000032B 00000000                .int_key:	dd	0
   152 0000032F 00000000                .once:		dd	0
   153                                  
   154 00000333 00                      ALIGN	4,	db	0
   155 00000334 00000000                FONT_ADR:	dd	0
   156 00000338 00000000                RTC_TIME:	dd	0
   157                                  
   158 0000033C 00000000                RUST_ENTRY:	dd	0
   159                                  
   160                                  ope_exce:
   161 00000340 6A026A006834120000-     	cdecl	draw_num, 0x1234, 0, 2
   161 00000349 E8B10C00006683C40C 
   162 00000352 EBFE                    	jmp	$
   163                                  
   164                                  
   165                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 00000354 55                  <1> 	push	ebp
     4 00000355 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 00000357 50                  <1> 	push	eax
     7 00000358 52                  <1> 	push	edx
     8                              <1> 
     9 00000359 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 0000035C 80E403              <1> 	and	ah, 0x03
    11 0000035F B004                <1> 	mov	al, 0x04	; read map
    12 00000361 66BACE03            <1> 	mov	dx, 0x03CE
    13 00000365 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 00000367 5A                  <1> 	pop	edx
    16 00000368 58                  <1> 	pop	eax
    17                              <1> 
    18 00000369 89EC                <1> 	mov	esp,ebp
    19 0000036B 5D                  <1> 	pop	ebp
    20                              <1> 
    21 0000036C C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 0000036D 55                  <1> 	push	ebp
    25 0000036E 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 00000370 50                  <1> 	push	eax
    28 00000371 52                  <1> 	push	edx
    29                              <1> 
    30 00000372 8A6508              <1> 	mov	ah, [ebp + 8]
    31 00000375 80E40F              <1> 	and	ah, 0x0F
    32 00000378 B002                <1> 	mov	al, 0x02		; write select
    33 0000037A 66BAC403            <1> 	mov	dx, 0x03C4
    34 0000037E 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 00000380 5A                  <1> 	pop	edx
    37 00000381 58                  <1> 	pop	eax
    38                              <1> 
    39 00000382 89EC                <1> 	mov	esp, ebp
    40 00000384 5D                  <1> 	pop	ebp
    41                              <1> 
    42 00000385 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 00000386 55                  <1> 	push	ebp
    51 00000387 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 00000389 50                  <1> 	push	eax
    54 0000038A 53                  <1> 	push	ebx
    55 0000038B 51                  <1> 	push	ecx
    56 0000038C 52                  <1> 	push	edx
    57 0000038D 56                  <1> 	push	esi
    58 0000038E 57                  <1> 	push	edi
    59                              <1> 
    60 0000038F 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 00000392 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 00000395 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 00000399 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 0000039D 84C7                <1> 	test	bh, al			; BACK
    67 0000039F 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 000003A2 FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 000003A4 84C3                <1> 	test	bl, al			; FORWARD
    71 000003A6 0F94C2              <1> 	setz	dl
    72 000003A9 FECA                <1> 	dec	dl
    73                              <1> 
    74 000003AB FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 000003AC B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 000003B1 AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 000003B2 88C4                <1> 	mov	ah, al			; AL is font data
    80 000003B4 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 000003B6 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 000003B8 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 000003BE 7404                <1> 	jz	.11F
    86 000003C0 2227                <1> 	and	ah, [edi]
    87 000003C2 EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 000003C4 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 000003C6 08E0                <1> 	or	al,ah
    92 000003C8 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 000003CA 83C750              <1> 	add	edi,80			; next
    95 000003CD E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 000003CF 5F                  <1> 	pop	edi
    99 000003D0 5E                  <1> 	pop	esi
   100 000003D1 5A                  <1> 	pop	edx
   101 000003D2 59                  <1> 	pop	ecx
   102 000003D3 5B                  <1> 	pop	ebx
   103 000003D4 58                  <1> 	pop	eax
   104                              <1> 
   105 000003D5 89EC                <1> 	mov	esp, ebp
   106 000003D7 5D                  <1> 	pop	ebp
   107                              <1> 
   108 000003D8 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 000003D9 55                  <1> 	push	ebp
   113 000003DA 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 000003DC 57                  <1> 	push	edi
   116 000003DD 50                  <1> 	push	eax
   117 000003DE 53                  <1> 	push	ebx
   118                              <1> 
   119 000003DF 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 000003E2 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 000003E6 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 000003EA 84C3                <1> 	test	bl, al
   124 000003EC 0F94C3              <1> 	setz	bl
   125 000003EF FECB                <1> 	dec	bl
   126                              <1> 
   127 000003F1 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 000003F4 88C4                <1> 	mov	ah, al
   129 000003F6 F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 000003F8 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 000003FA 20D8                <1> 	and	al, bl
   134 000003FC 08E0                <1> 	or	al, ah
   135 000003FE 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 00000400 5B                  <1> 	pop	ebx
   138 00000401 58                  <1> 	pop	eax
   139 00000402 5F                  <1> 	pop	edi
   140                              <1> 
   141 00000403 89EC                <1> 	mov	esp, ebp
   142 00000405 5D                  <1> 	pop	ebp
   143                              <1> 
   144 00000406 C3                  <1> 	ret
   145                              <1> 
   166                                  %include	"../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2 00000407 55                  <1> 	push	ebp
     3 00000408 89E5                <1> 	mov	ebp,esp
     4                              <1> 
     5 0000040A 57                  <1> 	push	edi
     6 0000040B 56                  <1> 	push	esi
     7 0000040C 51                  <1> 	push	ecx
     8                              <1> 
     9 0000040D FC                  <1> 	cld
    10 0000040E 8B7D08              <1> 	mov	edi,[ebp + 8]
    11 00000411 8B750C              <1> 	mov	esi,[ebp + 12]
    12 00000414 8B4D10              <1> 	mov	ecx,[ebp + 16]
    13                              <1> 
    14 00000417 F3A4                <1> 	rep	movsb
    15                              <1> 
    16 00000419 59                  <1> 	pop	ecx
    17 0000041A 5E                  <1> 	pop	esi
    18 0000041B 5F                  <1> 	pop	edi
    19                              <1> 
    20 0000041C 89EC                <1> 	mov	esp,ebp
    21 0000041E 5D                  <1> 	pop	ebp
    22                              <1> 
    23 0000041F C3                  <1> 	ret
    24                              <1> 
   167                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 00000420 55                  <1> 	push	ebp
     4 00000421 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000423 56                  <1> 	push	esi
     7 00000424 57                  <1> 	push	edi
     8 00000425 50                  <1> 	push	eax
     9 00000426 53                  <1> 	push	ebx
    10 00000427 51                  <1> 	push	ecx
    11 00000428 52                  <1> 	push	edx
    12                              <1> 
    13 00000429 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 0000042D C1E604              <1> 	shl	esi, 4
    15 00000430 0335[34030000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 00000436 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 00000439 C1E708              <1> 	shl	edi, 8
    19 0000043C 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 00000443 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 00000446 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 0000044A 6A03E803FFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 00000453 C404                <1>
    25 00000455 6A08E811FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 0000045E C404                <1>
    26 00000460 536A085756E81CFFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 00000469 FF6683C410          <1>
    27                              <1> 
    28 0000046E 6A02E8DFFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 00000477 C404                <1>
    29 00000479 6A04E8EDFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 00000482 C404                <1>
    30 00000484 536A045756E8F8FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 0000048D FF6683C410          <1>
    31                              <1> 
    32 00000492 6A01E8BBFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 0000049B C404                <1>
    33 0000049D 6A02E8C9FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 000004A6 C404                <1>
    34 000004A8 536A025756E8D4FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 000004B1 FF6683C410          <1>
    35                              <1> 	
    36 000004B6 6A00E897FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 000004BF C404                <1>
    37 000004C1 6A01E8A5FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 000004CA C404                <1>
    38 000004CC 536A015756E8B0FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 000004D5 FF6683C410          <1>
    39                              <1> 
    40 000004DA 5A                  <1> 	pop	edx
    41 000004DB 59                  <1> 	pop	ecx
    42 000004DC 5B                  <1> 	pop	ebx
    43 000004DD 58                  <1> 	pop	eax
    44 000004DE 5F                  <1> 	pop	edi
    45 000004DF 5E                  <1> 	pop	esi
    46                              <1> 
    47 000004E0 89EC                <1> 	mov	esp, ebp
    48 000004E2 5D                  <1> 	pop	ebp
    49                              <1> 
    50 000004E3 C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
   168                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 000004E4 55                  <1> 	push	ebp
     3 000004E5 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000004E7 50                  <1> 	push	eax
     6 000004E8 53                  <1> 	push	ebx
     7 000004E9 51                  <1> 	push	ecx
     8                              <1> 
     9 000004EA B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 000004EF 81F900010000        <1> 	cmp	ecx,256
    12 000004F5 7321                <1> 	jae	.10E
    13                              <1> 
    14 000004F7 89C8                <1> 	mov	eax, ecx
    15 000004F9 83E00F              <1> 	and	eax, 0b00001111
    16 000004FC 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 000004FF 89CB                <1> 	mov	ebx, ecx
    19 00000501 C1EB04              <1> 	shr	ebx, 4
    20 00000504 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 00000507 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 00000510 FF6683C410          <1>
    23                              <1> 	
    24 00000515 41                  <1> 	inc	ecx
    25 00000516 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 00000518 59                  <1> 	pop	ecx
    30 00000519 5B                  <1> 	pop	ebx
    31 0000051A 58                  <1> 	pop	eax
    32                              <1> 
    33 0000051B 89EC                <1> 	mov	esp, ebp
    34 0000051D 5D                  <1> 	pop	ebp
    35                              <1> 
    36 0000051E C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
   169                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 0000051F 55                  <1> 	push	ebp
     3 00000520 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000522 50                  <1> 	push	eax
     6 00000523 53                  <1> 	push	ebx
     7 00000524 51                  <1> 	push	ecx
     8 00000525 52                  <1> 	push	edx
     9 00000526 56                  <1> 	push	esi
    10                              <1> 
    11 00000527 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 0000052A 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 0000052D 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 00000531 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 00000534 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 00000535 AC                  <1> 	lodsb
    20 00000536 3C00                <1> 	cmp	al, 0
    21 00000538 741A                <1> 	je	.10E
    22                              <1> %ifdef	USE_SYSTEM_CALL
    23 0000053A CD81                <1> 	int 0x81
    24                              <1> %else
    25                              <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    26                              <1> %endif
    27 0000053C 43                  <1> 	inc	ebx
    28 0000053D 83FB50              <1> 	cmp	ebx, 80
    29 00000540 7CF3                <1> 	jl	.10L
    30 00000542 BB00000000          <1> 	mov	ebx, 0
    31 00000547 41                  <1> 	inc	ecx
    32 00000548 83F91E              <1> 	cmp	ecx, 30
    33 0000054B 7CE8                <1> 	jl	.10L
    34 0000054D B900000000          <1> 	mov	ecx, 0
    35                              <1> 	
    36 00000552 EBE1                <1> 	jmp	.10L
    37                              <1> .10E:
    38                              <1> 
    39 00000554 5E                  <1> 	pop	esi
    40 00000555 5A                  <1> 	pop	edx
    41 00000556 59                  <1> 	pop	ecx
    42 00000557 5B                  <1> 	pop	ebx
    43 00000558 58                  <1> 	pop	eax
    44                              <1> 
    45 00000559 89EC                <1> 	mov	esp, ebp
    46 0000055B 5D                  <1> 	pop	ebp
    47                              <1> 
    48 0000055C C3                  <1> 	ret
   170                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 0000055D 55                  <1> 	push	ebp
     3 0000055E 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000560 56                  <1> 	push	esi
     6 00000561 57                  <1> 	push	edi
     7 00000562 50                  <1> 	push	eax
     8 00000563 53                  <1> 	push	ebx
     9 00000564 51                  <1> 	push	ecx
    10 00000565 52                  <1> 	push	edx
    11                              <1> 
    12 00000566 8B7508              <1> 	mov	esi, [ebp + 8]
    13 00000569 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 0000056C B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 00000571 83F910              <1> 	cmp	ecx, 16
    18 00000574 732E                <1> 	jae	.10E
    19                              <1> 
    20 00000576 89C8                <1> 	mov	eax, ecx
    21 00000578 83E001              <1> 	and	eax, 0x01	; % 2
    22 0000057B C1E003              <1> 	shl	eax, 3		; *= 8
    23 0000057E 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 00000580 89CB                <1> 	mov	ebx, ecx
    26 00000582 D1EB                <1> 	shr	ebx, 1		; / 2
    27 00000584 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 00000586 89CA                <1> 	mov	edx, ecx
    32 00000588 D1E2                <1> 	shl	edx, 1
    33 0000058A 8B92[B7050000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 00000590 68[AE050000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 00000598 E882FFFFFF6683C410  <1>
    36                              <1> 
    37 000005A1 41                  <1> 	inc	ecx
    38 000005A2 EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 000005A4 52                  <1> 	push	edx	
    42 000005A5 51                  <1> 	push	ecx	
    43 000005A6 53                  <1> 	push	ebx	
    44 000005A7 50                  <1> 	push	eax	
    45 000005A8 57                  <1> 	push	edi	
    46 000005A9 56                  <1> 	push	esi	
    47                              <1> 
    48 000005AA 89EC                <1> 	mov	esp, ebp
    49 000005AC 5D                  <1> 	pop	ebp
    50                              <1> 
    51 000005AD C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 000005AE 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 000005B7 00000008            <1> .t0:	dw 0x0000,0x0800
    57 000005BB 00010009            <1> 	dw 0x0100,0x0900
    58 000005BF 0002000A            <1> 	dw 0x0200,0x0A00
    59 000005C3 0003000B            <1> 	dw 0x0300,0x0B00
    60 000005C7 0004000C            <1> 	dw 0x0400,0x0C00
    61 000005CB 0005000D            <1> 	dw 0x0500,0x0D00
    62 000005CF 0006000E            <1> 	dw 0x0600,0x0E00
    63 000005D3 0007000F            <1> 	dw 0x0700,0x0F00
   171                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 000005D7 55                  <1> 	push	ebp
     4 000005D8 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000005DA 57                  <1> 	push	edi
     7 000005DB 53                  <1> 	push	ebx
     8 000005DC 51                  <1> 	push	ecx
     9                              <1> 
    10 000005DD 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 000005E0 C1E704              <1> 	shl	edi, 4
    12 000005E3 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 000005EA 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 000005ED 89D9                <1> 	mov	ecx, ebx
    16 000005EF C1EB03              <1> 	shr	ebx, 3
    17 000005F2 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 000005F4 83E107              <1> 	and	ecx, 0x07
    20 000005F7 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 000005FC D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 000005FE 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 00000601 6A03E84CFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 0000060A C404                <1>
    28 0000060C 6A08E85AFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 00000615 C404                <1>
    29 00000617 516A085753E8B8FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 00000620 FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 00000625 6A02E828FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 0000062E C404                <1>
    34 00000630 6A04E836FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 00000639 C404                <1>
    35 0000063B 516A045753E894FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 00000644 FF6683C410          <1>
    36                              <1> 	
    37 00000649 6A01E804FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 00000652 C404                <1>
    38 00000654 6A02E812FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 0000065D C404                <1>
    39 0000065F 516A025753E870FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 00000668 FF6683C410          <1>
    40                              <1> 	
    41 0000066D 6A00E8E0FCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 00000676 C404                <1>
    42 00000678 6A01E8EEFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 00000681 C404                <1>
    43 00000683 516A015753E84CFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 0000068C FF6683C410          <1>
    44                              <1> 
    45 00000691 59                  <1> 	pop	ecx
    46 00000692 5B                  <1> 	pop	ebx
    47 00000693 5F                  <1> 	pop	edi
    48                              <1> 
    49 00000694 89EC                <1> 	mov	esp, ebp
    50 00000696 5D                  <1> 	pop	ebp
    51                              <1> 
    52 00000697 C3                  <1> 	ret
    53                              <1> 
   172                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 00000698 55                  <1> 	push	ebp
     3 00000699 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000069B 6A00                <1> 	push	dword 0	; SUM: - 4
     6 0000069D 6A00                <1> 	push	dword 0	; x0 : - 8
     7 0000069F 6A00                <1> 	push	dword 0	; wid: -12
     8 000006A1 6A00                <1> 	push	dword 0	; inx: -16
     9 000006A3 6A00                <1> 	push	dword 0	; y0 : -20
    10 000006A5 6A00                <1> 	push	dword 0	; hei: -24
    11 000006A7 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 000006A9 50                  <1> 	push	eax
    14 000006AA 53                  <1> 	push	ebx
    15 000006AB 51                  <1> 	push	ecx
    16 000006AC 52                  <1> 	push	edx
    17 000006AD 56                  <1> 	push	esi
    18 000006AE 57                  <1> 	push	edi
    19                              <1> 
    20 000006AF 8B4508              <1> 	mov	eax, [ebp + 8]
    21 000006B2 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 000006B5 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 000006B7 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 000006B9 F7DB                <1> 	neg	ebx
    26 000006BB BEFFFFFFFF          <1> 	mov	esi, -1
    27 000006C0 EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 000006C2 BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 000006C7 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 000006CA 8B5514              <1> 	mov	edx, [ebp +20]
    34 000006CD 29CA                <1> 	sub	edx, ecx
    35 000006CF 7D09                <1> 	jge	.20F
    36                              <1> 
    37 000006D1 F7DA                <1> 	neg	edx
    38 000006D3 BFFFFFFFFF          <1> 	mov	edi, -1
    39 000006D8 EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 000006DA BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 000006DF 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 000006E2 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 000006E5 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 000006E8 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 000006EB 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 000006EE 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 000006F1 39D3                <1> 	cmp	ebx, edx
    53 000006F3 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 000006F5 8D75EC              <1> 	lea	esi, [ebp -20]
    56 000006F8 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 000006FB EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 000006FD 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 00000700 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 00000703 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 00000706 83F900              <1> 	cmp	ecx, 0
    67 00000709 7505                <1> 	jnz	.30E
    68 0000070B B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75                              <1> %ifdef	USE_SYSTEM_CALL
    76 00000710 51                  <1> 	push	ecx
    77 00000711 52                  <1> 	push	edx
    78 00000712 53                  <1> 	push	ebx
    79                              <1> 
    80 00000713 8B4DF8              <1> 	mov	ecx, [ebp - 8]
    81 00000716 8B55EC              <1> 	mov	edx, [ebp -20]
    82 00000719 8B5D18              <1> 	mov	ebx, [ebp +24]
    83                              <1> 
    84 0000071C CD82                <1> 	int	0x82
    85                              <1> 
    86 0000071E 5B                  <1> 	pop	ebx
    87 0000071F 5A                  <1> 	pop	edx
    88 00000720 59                  <1> 	pop	ecx
    89                              <1> %else	
    90                              <1> 	cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    91                              <1> %endif
    92                              <1> 	
    93                              <1> 	; update coordinate
    94 00000721 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    95 00000724 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    96                              <1> 
    97 00000726 8B45FC              <1> 	mov	eax, [ebp - 4]
    98 00000729 0347FC              <1> 	add	eax, [edi - 4]
    99 0000072C 8B5EFC              <1> 	mov	ebx, [esi - 4]
   100                              <1> 
   101 0000072F 39D8                <1> 	cmp	eax, ebx
   102 00000731 7C07                <1> 	jl	.52E
   103 00000733 29D8                <1> 	sub	eax, ebx	; sum -= wid
   104                              <1> 	; sum can only add -1 or 1
   105                              <1> 	; so. not be  "dif * 2 < sum" 
   106                              <1> 
   107 00000735 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
   108 00000738 011F                <1> 	add	[edi - 0], ebx
   109                              <1> .52E:
   110 0000073A 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
   111                              <1> 
   112 0000073D E2D1                <1> 	loop	.50L
   113                              <1> .50E:
   114                              <1> 
   115                              <1> 
   116 0000073F 5F                  <1> 	pop	edi
   117 00000740 5E                  <1> 	pop	esi
   118 00000741 5A                  <1> 	pop	edx
   119 00000742 59                  <1> 	pop	ecx
   120 00000743 5B                  <1> 	pop	ebx
   121 00000744 58                  <1> 	pop	eax
   122                              <1> 
   123 00000745 89EC                <1> 	mov	esp, ebp
   124 00000747 5D                  <1> 	pop	ebp
   125                              <1> 
   126 00000748 C3                  <1> 	ret
   127                              <1> 
   128                              <1> 
   173                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 00000749 55                  <1> 	push	ebp
     3 0000074A 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000074C 50                  <1> 	push	eax
     6 0000074D 53                  <1> 	push	ebx
     7 0000074E 51                  <1> 	push	ecx
     8 0000074F 52                  <1> 	push	edx
     9 00000750 56                  <1> 	push	esi
    10                              <1> 
    11 00000751 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 00000754 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 00000757 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 0000075A 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 0000075D 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 00000760 39C8                <1> 	cmp	eax, ecx
    21 00000762 7C01                <1> 	jl	.10E		; OK
    22 00000764 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 00000765 39D3                <1> 	cmp	ebx, edx
    25 00000767 7C02                <1> 	jl	.20E		; OK
    26 00000769 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 0000076B 5653515350E823FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 00000774 FF6683C414          <1>
    36 00000779 5652505350E815FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 00000782 FF6683C414          <1>
    37                              <1> 
    38 00000787 4A                  <1> 	dec	edx
    39 00000788 5652515250E806FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 00000791 FF6683C414          <1>
    40 00000796 42                  <1> 	inc	edx
    41                              <1> 
    42 00000797 49                  <1> 	dec	ecx
    43 00000798 5652515351E8F6FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 000007A1 FF6683C414          <1>
    44                              <1> 
    45 000007A6 5E                  <1> 	pop	esi
    46 000007A7 5A                  <1> 	pop	edx
    47 000007A8 59                  <1> 	pop	ecx
    48 000007A9 5B                  <1> 	pop	ebx
    49 000007AA 58                  <1> 	pop	eax
    50                              <1> 
    51 000007AB 89EC                <1> 	mov	esp, ebp
    52 000007AD 5D                  <1> 	pop	ebp
    53                              <1> 
    54 000007AE C3                  <1> 	ret
    55                              <1> 
   174                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 000007AF 55                  <1> 	push 	ebp
     3 000007B0 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000007B2 50                  <1> 	push	eax
     6 000007B3 53                  <1> 	push	ebx
     7 000007B4 51                  <1> 	push	ecx
     8 000007B5 52                  <1> 	push	edx
     9 000007B6 56                  <1> 	push	esi
    10 000007B7 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 000007B8 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 000007BC 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 000007BF 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 000007C2 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 000007C4 B020                <1> 	mov	al,' '
    27 000007C6 F7C304000000        <1> 	test	ebx, 0b0100
    28 000007CC 7402                <1> 	je	.42E
    29 000007CE B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 000007D0 FC                  <1> 	cld
    32 000007D1 F3AA                <1> 	rep	stosb
    33                              <1> 
    34 000007D3 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 000007D6 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 000007D9 89F7                <1> 	mov	edi, esi
    37 000007DB 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 000007DD 4F                  <1> 	dec	edi
    39                              <1> 
    40 000007DE F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 000007E4 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 000007E6 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 000007E9 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 000007EB 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 000007EE F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 000007F4 7410                <1> .20Q:	je	.20E		; not print sign
    51 000007F6 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 000007F9 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 000007FB F7D8                <1> 	neg	eax		; ax *= -1
    54 000007FD C6062D              <1> 	mov	[esi], byte '-'
    55 00000800 EB03                <1> 	jmp	.22E
    56 00000802 C6062B              <1> .22F:	mov	[esi], byte '+'
    57 00000805 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 00000806 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 00000809 BA00000000          <1> 	mov	edx, 0
    64 0000080E F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 00000810 89D6                <1> 	mov	esi, edx
    68 00000812 8A96[2A080000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 00000818 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 0000081A 4F                  <1> 	dec	edi
    72                              <1> 
    73 0000081B 83F800              <1> 	cmp	eax,0
    74 0000081E E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 00000820 5F                  <1> 	pop	edi
    79 00000821 5E                  <1> 	pop	esi
    80 00000822 5A                  <1> 	pop	edx
    81 00000823 59                  <1> 	pop	ecx
    82 00000824 5B                  <1> 	pop	ebx
    83 00000825 58                  <1> 	pop	eax
    84                              <1> 
    85 00000826 89EC                <1> 	mov	esp, ebp
    86 00000828 5D                  <1> 	pop	ebp
    87                              <1> 
    88 00000829 C3                  <1> 	ret
    89                              <1> 
    90 0000082A 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 00000833 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   175                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 0000083A 55                  <1> 	push	ebp
     3 0000083B 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000083D 50                  <1> 	push	eax
     6 0000083E 53                  <1> 	push	ebx
     7                              <1> 
     8 0000083F 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 00000842 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 00000845 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 0000084C [AC080000]53E859FF- <1>
    10 00000854 FFFF6683C414        <1>
    11                              <1> 
    12 0000085A 88E3                <1> 	mov	bl, ah
    13 0000085C 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 00000863 [A9080000]53E842FF- <1>
    13 0000086B FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 00000871 C1E810              <1> 	shr	eax, 16
    17 00000874 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 0000087B [A6080000]50E82AFF- <1>
    17 00000883 FFFF6683C414        <1>
    18                              <1> 
    19 00000889 68[A6080000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 00000891 FF750CFF7508E883FC- <1>
    19 0000089A FFFF6683C410        <1>
    20                              <1> 
    21 000008A0 5B                  <1> 	pop	ebx
    22 000008A1 58                  <1> 	pop	eax
    23                              <1> 
    24 000008A2 89EC                <1> 	mov	esp, ebp
    25 000008A4 5D                  <1> 	pop	ebp
    26                              <1> 
    27 000008A5 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 000008A6 5A5A3A              <1> .hour:	db	"ZZ:"
    31 000008A9 5A5A3A              <1> .min:	db	"ZZ:"
    32 000008AC 5A5A00              <1> .sec:	db	"ZZ", 0
   176                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 000008AF 55                  <1> 	push	ebp
     3 000008B0 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000008B2 53                  <1> 	push	ebx
     6                              <1> 
     7 000008B3 B00A                <1> 	mov	al, 0x0A
     8 000008B5 E670                <1> 	out	0x70, al
     9 000008B7 E471                <1> 	in	al, 0x71
    10                              <1> 
    11 000008B9 A880                <1> 	test	al, 0x80
    12 000008BB 7407                <1> 	je	.10F
    13 000008BD B801000000          <1> 	mov	eax, 1		; data updating. error
    14 000008C2 EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 000008C4 B004                <1> 	mov	al, 0x04	; Hour
    17 000008C6 E670                <1> 	out	0x70, al
    18 000008C8 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 000008CA C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 000008CD B002                <1> 	mov	al, 0x02
    23 000008CF E670                <1> 	out	0x70, al
    24 000008D1 E471                <1> 	in	al, 0x71
    25                              <1> 
    26 000008D3 C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 000008D6 B000                <1> 	mov	al, 0x00
    29 000008D8 E670                <1> 	out	0x70, al
    30 000008DA E471                <1> 	in	al, 0x71
    31                              <1> 
    32 000008DC 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 000008E1 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 000008E4 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 000008E6 B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 000008EB 5B                  <1> 	pop	ebx
    45                              <1> 
    46 000008EC 89EC                <1> 	mov	esp, ebp
    47 000008EE 5D                  <1> 	pop	ebp
    48                              <1> 
    49 000008EF C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   177                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 000008F0 60                  <1> 	pusha		; all registers in stack
     3 000008F1 1E                  <1> 	push	ds
     4 000008F2 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 000008F3 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 000008F7 8ED8                <1> 	mov	ds, ax
     9 000008F9 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 000008FB 68[38030000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 00000903 FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 00000909 B00C                <2>  mov al, %2
    13 0000090B E670                <2>  out %1, al
    14 0000090D E471                <1> 	in	al, 0x71
    15                              <1> 
    16 0000090F B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 00000911 E620                <1> 	out	0x20, al
    18 00000913 E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 00000915 07                  <1> 	pop	es
    21 00000916 1F                  <1> 	pop	ds
    22 00000917 61                  <1> 	popa
    23                              <1> 
    24 00000918 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 00000919 55                  <1> 	push	ebp
    28 0000091A 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 0000091C 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 0000091D B00B                <2>  mov al, %2
    32 0000091F E670                <2>  out %1, al
    33                              <1> 
    34 00000921 E471                <1> 	in	al, 0x71
    35 00000923 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 00000926 E671                <1> 	out	0x71, al
    38                              <1> 
    39 00000928 58                  <1> 	pop	eax
    40                              <1> 
    41 00000929 89EC                <1> 	mov	esp, ebp
    42 0000092B 5D                  <1> 	pop	ebp
    43                              <1> 
    44 0000092C C3                  <1> 	ret
    45                              <1> 
   178                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 0000092D 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 0000092E B011                <2>  mov al, %2
     6 00000930 E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 00000932 B020                <2>  mov al, %2
     7 00000934 E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 00000936 B004                <2>  mov al, %2
     8 00000938 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 0000093A B005                <2>  mov al, %2
     9 0000093C E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 0000093E B0FF                <2>  mov al, %2
    10 00000940 E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 00000942 B011                <2>  mov al, %2
    12 00000944 E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 00000946 B028                <2>  mov al, %2
    13 00000948 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 0000094A B002                <2>  mov al, %2
    14 0000094C E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 0000094E B001                <2>  mov al, %2
    15 00000950 E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 00000952 B0FF                <2>  mov al, %2
    16 00000954 E6A1                <2>  out %1, al
    17                              <1> 
    18 00000956 58                  <1> 	pop	eax
    19                              <1> 
    20 00000957 C3                  <1> 	ret
   179                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 00000958 FB                  <1> 	sti
     3                              <1> 
     4 00000959 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 00000962 19E8B7FBFFFF6683C4- <1>
     4 0000096B 10                  <1>
     5                              <1> 
     6 0000096C 8B0424              <1> 	mov	eax, [esp + 0]
     7 0000096F 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 00000976 [340A0000]50E82FFE- <1>
     7 0000097E FFFF6683C414        <1>
     8                              <1> 	
     9 00000984 8B442404            <1> 	mov	eax, [esp + 4]
    10 00000988 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 0000098F [450A0000]50E816FE- <1>
    10 00000997 FFFF6683C414        <1>
    11                              <1> 	
    12 0000099D 8B442408            <1> 	mov	eax, [esp + 8]
    13 000009A1 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 000009A8 [560A0000]50E8FDFD- <1>
    13 000009B0 FFFF6683C414        <1>
    14                              <1> 	
    15 000009B6 8B44240C            <1> 	mov	eax, [esp +12]
    16 000009BA 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 000009C1 [670A0000]50E8E4FD- <1>
    16 000009C9 FFFF6683C414        <1>
    17                              <1> 
    18 000009CF 68[2D0A0000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 000009D7 00006A106A19E83DFB- <1>
    18 000009E0 FFFF6683C410        <1>
    19 000009E6 68[3E0A0000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 000009EE 00006A116A19E826FB- <1>
    19 000009F7 FFFF6683C410        <1>
    20 000009FD 68[4F0A0000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 00000A05 00006A126A19E80FFB- <1>
    20 00000A0E FFFF6683C410        <1>
    21 00000A14 68[600A0000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 00000A1C 00006A136A19E8F8FA- <1>
    21 00000A25 FFFF6683C410        <1>
    22                              <1> 
    23 00000A2B EBFE                <1> 	jmp	$
    24                              <1> 
    25 00000A2D 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 00000A34 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 00000A3D 00                  <1>
    27 00000A3E 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 00000A45 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 00000A4E 00                  <1>
    29 00000A4F 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 00000A56 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 00000A5F 00                  <1>
    31 00000A60 2020202B31323A      <1> .s4:	db	"   +12:"
    32 00000A67 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 00000A70 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 00000A71 9C                  <1> 	pushf
    37 00000A72 0E                  <1> 	push	cs
    38 00000A73 68[58090000]        <1> 	push	int_stop
    39                              <1> 
    40 00000A78 B8[7E0A0000]        <1> 	mov	eax, .s0
    41 00000A7D CF                  <1> 	iret
    42                              <1> 
    43 00000A7E 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 00000A87 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 00000A8F 55                  <1> 	push	ebp
    47 00000A90 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 00000A92 50                  <1> 	push	eax
    50 00000A93 53                  <1> 	push	ebx
    51 00000A94 51                  <1> 	push	ecx
    52 00000A95 57                  <1> 	push	edi
    53                              <1> 
    54 00000A96 8D05[710A0000]      <1> 	lea	eax, [int_default]
    55 00000A9C BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000AA1 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 00000AA3 B900010000          <1> 	mov	ecx, 256
    65 00000AA8 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000AAD 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 00000AAF 894704              <1> 	mov	[edi + 4], eax	; top
    69 00000AB2 83C708              <1> 	add	edi, 8
    70 00000AB5 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 00000AB7 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000ABE 5F                  <1> 	pop	edi
    75 00000ABF 59                  <1> 	pop	ecx
    76 00000AC0 5B                  <1> 	pop	ebx
    77 00000AC1 58                  <1> 	pop	eax
    78                              <1> 
    79 00000AC2 89EC                <1> 	mov	esp, ebp
    80 00000AC4 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00000AC5 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 00000AC6 9C                  <1> 	pushf
    86 00000AC7 0E                  <1> 	push	cs
    87 00000AC8 68[58090000]        <1> 	push	int_stop
    88                              <1> 
    89 00000ACD B8[D30A0000]        <1> 	mov	eax, .s0
    90 00000AD2 CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 00000AD3 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 00000ADC 44495620203E2000    <1>
   180                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 00000AE4 60                  <1> 	pusha
     3 00000AE5 1E                  <1> 	push	ds
     4 00000AE6 06                  <1> 	push	es
     5                              <1> 
     6 00000AE7 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 00000AEB 8ED8                <1> 	mov	ds, ax
     8 00000AED 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000AEF E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 00000AF1 5068[080B0000]E854- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 00000AF9 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 00000B00 B020                <2>  mov al, %2
    16 00000B02 E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 00000B04 07                  <1> 	pop	es
    20 00000B05 1F                  <1> 	pop	ds
    21 00000B06 61                  <1> 	popa
    22                              <1> 
    23 00000B07 CF                  <1> 	iret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000B08 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   181                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   182                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 00000B20 55                  <1> 	push	ebp
     4 00000B21 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000B23 56                  <1> 	push	esi
     7 00000B24 57                  <1> 	push	edi
     8 00000B25 53                  <1> 	push	ebx
     9                              <1> 
    10 00000B26 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000B29 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 00000B2C B800000000          <1> 	mov	eax, 0
    14 00000B31 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000B33 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000B36 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000B38 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 00000B3C 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 00000B3E 43                  <1> 	inc	ebx
    23 00000B3F 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 00000B42 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000B44 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000B49 5B                  <1> 	pop	ebx
    30 00000B4A 5F                  <1> 	pop	edi
    31 00000B4B 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000B4C 89EC                <1> 	mov	esp, ebp
    34 00000B4E 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000B4F C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 00000B50 55                  <1> 	push	ebp
    40 00000B51 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 00000B53 56                  <1> 	push	esi
    43 00000B54 53                  <1> 	push	ebx
    44 00000B55 51                  <1> 	push	ecx
    45                              <1> 
    46 00000B56 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000B59 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000B5C 89D9                <1> 	mov	ecx, ebx
    50 00000B5E 41                  <1> 	inc	ecx
    51 00000B5F 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 00000B62 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000B64 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000B66 8A450C              <1> 	mov	al, [ebp +12]
    60 00000B69 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000B6D 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 00000B70 B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000B75 59                  <1> 	pop	ecx
    66 00000B76 5B                  <1> 	pop	ebx
    67 00000B77 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000B78 89EC                <1> 	mov	esp, ebp
    70 00000B7A 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000B7B C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000B7C 55                  <1> 	push	ebp
    77 00000B7D 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 00000B7F 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 00000B80 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 00000B83 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000B86 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000B89 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000B8C 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 00000B8F B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000B94 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000B95 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000B98 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000B9B 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000BA2 [CC0B0000]50E803FC- <1>
    95 00000BAA FFFF6683C414        <1>
    96 00000BB0 68[CC0B0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000BB8 52E861F9FFFF6683C4- <1>
    96 00000BC1 10                  <1>
    97                              <1> 
    98 00000BC2 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000BC5 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000BC7 61                  <1> 	popa
   104                              <1> 
   105 00000BC8 89EC                <1> 	mov	esp, ebp
   106 00000BCA 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000BCB C3                  <1> 	ret
   109                              <1> 
   110 00000BCC 2D2D00              <1> .tmp:	db	"--",0
   183                                  %include	"../modules/protect/call_gate.s"
     1                              <1> call_gate:
     2                              <1> 	;retf	4 * 4
     3                              <1> ; if SS_GATE_0 called
     4 00000BCF 55                  <1> 	push	ebp
     5 00000BD0 89E5                <1> 	mov	ebp, esp
     6                              <1> 
     7 00000BD2 60                  <1> 	pusha
     8 00000BD3 1E                  <1> 	push	ds
     9 00000BD4 06                  <1> 	push	es
    10                              <1> 
    11 00000BD5 66B81000            <1> 	mov	ax, 0x0010
    12 00000BD9 8ED8                <1> 	mov	ds, ax
    13 00000BDB 8EC0                <1> 	mov	es, ax
    14                              <1> 
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_1
    17                              <1> 	;je	.11L
    18                              <1> 
    19                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t0
    20                              <1> 	;jmp	.10E
    21                              <1> .11L:
    22                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t1
    23                              <1> .10E:
    24                              <1> 		
    25                              <1> 	;cdecl	itoa, esp, .t2, 8, 16, 0b0100
    26                              <1> 	;cdecl	draw_str, 0, 1, 0x010F, .t2
    27                              <1> 
    28                              <1> 	;cdecl	itoa, dword [ESP_COUNTER], .t3, 8, 16, 0b0100
    29                              <1> 	;cdecl	draw_str, 0, 2, 0x010F, .t3
    30                              <1> 	
    31                              <1> 
    32                              <1> 
    33                              <1> 	; ebp + 0 -- EBP
    34                              <1> 	; ebp + 4 -- EIP
    35                              <1> 	; ebp + 8 -- CS
    36 00000BDD 8B450C              <1> 	mov	eax, dword[ebp +12]
    37 00000BE0 8B5D10              <1> 	mov	ebx, dword[ebp +16]
    38 00000BE3 8B4D14              <1> 	mov	ecx, dword[ebp +20]
    39 00000BE6 8B5518              <1> 	mov	edx, dword[ebp +24]
    40 00000BE9 52515350E82DF9FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx
    40 00000BF2 6683C410            <1>
    41                              <1> 	; wrapper
    42                              <1> 
    43 00000BF6 07                  <1> 	pop	es
    44 00000BF7 1F                  <1> 	pop	ds
    45 00000BF8 61                  <1> 	popa
    46                              <1> 
    47 00000BF9 89EC                <1> 	mov	esp, ebp
    48 00000BFB 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000BFC CA1000              <1> 	retf	4 * 4	; 4 DWORDs
    51                              <1> 
    52                              <1> 
    53 00000BFF 7461736B5F3000      <1> .t0:	db	"task_0",0
    54 00000C06 7461736B5F3100      <1> .t1:	db	"task_1",0
    55 00000C0D 2D2D2D2D2D2D2D2D00  <1> .t2:	db	"--------", 0
    56 00000C16 2D2D2D2D2D2D2D2D00  <1> .t3:	db	"--------", 0
   184                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ; system calls
     2                              <1> trap_gate_81:	; system call 81, draw_char
     3                              <1> %ifdef	USE_TEST_AND_SET
     4 00000C1F 68[6C0C0000]E84B00- <1> 	cdecl	test_and_set, IN_USE_81
     4 00000C27 00006683C404        <1>
     5                              <1> %endif
     6 00000C2D 50525153E8EAF7FFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
     6 00000C36 6683C410            <1>
     7                              <1> %ifdef	USE_TEST_AND_SET
     8 00000C3A C705[6C0C0000]0000- <1> 	mov	[IN_USE_81], dword 0
     8 00000C42 0000                <1>
     9                              <1> %endif
    10 00000C44 CF                  <1> 	iret
    11                              <1> 
    12                              <1> trap_gate_82:
    13                              <1> %ifdef	USE_TEST_AND_SET
    14 00000C45 68[700C0000]E82500- <1> 	cdecl	test_and_set, IN_USE_82
    14 00000C4D 00006683C404        <1>
    15                              <1> %endif
    16 00000C53 535251E87CF9FFFF66- <1> 	cdecl	draw_pixel, ecx, edx, ebx
    16 00000C5C 83C40C              <1>
    17                              <1> %ifdef	USE_TEST_AND_SET
    18 00000C5F C705[700C0000]0000- <1> 	mov	[IN_USE_82], dword 0
    18 00000C67 0000                <1>
    19                              <1> %endif
    20 00000C69 CF                  <1> 	iret
    21                              <1> 
    22 00000C6A 00<rept>            <1> ALIGN	4,		db	0
    23 00000C6C 00000000            <1> IN_USE_81:		dd	0
    24 00000C70 00000000            <1> IN_USE_82:		dd	0
   185                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2 00000C74 55                  <1> 	push	ebp
     3 00000C75 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000C77 50                  <1> 	push	eax
     6 00000C78 53                  <1> 	push	ebx
     7                              <1> 
     8 00000C79 B800000000          <1> 	mov	eax, 0		; set bit
     9 00000C7E 8B5D08              <1> 	mov	ebx, [ebp + 8]	; global variable
    10                              <1> 
    11                              <1> .10L:
    12 00000C81 F00FAB03            <1> 	lock	bts [ebx], eax
    13 00000C85 7307                <1> 	jnc	.10E		; we can use registers
    14                              <1> .12L:
    15 00000C87 0FA303              <1> 	bt	[ebx], eax
    16 00000C8A 72FB                <1> 	jc	.12L		; we can not use
    17                              <1> 
    18 00000C8C EBF3                <1> 	jmp	.10L
    19                              <1> .10E:
    20                              <1> 	
    21 00000C8E 5B                  <1> 	pop	ebx
    22 00000C8F 58                  <1> 	pop	eax
    23                              <1> 
    24 00000C90 89EC                <1> 	mov	esp, ebp
    25 00000C92 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000C93 C3                  <1> 	ret
    28                              <1> 
   186                                  %include	"../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 	; eax : return value
     3                              <1> 	; ebx : segment selector
     4                              <1> 
     5 00000C94 8B83[E2120000]      <1> 	mov	eax, [GDT + ebx + 2]
     6 00000C9A C1E008              <1> 	shl	eax, 8
     7 00000C9D 8A83[E7120000]      <1> 	mov	al, [GDT + ebx + 7]
     8 00000CA3 C1C808              <1> 	ror	eax, 8
     9                              <1> 
    10 00000CA6 C3                  <1> 	ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 	; eax : tss address
    14 00000CA7 DD7068              <1> 	fnsave	[eax + 104]
    15 00000CAA C780D4000000010000- <1> 	mov	[eax + 104 + 108], dword 1	; store flag or present flag(?)
    15 00000CB3 00                  <1>
    16                              <1> 	
    17 00000CB4 C3                  <1> 	ret
    18                              <1> 
    19                              <1> load_fpu_context:
    20 00000CB5 83B8D400000000      <1> 	cmp	[eax + 104 + 108], dword 0
    21 00000CBC 7505                <1> 	jne	.10F
    22 00000CBE 9BDBE3              <1> 	finit					; not initialized yet
    23 00000CC1 EB03                <1> 	jmp	.10E
    24                              <1> .10F:
    25 00000CC3 DD6068              <1> 	frstor	[eax + 104]
    26                              <1> .10E:
    27 00000CC6 C3                  <1> 	ret
    28                              <1> 
    29                              <1> int_nm:
    30 00000CC7 60                  <1> 	pusha
    31 00000CC8 06                  <1> 	push	es
    32 00000CC9 1E                  <1> 	push	ds
    33                              <1> 
    34 00000CCA 66B81000            <1> 	mov	ax, DS_KERNEL
    35 00000CCE 8EC0                <1> 	mov	es, ax
    36 00000CD0 8ED8                <1> 	mov	ds, ax
    37                              <1> 
    38 00000CD2 0F06                <1> 	clts
    39                              <1> 
    40 00000CD4 8B3D[200D0000]      <1> 	mov	edi, [.last_tss]
    41 00000CDA 0F00CE              <1> 	str	esi
    42 00000CDD 83E6F8              <1> 	and	esi, ~0x0007	; exclude TI,RPL bits
    43                              <1> 
    44 00000CE0 83FF00              <1> 	cmp	edi, 0		; first use
    45 00000CE3 7420                <1> 	je	.10F
    46                              <1> 
    47 00000CE5 39FE                <1> 	cmp	esi, edi
    48 00000CE7 741A                <1> 	je	.12E
    49                              <1> 
    50 00000CE9 FA                  <1> 	cli
    51                              <1> 
    52 00000CEA 89FB                <1> 	mov	ebx, edi
    53 00000CEC E8A3FFFFFF          <1> 	call	get_tss_base	; eax is address to tss
    54 00000CF1 E8B1FFFFFF          <1> 	call	save_fpu_context; eax used here
    55                              <1> 
    56 00000CF6 89F3                <1> 	mov	ebx, esi
    57 00000CF8 E897FFFFFF          <1> 	call	get_tss_base
    58 00000CFD E8B3FFFFFF          <1> 	call	load_fpu_context
    59                              <1> 
    60 00000D02 FB                  <1> 	sti
    61                              <1> .12E:
    62 00000D03 EB0E                <1> 	jmp	.10E
    63                              <1> .10F:
    64 00000D05 FA                  <1> 	cli
    65                              <1> 
    66 00000D06 89F3                <1> 	mov	ebx, esi
    67 00000D08 E887FFFFFF          <1> 	call	get_tss_base
    68 00000D0D E8A3FFFFFF          <1> 	call	load_fpu_context
    69                              <1> 
    70 00000D12 FB                  <1> 	sti
    71                              <1> .10E:
    72                              <1> 
    73 00000D13 8935[200D0000]      <1> 	mov	[.last_tss], esi
    74                              <1> 
    75 00000D19 1F                  <1> 	pop	ds
    76 00000D1A 07                  <1> 	pop	es
    77 00000D1B 61                  <1> 	popa
    78                              <1> 
    79 00000D1C CF                  <1> 	iret
    80                              <1> 
    81 00000D1D 00<rept>            <1> ALIGN	4,	db	0
    82 00000D20 00000000            <1> .last_tss:	dd	0
   187                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2 00000D24 55                  <1> 	push	ebp
     3 00000D25 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000D27 50                  <1> 	push	eax
     6 00000D28 51                  <1> 	push	ecx
     7                              <1> 
     8 00000D29 8B4D08              <1> 	mov	ecx, [ebp + 8]
     9 00000D2C A1[24120000]        <1> 	mov	eax, [TIMER_COUNT]
    10                              <1> .10L:
    11 00000D31 3905[24120000]      <1> 	cmp	[TIMER_COUNT], eax
    12 00000D37 74F8                <1> 	je	.10L
    13 00000D39 40                  <1> 	inc	eax		; per 10ms
    14 00000D3A E2F5                <1> 	loop	.10L		; 10ms * ecx]
    15                              <1> 
    16 00000D3C 59                  <1> 	pop	ecx
    17 00000D3D 58                  <1> 	pop	eax
    18                              <1> 
    19 00000D3E 89EC                <1> 	mov	esp, ebp
    20 00000D40 5D                  <1> 	pop	ebp
    21                              <1> 
    22 00000D41 C3                  <1> 	ret
    23                              <1> 
   188                                  %include	"../modules/protect/ctrl_alt_end.s"
     1                              <1> ctrl_alt_end:
     2 00000D42 55                  <1> 	push	ebp
     3 00000D43 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000D45 8B4508              <1> 	mov	eax, [ebp + 8]
     6 00000D48 0FBAF007            <1> 	btr	eax, 7		; press : 0*******, pull : 1*******
     7 00000D4C 7209                <1> 	jc	.10F
     8 00000D4E 0FAB05[940D0000]    <1> 	bts	[.key_state], eax	; set
     9 00000D55 EB07                <1> 	jmp	.10E
    10                              <1> .10F:
    11 00000D57 0FBB05[940D0000]    <1> 	btc	[.key_state], eax	; clear
    12                              <1> .10E:
    13                              <1> 	; key press check
    14 00000D5E B81D000000          <1> 	mov	eax, 0x1D		; ctrl
    15 00000D63 0FA305[940D0000]    <1> 	bt	[.key_state], eax
    16 00000D6A 7321                <1> 	jnc	.20E			; not press
    17                              <1> 
    18 00000D6C B838000000          <1> 	mov	eax, 0x38
    19 00000D71 0FA305[940D0000]    <1> 	bt	[.key_state], eax
    20 00000D78 7313                <1> 	jnc	.20E
    21                              <1> 
    22 00000D7A B84F000000          <1> 	mov	eax, 0x4F
    23 00000D7F 0FA305[940D0000]    <1> 	bt	[.key_state], eax
    24 00000D86 7305                <1> 	jnc	.20E
    25                              <1> 
    26 00000D88 B8FFFFFFFF          <1> 	mov	eax, -1			; success
    27                              <1> .20E:
    28 00000D8D C1F808              <1> 	sar	eax, 8
    29                              <1> 
    30 00000D90 89EC                <1> 	mov	esp, ebp
    31 00000D92 5D                  <1> 	pop	ebp
    32                              <1> 
    33 00000D93 C3                  <1> 	ret
    34                              <1> 
    35                              <1> 
    36 00000D94 00<rept>            <1> .key_state:	times	32	db	0
   189                                  %include	"../modules/protect/power_off.s"
     1                              <1> power_off:
     2 00000DB4 55                  <1> 	push	ebp
     3 00000DB5 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000DB7 50                  <1> 	push	eax
     6 00000DB8 53                  <1> 	push	ebx
     7 00000DB9 51                  <1> 	push	ecx
     8 00000DBA 52                  <1> 	push	edx
     9 00000DBB 56                  <1> 	push	esi
    10                              <1> 
    11 00000DBC 68[3F0F0000]680F02- <1> 	cdecl	draw_str, 25, 14, 0x020F, .s0
    11 00000DC4 00006A0E6A19E850F7- <1>
    11 00000DCD FFFF6683C410        <1>
    12                              <1> 
    13 00000DD3 0F20C0              <1> 	mov	eax, cr0
    14 00000DD6 25FFFFFF7F          <1> 	and	eax, 0x7FFF_FFFF
    15 00000DDB 0F22C0              <1> 	mov	cr0, eax
    16 00000DDE EB00                <1> 	jmp	$ + 2
    17                              <1> 
    18 00000DE0 A1047E0000          <1> 	mov	eax, [0x7C00 + 512 + 4]
    19 00000DE5 8B1D087E0000        <1> 	mov	ebx, [0x7C00 + 512 + 8]
    20 00000DEB 83F800              <1> 	cmp	eax, 0
    21 00000DEE 7473                <1> 	je	.10E
    22                              <1> 	
    23 00000DF0 68525344545350E86C- <1> 	cdecl	acpi_find, eax, ebx, 'RSDT'
    23 00000DF9 0100006683C40C      <1>
    24 00000E00 83F800              <1> 	cmp	eax, 0
    25 00000E03 745E                <1> 	je	.10E
    26                              <1> 
    27 00000E05 684641435050E88601- <1> 	cdecl	find_rsdt_entry, eax, 'FACP'
    27 00000E0E 00006683C408        <1>
    28 00000E14 83F800              <1> 	cmp	eax, 0
    29 00000E17 744A                <1> 	je	.10E
    30                              <1> 
    31 00000E19 8B5828              <1> 	mov	ebx, [eax + 40]	; DSDT address
    32 00000E1C 83FB00              <1> 	cmp	ebx, 0
    33 00000E1F 7442                <1> 	je	.10E
    34                              <1> 
    35 00000E21 8B4840              <1> 	mov	ecx, [eax + 64] ; PM1a_CNT_BLK
    36 00000E24 890D[5C0F0000]      <1> 	mov	[PM1a_CNT_BLK], ecx
    37                              <1> 
    38 00000E2A 8B4844              <1> 	mov	ecx, [eax + 68]
    39 00000E2D 890D[600F0000]      <1> 	mov	[PM1b_CNT_BLK], ecx
    40                              <1> 
    41 00000E33 8B4B04              <1> 	mov	ecx, [ebx + 4]	; DSDT table length
    42 00000E36 83E924              <1> 	sub	ecx, 36		; exclude header
    43 00000E39 83C324              <1> 	add	ebx, 36		; exclude header
    44                              <1> 
    45 00000E3C 685F53355F5153E820- <1> 	cdecl	acpi_find, ebx, ecx, '_S5_'
    45 00000E45 0100006683C40C      <1>
    46 00000E4C 83F800              <1> 	cmp	eax, 0
    47 00000E4F 7412                <1> 	je	.10E		; S5 package not found
    48                              <1> 
    49 00000E51 83C004              <1> 	add	eax, 4
    50 00000E54 50E86B0100006683C4- <1> 	cdecl	acpi_package_value, eax
    50 00000E5D 04                  <1>
    51 00000E5E A3[640F0000]        <1> 	mov	[S5_PACKAGE], eax
    52                              <1> 
    53                              <1> .10E:
    54                              <1> 	; power off failed
    55                              <1> 
    56 00000E63 0F20C0              <1> 	mov	eax, cr0
    57 00000E66 0D00000080          <1> 	or	eax, 0x8000_0000
    58 00000E6B 0F22C0              <1> 	mov	cr0, eax
    59 00000E6E EB00                <1> 	jmp	$ + 2
    60                              <1> 
    61 00000E70 8B15[5C0F0000]      <1> 	mov	edx, [PM1a_CNT_BLK]
    62 00000E76 83FA00              <1> 	cmp	edx, 0
    63 00000E79 0F8495000000        <1> 	je	.20E
    64                              <1> 
    65 00000E7F 68[550F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s3
    65 00000E87 00006A0E6A26E88DF6- <1>
    65 00000E90 FFFF6683C410        <1>
    66 00000E96 6A64E887FEFFFF6683- <1> 	cdecl	wait_tick, 100
    66 00000E9F C404                <1>
    67 00000EA1 68[520F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s2
    67 00000EA9 00006A0E6A26E86BF6- <1>
    67 00000EB2 FFFF6683C410        <1>
    68 00000EB8 6A64E865FEFFFF6683- <1> 	cdecl	wait_tick, 100
    68 00000EC1 C404                <1>
    69 00000EC3 68[4F0F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s1
    69 00000ECB 00006A0E6A26E849F6- <1>
    69 00000ED4 FFFF6683C410        <1>
    70 00000EDA 6A64E843FEFFFF6683- <1> 	cdecl	wait_tick, 100
    70 00000EE3 C404                <1>
    71                              <1> 	
    72 00000EE5 660FB605[640F0000]  <1> 	movzx	ax, [S5_PACKAGE.0]
    73 00000EED 66C1E00A            <1> 	shl	ax, 10
    74 00000EF1 660D0020            <1> 	or	ax, 1 << 13
    75 00000EF5 66EF                <1> 	out	dx, ax
    76                              <1> 
    77 00000EF7 8B15[600F0000]      <1> 	mov	edx, [PM1b_CNT_BLK]
    78 00000EFD 83FA00              <1> 	cmp	edx, 0
    79 00000F00 7412                <1> 	je	.20E
    80                              <1> 
    81 00000F02 660FB605[650F0000]  <1> 	movzx	ax, [S5_PACKAGE.1]
    82 00000F0A 66C1E00A            <1> 	shl	ax, 10
    83 00000F0E 660D0020            <1> 	or	ax, 1 << 13
    84 00000F12 66EF                <1> 	out	dx, ax
    85                              <1> .20E:
    86 00000F14 6A64E809FEFFFF6683- <1> 	cdecl	wait_tick, 100
    86 00000F1D C404                <1>
    87 00000F1F 68[580F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s4
    87 00000F27 00006A0E6A26E8EDF5- <1>
    87 00000F30 FFFF6683C410        <1>
    88                              <1> 
    89 00000F36 5E                  <1> 	pop	esi
    90 00000F37 5A                  <1> 	pop	edx
    91 00000F38 59                  <1> 	pop	ecx
    92 00000F39 5B                  <1> 	pop	ebx
    93 00000F3A 58                  <1> 	pop	eax
    94                              <1> 
    95 00000F3B 89EC                <1> 	mov	esp, ebp
    96 00000F3D 5D                  <1> 	pop	ebp
    97                              <1> 
    98 00000F3E C3                  <1> 	ret
    99                              <1> 	
   100 00000F3F 506F776572206F6666- <1> .s0:		db	"Power off...   ", 0
   100 00000F48 2E2E2E20202000      <1>
   101 00000F4F 203100              <1> .s1:		db	" 1", 0
   102 00000F52 203200              <1> .s2:		db	" 2", 0
   103 00000F55 203300              <1> .s3:		db	" 3", 0
   104 00000F58 4E4700              <1> .s4:		db	"NG", 0
   105                              <1> 
   106 00000F5B 00                  <1> ALIGN	4,	db	0
   107 00000F5C 00000000            <1> PM1a_CNT_BLK:	dd	0
   108 00000F60 00000000            <1> PM1b_CNT_BLK:	dd	0
   109                              <1> S5_PACKAGE:
   110 00000F64 00                  <1> .0:		db	0
   111 00000F65 00                  <1> .1:		db	0
   112 00000F66 00                  <1> .2:		db	0
   113 00000F67 00                  <1> .3:		db	0
   114                              <1> 
   115                              <1> 
   116                              <1> 
   190                                  %include	"../modules/protect/acpi_find.s"
     1                              <1> acpi_find:
     2 00000F68 55                  <1> 	push	ebp
     3 00000F69 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000F6B 50                  <1> 	push	eax
     6 00000F6C 51                  <1> 	push	ecx
     7 00000F6D 57                  <1> 	push	edi
     8                              <1> 
     9 00000F6E 8B7D08              <1> 	mov	edi, [ebp + 8]	; address
    10 00000F71 8B4D0C              <1> 	mov	ecx, [ebp +12]	; length
    11 00000F74 8B4510              <1> 	mov	eax, [ebp +16]	; search string
    12                              <1> 
    13 00000F77 FC                  <1> 	cld
    14                              <1> .10L:
    15 00000F78 F2AE                <1> 	repne	scasb		; compare only 1 byte(AL)
    16                              <1> 
    17 00000F7A 83F900              <1> 	cmp	ecx, 0
    18 00000F7D 7507                <1> 	jnz	.11E
    19 00000F7F B800000000          <1> 	mov	eax, 0
    20 00000F84 EB09                <1> 	jmp	.10E		; failed
    21                              <1> .11E:
    22 00000F86 263B47FF            <1> 	cmp	eax, [es:edi - 1]	; compare 4 bytes(name)
    23 00000F8A 75EC                <1> 	jne	.10L
    24                              <1> 	
    25 00000F8C 4F                  <1> 	dec	edi
    26 00000F8D 89F8                <1> 	mov	eax, edi
    27                              <1> .10E:
    28                              <1> 	
    29 00000F8F 5F                  <1> 	pop	edi
    30 00000F90 59                  <1> 	pop	ecx
    31 00000F91 5B                  <1> 	pop	ebx
    32                              <1> 
    33 00000F92 89EC                <1> 	mov	esp, ebp
    34 00000F94 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000F95 C3                  <1> 	ret
    37                              <1> 
   191                                  %include	"../modules/protect/find_rsdt_entry.s"
     1                              <1> find_rsdt_entry:
     2 00000F96 55                  <1> 	push	ebp
     3 00000F97 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000F99 53                  <1> 	push	ebx
     6 00000F9A 51                  <1> 	push	ecx
     7 00000F9B 56                  <1> 	push	esi
     8 00000F9C 57                  <1> 	push	edi
     9                              <1> 
    10 00000F9D 8B7508              <1> 	mov	esi, [ebp + 8]	; table address
    11 00000FA0 8B4D0C              <1> 	mov	ecx, [ebp +12]	; name
    12                              <1> 
    13 00000FA3 BB00000000          <1> 	mov	ebx, 0
    14                              <1> 
    15 00000FA8 89F7                <1> 	mov	edi, esi
    16 00000FAA 037E04              <1> 	add	edi, [esi + 4]	; [esi + 4] is header length
    17 00000FAD 83C624              <1> 	add	esi, 36
    18                              <1> 	
    19                              <1> 	; search from esi to edi
    20                              <1> .10L:
    21 00000FB0 39FE                <1> 	cmp	esi, edi
    22 00000FB2 7D07                <1> 	jge	.10E
    23                              <1> 
    24 00000FB4 AD                  <1> 	lodsd			; eax = [esi]; esi++
    25                              <1> 
    26 00000FB5 3908                <1> 	cmp	[eax], ecx
    27 00000FB7 75F7                <1> 	jne	.10L
    28 00000FB9 89C3                <1> 	mov	ebx, eax
    29                              <1> .10E:
    30 00000FBB 89D8                <1> 	mov	eax, ebx	
    31                              <1> 
    32 00000FBD 5F                  <1> 	pop	edi
    33 00000FBE 5E                  <1> 	pop	esi
    34 00000FBF 59                  <1> 	pop	ecx
    35 00000FC0 5B                  <1> 	pop	ebx
    36                              <1> 
    37 00000FC1 89EC                <1> 	mov	esp, ebp
    38 00000FC3 5D                  <1> 	pop	ebp
    39                              <1> 
    40 00000FC4 C3                  <1> 	ret
   192                                  %include	"../modules/protect/acpi_package_value.s"
     1                              <1> acpi_package_value:
     2 00000FC5 55                  <1> 	push	ebp
     3 00000FC6 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000FC8 56                  <1> 	push	esi
     6                              <1> 
     7 00000FC9 8B7508              <1> 	mov	esi, [ebp + 8]
     8                              <1> 
     9 00000FCC 46                  <1> 	inc	esi
    10 00000FCD 46                  <1> 	inc	esi
    11 00000FCE 46                  <1> 	inc	esi
    12                              <1> 
    13                              <1> 	; see 343p
    14 00000FCF 8A06                <1> 	mov	al, [esi]
    15 00000FD1 3C0B                <1> 	cmp	al, 0x0B
    16 00000FD3 740A                <1> 	je	.C0B
    17 00000FD5 3C0C                <1> 	cmp	al, 0x0C
    18 00000FD7 7406                <1> 	je	.C0C
    19 00000FD9 3C0E                <1> 	cmp	al, 0x0E
    20 00000FDB 7402                <1> 	je	.C0E
    21 00000FDD EB08                <1> 	jmp	.C0A
    22                              <1> .C0B:
    23                              <1> .C0C:
    24                              <1> .C0E:
    25 00000FDF 8A4601              <1> 	mov	al, [esi + 1]
    26 00000FE2 8A6602              <1> 	mov	ah, [esi + 2]
    27 00000FE5 EB13                <1> 	jmp	.10E
    28                              <1> .C0A:
    29 00000FE7 3C0A                <1> 	cmp	al, 0x0A
    30 00000FE9 7504                <1> 	jne	.11E
    31 00000FEB 8A4601              <1> 	mov	al, [esi + 1]
    32 00000FEE 46                  <1> 	inc	esi
    33                              <1> .11E:
    34 00000FEF 46                  <1> 	inc	esi
    35                              <1> 
    36 00000FF0 8A26                <1> 	mov	ah, [esi]
    37 00000FF2 80FC0A              <1> 	cmp	ah, 0x0A
    38 00000FF5 7503                <1> 	jne	.12E
    39 00000FF7 8A6601              <1> 	mov	ah, [esi + 1]
    40                              <1> .12E:
    41                              <1> .10E:
    42 00000FFA 5E                  <1> 	pop	esi
    43                              <1> 
    44 00000FFB 89EC                <1> 	mov	esp, ebp
    45 00000FFD 5D                  <1> 	pop	ebp
    46                              <1> 
    47 00000FFE C3                  <1> 	ret
    48                              <1> 	
    49                              <1> 
   193                                  %include	"../modules/protect/draw_num.s"
     1                              <1> draw_num:	; draw_num(num, x, y)
     2 00000FFF 55                  <1> 	push	ebp
     3 00001000 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00001002 6A046A106A1068-     <1> 	cdecl	itoa, dword [ebp + 8], .t1, 16, 16, 0b0100
     5 00001009 [38100000]FF7508E8- <1>
     5 00001011 9AF7FFFF6683C414    <1>
     6 00001019 68[36100000]68010F- <1> 	cdecl	draw_str, dword [ebp +12], dword [ebp +16], 0x0F01, .t0
     6 00001021 0000FF7510FF750CE8- <1>
     6 0000102A F1F4FFFF6683C410    <1>
     7                              <1> 
     8 00001032 89EC                <1> 	mov	esp, ebp
     9 00001034 5D                  <1> 	pop	ebp
    10                              <1> 	
    11 00001035 C3                  <1> 	ret
    12                              <1> 
    13 00001036 3078                <1> .t0:	db	"0x"
    14 00001038 2D2D2D2D2D2D2D2D2D- <1> .t1:	db	"----------------", 0
    14 00001041 2D2D2D2D2D2D2D00    <1>
    15                              <1> 
    16                              <1> draw_num_pixel:	; draw_num_pixel(num, x, y)
    17 00001049 55                  <1> 	push	ebp
    18 0000104A 89E5                <1> 	mov	ebp, esp
    19                              <1> 
    20 0000104C 6A046A106A0168-     <1> 	cdecl	itoa, dword[ebp + 8], .t0, 1, 16, 0b0100
    20 00001053 [80100000]FF7508E8- <1>
    20 0000105B 50F7FFFF6683C414    <1>
    21 00001063 68[80100000]68010F- <1> 	cdecl	draw_str, dword[ebp +12], dword[ebp +16], 0x0F01, .t0
    21 0000106B 0000FF7510FF750CE8- <1>
    21 00001074 A7F4FFFF6683C410    <1>
    22                              <1> 
    23 0000107C 89EC                <1> 	mov	esp, ebp
    24 0000107E 5D                  <1> 	pop	ebp
    25                              <1> 
    26 0000107F C3                  <1> 	ret
    27                              <1> 
    28 00001080 2D00                <1> .t0:	db	"-", 0
   194                                  %include	"../modules/protect/panic_handler.s"
     1                              <1> panic_handler : 
     2 00001082 CDFF                <1> 	int	0xFF
     3 00001084 C3                  <1> 	ret
     4                              <1> 
     5                              <1> panic:
     6 00001085 60                  <1> 	pusha
     7 00001086 1E                  <1> 	push	ds
     8 00001087 06                  <1> 	push	es
     9                              <1> 
    10 00001088 66B81000            <1> 	mov	ax, 0x0010
    11 0000108C 8ED8                <1> 	mov	ds, ax
    12 0000108E 8EC0                <1> 	mov	es, ax
    13                              <1> 
    14 00001090 68[AA100000]6A0C6A- <1> 	cdecl	draw_str, 25, 13, 0x000c, .t0
    14 00001098 0D6A19E87FF4FFFF66- <1>
    14 000010A1 83C410              <1>
    15                              <1> 
    16 000010A4 07                  <1> 	pop	es
    17 000010A5 1F                  <1> 	pop	ds
    18                              <1> 
    19 000010A6 61                  <1> 	popa
    20                              <1> 
    21 000010A7 EBFE                <1> 	jmp	$
    22                              <1> 
    23 000010A9 CF                  <1> 	iret
    24                              <1> 
    25 000010AA 525553542050616E69- <1> .t0:	db	"RUST Panic!!",0
    25 000010B3 63212100            <1>
    26                              <1> 
    27                              <1> 
   195                                  ;%include	"../modules/protect/int_pf.s"
   196                                  %include	"modules/paging.s"
     1                              <1> page_set_4m:
     2 000010B7 55                  <1> 	push	ebp
     3 000010B8 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 000010BA 60                  <1> 	pusha
     6                              <1> 
     7 000010BB FC                  <1> 	cld
     8 000010BC 8B7D08              <1> 	mov	edi, [ebp + 8]
     9 000010BF B800000000          <1> 	mov	eax, 0x00000000		; null page directory
    10 000010C4 B900040000          <1> 	mov	ecx, 1024		; 1024 directories
    11 000010C9 F3AB                <1> 	rep	stosd
    12                              <1> 
    13 000010CB 89F8                <1> 	mov	eax, edi		; we use memory after page directory
    14 000010CD 2500F0FFFF          <1> 	and	eax, ~0x0000_0FFF
    15 000010D2 83C807              <1> 	or	eax, 0b0000_0111	; enable read write
    16                              <1> 
    17 000010D5 898700F0FFFF        <1> 	mov	[edi - (1024 * 4)], eax
    18                              <1> 	
    19 000010DB B807000000          <1> 	mov	eax, 0x0000_0007
    20 000010E0 B900040000          <1> 	mov	ecx, 1024		; 1024 pages
    21                              <1> .10L:
    22 000010E5 AB                  <1> 	stosd
    23 000010E6 0500100000          <1> 	add	eax, 0x0000_1000
    24 000010EB E2F8                <1> 	loop	.10L
    25                              <1> 
    26 000010ED 61                  <1> 	popa
    27                              <1> 
    28 000010EE 89EC                <1> 	mov	esp, ebp
    29 000010F0 5D                  <1> 	pop	ebp
    30                              <1> 
    31 000010F1 C3                  <1> 	ret
    32                              <1> 
    33 000010F2 2D2D2D2D2D2D2D2D2D- <1> .t0:	db	"----------------", 0
    33 000010FB 2D2D2D2D2D2D2D00    <1>
    34                              <1> 
    35                              <1> init_page:
    36 00001103 60                  <1> 	pusha
    37 00001104 6800501000E8A9FFFF- <1> 	cdecl	page_set_4m, CR3_BASE
    37 0000110D FF6683C404          <1>
    38 00001112 6800002000E89BFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_4
    38 0000111B FF6683C404          <1>
    39 00001120 6800202000E88DFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_5
    39 00001129 FF6683C404          <1>
    40 0000112E 6800402000E87FFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_6
    40 00001137 FF6683C404          <1>
    41 0000113C C7051C641000000000- <1> 	mov [CR3_BASE + 0x1000 + 0x107 * 4], dword 0
    41 00001145 00                  <1>
    42 00001146 C7051C142000078010- <1> 	mov [CR3_TASK_4 + 0x1000 + 0x107 * 4], dword PARAM_TASK_4 + 7
    42 0000114F 00                  <1>
    43 00001150 C7051C342000079010- <1> 	mov [CR3_TASK_5 + 0x1000 + 0x107 * 4], dword PARAM_TASK_5 + 7
    43 00001159 00                  <1>
    44 0000115A C7051C54200007A010- <1> 	mov [CR3_TASK_6 + 0x1000 + 0x107 * 4], dword PARAM_TASK_6 + 7
    44 00001163 00                  <1>
    45                              <1> 
    46 00001164 6A4068[841B0000]68- <1> 	cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size
    46 0000116C 00801000E892F2FFFF- <1>
    46 00001175 6683C40C            <1>
    47 00001179 6A4068[C41B0000]68- <1> 	cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size
    47 00001181 00901000E87DF2FFFF- <1>
    47 0000118A 6683C40C            <1>
    48 0000118E 6A4068[041C0000]68- <1> 	cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size
    48 00001196 00A01000E868F2FFFF- <1>
    48 0000119F 6683C40C            <1>
    49                              <1> 
    50                              <1> 	; [0x00000000] = 0x0
    51 000011A3 61                  <1> 	popa
    52                              <1> 
    53 000011A4 C3                  <1> 	ret
    54                              <1> 
   197                                  %include	"modules/int_pf.s"
     1                              <1> int_pf:
     2 000011A5 55                  <1> 	push	ebp
     3 000011A6 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 000011A8 60                  <1> 	pusha
     6 000011A9 06                  <1> 	push	es
     7 000011AA 1E                  <1> 	push	ds
     8                              <1> 
     9                              <1> 	; mov	ax, DS_KERNEL
    10                              <1> 	; mov	es, ax
    11                              <1> 	; mov	ds, ax
    12                              <1> 
    13 000011AB 0F20D0              <1> 	mov	eax, cr2	; interrupt address
    14 000011AE 2500F0FFFF          <1> 	and	eax, ~0x0FFF
    15 000011B3 3D00701000          <1> 	cmp	eax, 0x0010_7000
    16 000011B8 7521                <1> 	jne	.10F
    17                              <1> 	
    18 000011BA C7051C641000077010- <1> 	mov	[0x00106000 + 0x107 * 4], dword 0x0010_7007
    18 000011C3 00                  <1>
    19                              <1> 	; 0x00107007 means 0x00107000 can use as read and write
    20 000011C4 6A4068[441B0000]68- <1> 	cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    20 000011CC 00701000E832F2FFFF- <1>
    20 000011D5 6683C40C            <1>
    21                              <1> 
    22 000011D9 EB15                <1> 	jmp	.10E
    23                              <1> .10F:
    24 000011DB 83C404              <1> 	add	esp, 4
    25 000011DE 83C404              <1> 	add	esp, 4
    26 000011E1 61                  <1> 	popa
    27 000011E2 5D                  <1> 	pop	ebp
    28                              <1> 
    29 000011E3 9C                  <1> 	pushf
    30 000011E4 0E                  <1> 	push	cs
    31 000011E5 68[58090000]        <1> 	push	int_stop
    32                              <1> 
    33 000011EA B8[FA110000]        <1> 	mov	eax, .s0
    34 000011EF CF                  <1> 	iret			; kernel stop
    35                              <1> .10E:
    36 000011F0 1F                  <1> 	pop	ds
    37 000011F1 07                  <1> 	pop	es
    38 000011F2 61                  <1> 	popa
    39                              <1> 
    40 000011F3 89EC                <1> 	mov	esp, ebp
    41 000011F5 5D                  <1> 	pop	ebp
    42                              <1> 	
    43 000011F6 83C404              <1> 	add	esp, 4	; error code clear
    44 000011F9 CF                  <1> 	iret
    45                              <1> 	
    46 000011FA 203C20504147452046- <1> .s0	db	" < PAGE FAULT > ", 0
    46 00001203 41554C54203E2000    <1>
    47                              <1> 
   198                                  ;%include	"../modules/protect/int_timer.s"
   199                                  %include	"modules/my_int_timer.s"
     1                              <1> int_timer:
     2 0000120B 60                  <1> 	pushad
     3 0000120C 06                  <1> 	push	es
     4 0000120D 1E                  <1> 	push	ds
     5                              <1> 
     6 0000120E 66B81000            <1> 	mov	ax, 0x10
     7 00001212 8ED8                <1> 	mov	ds, ax
     8 00001214 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00001216 FF05[24120000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 0000121C B020                <2>  mov al, %2
    12 0000121E E620                <2>  out %1, al
    13                              <1> 
    14                              <1> 	
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_0
    17                              <1> 	;je	.11L
    18                              <1> 	;cmp	ax, SS_TASK_1
    19                              <1> 	;je	.12L
    20                              <1> 	;cmp	ax, SS_TASK_2
    21                              <1> 	;je	.13L
    22                              <1> 	;cmp	ax, SS_TASK_3
    23                              <1> 	;je	.14L
    24                              <1> 	;cmp	ax, SS_TASK_4
    25                              <1> 	;je	.15L
    26                              <1> 	;cmp	ax, SS_TASK_5
    27                              <1> 	;je	.16L
    28                              <1> ;
    29                              <1> ;	jmp	SS_TASK_0:0
    30                              <1> ;	jmp	.10E
    31                              <1> ;.11L:
    32                              <1> ;	jmp	SS_TASK_1:0
    33                              <1> ;	jmp	.10E
    34                              <1> ;.12L:
    35                              <1> ;	jmp	SS_TASK_2:0
    36                              <1> ;	jmp	.10E
    37                              <1> ;.13L:
    38                              <1> ;	jmp	SS_TASK_3:0
    39                              <1> ;	jmp	.10E
    40                              <1> ;.14L:
    41                              <1> ;	jmp	SS_TASK_4:0
    42                              <1> ;	jmp	.10E
    43                              <1> ;.15L:
    44                              <1> ;	jmp	SS_TASK_5:0
    45                              <1> ;	jmp	.10E
    46                              <1> ;.16L:
    47                              <1> ;	jmp	SS_TASK_6:0
    48                              <1> ;	jmp	.10E
    49                              <1> ;.10E:
    50                              <1> ;
    51 00001220 1F                  <1> 	pop	ds
    52 00001221 07                  <1> 	pop	es
    53 00001222 61                  <1> 	popad
    54                              <1> 	
    55 00001223 CF                  <1> 	iret
    56                              <1> 
    57                              <1> ALIGN	4,	db	0
    58 00001224 0000000000000000    <1> TIMER_COUNT:	dq	0
    59                              <1> 
    60                              <1> 
    61                              <1> int_en_timer:
    62 0000122C 55                  <1> 	push	ebp
    63 0000122D 89E5                <1> 	mov	ebp, esp
    64                              <1> 	
    65 0000122F 50                  <1> 	push	eax
    66                              <1> 
    67                              <1> 	outp	0x43, 0b00_11_010_0
    67 00001230 B034                <2>  mov al, %2
    67 00001232 E643                <2>  out %1, al
    68                              <1> 	; counter 0
    69                              <1> 	; access mode, bottom -> top
    70                              <1> 	; mode, 2
    71                              <1> 	; bcd
    72                              <1> 
    73                              <1> 	outp	0x40, 0x9C
    73 00001234 B09C                <2>  mov al, %2
    73 00001236 E640                <2>  out %1, al
    74                              <1> 	outp	0x40, 0x2E
    74 00001238 B02E                <2>  mov al, %2
    74 0000123A E640                <2>  out %1, al
    75                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    76                              <1> 
    77 0000123C 58                  <1> 	pop	eax
    78                              <1> 
    79 0000123D 89EC                <1> 	mov 	esp, ebp
    80 0000123F 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00001240 C3                  <1> 	ret
    83                              <1> 
    84                              <1> 
   200                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00001241 55                  <1> 	push	ebp
     3 00001242 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00001244 50                  <1> 	push	eax
     6                              <1> 
     7 00001245 A1[24120000]        <1> 	mov	eax, [TIMER_COUNT]
     8 0000124A C1E808              <1> 	shr	eax, 8
     9 0000124D 3B05[78120000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 00001253 741E                <1> 	je	.10E
    11                              <1> 
    12 00001255 A3[78120000]        <1> 	mov	[.index], eax
    13 0000125A 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 0000125D 8A80[7C120000]      <1> 	mov	al, [.table + eax]
    16 00001263 506A0F6A1D6A00E8B1- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 0000126C F1FFFF6683C410      <1>
    17                              <1> .10E:
    18 00001273 58                  <1> 	pop	eax
    19                              <1> 
    20 00001274 89EC                <1> 	mov	esp, ebp
    21 00001276 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00001277 C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00001278 00000000            <1> .index:		dd	0
    27 0000127C 7C2F2D5C            <1> .table:		dd	"|/-\"
   201                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 00001280 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 00001288 FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 00001290 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 00001298 FFFF000000FACF00    <1> .cs_task_1:	dq	0x00CF_FA00_0000_FFFF
     6 000012A0 FFFF000000F2CF00    <1> .ds_task_1:	dq	0x00CF_F200_0000_FFFF
     7 000012A8 FFFF000000FACF00    <1> .cs_task_2:	dq	0x00CF_FA00_0000_FFFF
     8 000012B0 FFFF000000F2CF00    <1> .ds_task_2:	dq	0x00CF_F200_0000_FFFF
     9 000012B8 FFFF000000FACF00    <1> .cs_task_3:	dq	0x00CF_FA00_0000_FFFF
    10 000012C0 FFFF000000F2CF00    <1> .ds_task_3:	dq	0x00CF_F200_0000_FFFF
    11 000012C8 FFFF000000F2CF00    <1> .ds_task_4:	dq	0x00CF_F200_0000_FFFF
    12 000012D0 FFFF000000F2CF00    <1> .ds_task_5:	dq	0x00CF_F200_0000_FFFF
    13 000012D8 FFFF000000F2CF00    <1> .ds_task_6:	dq	0x00CF_F200_0000_FFFF
    14                              <1> .end:
    15                              <1> 
    16                              <1> ; ldt indexes
    17                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    18                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    19                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4 | 3	; offset | (use LDT bit) | (level = 3)
    20                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4 | 3	
    21                              <1> CS_TASK_2:	equ	(.cs_task_2 - LDT) | 4 | 3
    22                              <1> DS_TASK_2:	equ	(.ds_task_2 - LDT) | 4 | 3	
    23                              <1> CS_TASK_3:	equ	(.cs_task_3 - LDT) | 4 | 3
    24                              <1> DS_TASK_3:	equ	(.ds_task_3 - LDT) | 4 | 3
    25                              <1> DS_TASK_4:	equ	(.ds_task_4 - LDT) | 4 | 3
    26                              <1> DS_TASK_5:	equ	(.ds_task_5 - LDT) | 4 | 3
    27                              <1> DS_TASK_6:	equ	(.ds_task_6 - LDT) | 4 | 3
    28                              <1> 
    29                              <1> LDT_LIMIT	equ	.end - LDT - 1
    30                              <1> 
    31                              <1> 
    32 000012E0 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    33 000012E8 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    34 000012F0 FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    35 000012F8 FFFF0000009A0F00    <1> .cs_bit16:	dq	0x000F_9A00_0000_FFFF
    36 00001300 FFFF000000920F00    <1> .ds_bit16:	dq	0x000F_9200_0000_FFFF
    37 00001308 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    38 00001310 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    39 00001318 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    40 00001320 6700000000890000    <1> .tss_2:		dq	0x0000_8900_0000_0067
    41 00001328 6700000000890000    <1> .tss_3:		dq	0x0000_8900_0000_0067
    42 00001330 6700000000890000    <1> .tss_4:		dq	0x0000_8900_0000_0067
    43 00001338 6700000000890000    <1> .tss_5:		dq	0x0000_8900_0000_0067
    44 00001340 6700000000890000    <1> .tss_6:		dq	0x0000_8900_0000_0067
    45 00001348 0000080004EC0000    <1> .call_gate:	dq	0x0000_EC04_0008_0000
    46                              <1> .end:
    47                              <1> 
    48                              <1> ; gdt indexes
    49                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    50                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    51                              <1> SS_LDT		equ	.ldt - GDT
    52                              <1> SS_TASK_0	equ	.tss_0 - GDT		; jump point
    53                              <1> SS_TASK_1	equ	.tss_1 - GDT
    54                              <1> SS_TASK_2	equ	.tss_2 - GDT
    55                              <1> SS_TASK_3	equ	.tss_3 - GDT
    56                              <1> SS_TASK_4	equ	.tss_4 - GDT
    57                              <1> SS_TASK_5	equ	.tss_5 - GDT
    58                              <1> SS_TASK_6	equ	.tss_6 - GDT
    59                              <1> SS_GATE_0	equ	.call_gate - GDT
    60                              <1> 
    61 00001350 6F00                <1> GDTR:		dw	GDT.end - GDT - 1
    62 00001352 [E0120000]          <1> 		dd	GDT
    63                              <1> 
    64                              <1> TSS_0:
    65 00001356 00000000            <1> .link:    dd 0
    66 0000135A 00321000            <1> .esp0:    dd SP_TASK_0 - STACK_SIZE / 2
    67 0000135E 10000000            <1> .ss0:     dd DS_KERNEL
    68 00001362 00000000            <1> .esp1:    dd 0
    69 00001366 00000000            <1> .ss1:     dd 0
    70 0000136A 00000000            <1> .esp2:    dd 0
    71 0000136E 00000000            <1> .ss2:     dd 0
    72 00001372 00501000            <1> .cr3:     dd CR3_BASE
    73 00001376 00000000            <1> .eip:     dd 0
    74 0000137A 00000000            <1> .eflags:  dd 0
    75 0000137E 00000000            <1> .eax:     dd 0
    76 00001382 00000000            <1> .ecx:     dd 0
    77 00001386 00000000            <1> .edx:     dd 0
    78 0000138A 00000000            <1> .ebx:     dd 0
    79 0000138E 00000000            <1> .esp:     dd 0
    80 00001392 00000000            <1> .ebp:     dd 0
    81 00001396 00000000            <1> .esi:     dd 0
    82 0000139A 00000000            <1> .edi:     dd 0
    83 0000139E 00000000            <1> .es:      dd 0
    84 000013A2 00000000            <1> .cs:      dd 0
    85 000013A6 00000000            <1> .ss:      dd 0
    86 000013AA 00000000            <1> .ds:      dd 0
    87 000013AE 00000000            <1> .fs:      dd 0
    88 000013B2 00000000            <1> .gs:      dd 0
    89 000013B6 00000000            <1> .ldt:     dd 0
    90 000013BA 00000000            <1> .io:      dd 0
    91 000013BE 00<rept>            <1> .fp_save: times 108 + 4 db 0
    92                              <1> 
    93                              <1> TSS_1:
    94 0000142E 00000000            <1> .link:    dd 0
    95 00001432 00361000            <1> .esp0:    dd SP_TASK_1 - STACK_SIZE / 2
    96 00001436 10000000            <1> .ss0:     dd DS_KERNEL
    97 0000143A 00000000            <1> .esp1:    dd 0
    98 0000143E 00000000            <1> .ss1:     dd 0
    99 00001442 00000000            <1> .esp2:    dd 0
   100 00001446 00000000            <1> .ss2:     dd 0
   101 0000144A 00501000            <1> .cr3:     dd CR3_BASE
   102 0000144E [3E190000]          <1> .eip:     dd task_1	; start at task_1
   103 00001452 02020000            <1> .eflags:  dd 0x0202
   104 00001456 00000000            <1> .eax:     dd 0
   105 0000145A 00000000            <1> .ecx:     dd 0
   106 0000145E 00000000            <1> .edx:     dd 0
   107 00001462 00000000            <1> .ebx:     dd 0
   108 00001466 00381000            <1> .esp:     dd SP_TASK_1
   109 0000146A 00000000            <1> .ebp:     dd 0
   110 0000146E 00000000            <1> .esi:     dd 0
   111 00001472 00000000            <1> .edi:     dd 0
   112 00001476 27000000            <1> .es:      dd DS_TASK_1
   113 0000147A 1F000000            <1> .cs:      dd CS_TASK_1
   114 0000147E 27000000            <1> .ss:      dd DS_TASK_1
   115 00001482 27000000            <1> .ds:      dd DS_TASK_1
   116 00001486 27000000            <1> .fs:      dd DS_TASK_1
   117 0000148A 27000000            <1> .gs:      dd DS_TASK_1
   118 0000148E 28000000            <1> .ldt:     dd SS_LDT
   119 00001492 00000000            <1> .io:      dd 0
   120 00001496 00<rept>            <1> .fp_save: times 108 + 4 db 0
   121                              <1> 
   122                              <1> TSS_2:
   123 00001506 00000000            <1> .link:    dd 0
   124 0000150A 003A1000            <1> .esp0:    dd SP_TASK_2 - STACK_SIZE / 2
   125 0000150E 10000000            <1> .ss0:     dd DS_KERNEL
   126 00001512 00000000            <1> .esp1:    dd 0
   127 00001516 00000000            <1> .ss1:	    dd 0
   128 0000151A 00000000            <1> .esp2:    dd 0
   129 0000151E 00000000            <1> .ss2:     dd 0
   130 00001522 00501000            <1> .cr3:     dd CR3_BASE
   131 00001526 [73190000]          <1> .eip:     dd task_2	; start at task_2
   132 0000152A 02020000            <1> .eflags:  dd 0x0202
   133 0000152E 00000000            <1> .eax:     dd 0
   134 00001532 00000000            <1> .ecx:     dd 0
   135 00001536 00000000            <1> .edx:     dd 0
   136 0000153A 00000000            <1> .ebx:			dd 0
   137 0000153E 003C1000            <1> .esp:			dd SP_TASK_2
   138 00001542 00000000            <1> .ebp:			dd 0
   139 00001546 00000000            <1> .esi:			dd 0
   140 0000154A 00000000            <1> .edi:			dd 0
   141 0000154E 37000000            <1> .es:			dd DS_TASK_2
   142 00001552 2F000000            <1> .cs:			dd CS_TASK_2
   143 00001556 37000000            <1> .ss:			dd DS_TASK_2
   144 0000155A 37000000            <1> .ds:			dd DS_TASK_2
   145 0000155E 37000000            <1> .fs:			dd DS_TASK_2
   146 00001562 37000000            <1> .gs:			dd DS_TASK_2
   147 00001566 28000000            <1> .ldt:			dd SS_LDT
   148 0000156A 00000000            <1> .io:			dd 0
   149 0000156E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   150                              <1> 
   151                              <1> TSS_3:
   152 000015DE 00000000            <1> .link:    dd 0
   153 000015E2 003E1000            <1> .esp0:    dd SP_TASK_3 - 512
   154 000015E6 10000000            <1> .ss0:     dd DS_KERNEL
   155 000015EA 00000000            <1> .esp1:    dd 0
   156 000015EE 00000000            <1> .ss1:     dd 0
   157 000015F2 00000000            <1> .esp2:    dd 0
   158 000015F6 00000000            <1> .ss2:     dd 0
   159 000015FA 00501000            <1> .cr3:     dd CR3_BASE
   160 000015FE [441A0000]          <1> .eip:     dd task_3
   161 00001602 02020000            <1> .eflags:  dd 0x0202
   162 00001606 00000000            <1> .eax:     dd 0
   163 0000160A 00000000            <1> .ecx:     dd 0
   164 0000160E 00000000            <1> .edx:     dd 0
   165 00001612 00000000            <1> .ebx:     dd 0
   166 00001616 00401000            <1> .esp:     dd SP_TASK_3
   167 0000161A 00000000            <1> .ebp:     dd 0
   168 0000161E 00000000            <1> .esi:     dd 0
   169 00001622 00000000            <1> .edi:     dd 0
   170 00001626 47000000            <1> .es:      dd DS_TASK_3
   171 0000162A 3F000000            <1> .cs:      dd CS_TASK_3
   172 0000162E 47000000            <1> .ss:      dd DS_TASK_3
   173 00001632 47000000            <1> .ds:      dd DS_TASK_3
   174 00001636 47000000            <1> .fs:      dd DS_TASK_3
   175 0000163A 47000000            <1> .gs:      dd DS_TASK_3
   176 0000163E 28000000            <1> .ldt:     dd SS_LDT
   177 00001642 00000000            <1> .io:      dd 0
   178 00001646 00<rept>            <1> .fp_save: times 108 + 4 db 0
   179                              <1> 
   180                              <1> TSS_4:
   181 000016B6 00000000            <1> .link:    dd 0
   182 000016BA 00421000            <1> .esp0:    dd SP_TASK_4 - 512
   183 000016BE 10000000            <1> .ss0:     dd DS_KERNEL
   184 000016C2 00000000            <1> .esp1:    dd 0
   185 000016C6 00000000            <1> .ss1:     dd 0
   186 000016CA 00000000            <1> .esp2:    dd 0
   187 000016CE 00000000            <1> .ss2:     dd 0
   188 000016D2 00002000            <1> .cr3:     dd CR3_TASK_4
   189 000016D6 [441A0000]          <1> .eip:     dd task_3
   190 000016DA 02020000            <1> .eflags:  dd 0x0202
   191 000016DE 00000000            <1> .eax:     dd 0
   192 000016E2 00000000            <1> .ecx:     dd 0
   193 000016E6 00000000            <1> .edx:     dd 0
   194 000016EA 00000000            <1> .ebx:     dd 0
   195 000016EE 00441000            <1> .esp:     dd SP_TASK_4
   196 000016F2 00000000            <1> .ebp:     dd 0
   197 000016F6 00000000            <1> .esi:     dd 0
   198 000016FA 00000000            <1> .edi:     dd 0
   199 000016FE 4F000000            <1> .es:      dd DS_TASK_4
   200 00001702 3F000000            <1> .cs:      dd CS_TASK_3
   201 00001706 4F000000            <1> .ss:      dd DS_TASK_4
   202 0000170A 4F000000            <1> .ds:      dd DS_TASK_4
   203 0000170E 4F000000            <1> .fs:      dd DS_TASK_4
   204 00001712 4F000000            <1> .gs:      dd DS_TASK_4
   205 00001716 28000000            <1> .ldt:     dd SS_LDT
   206 0000171A 00000000            <1> .io:      dd 0
   207 0000171E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   208                              <1> 
   209                              <1> TSS_5:
   210 0000178E 00000000            <1> .link:    dd 0
   211 00001792 00461000            <1> .esp0:    dd SP_TASK_5 - 512
   212 00001796 10000000            <1> .ss0:     dd DS_KERNEL
   213 0000179A 00000000            <1> .esp1:    dd 0
   214 0000179E 00000000            <1> .ss1:     dd 0
   215 000017A2 00000000            <1> .esp2:    dd 0
   216 000017A6 00000000            <1> .ss2:     dd 0
   217 000017AA 00202000            <1> .cr3:     dd CR3_TASK_5
   218 000017AE [441A0000]          <1> .eip:     dd task_3
   219 000017B2 02020000            <1> .eflags:  dd 0x0202
   220 000017B6 00000000            <1> .eax:     dd 0
   221 000017BA 00000000            <1> .ecx:     dd 0
   222 000017BE 00000000            <1> .edx:     dd 0
   223 000017C2 00000000            <1> .ebx:     dd 0
   224 000017C6 00481000            <1> .esp:     dd SP_TASK_5
   225 000017CA 00000000            <1> .ebp:     dd 0
   226 000017CE 00000000            <1> .esi:     dd 0
   227 000017D2 00000000            <1> .edi:     dd 0
   228 000017D6 57000000            <1> .es:      dd DS_TASK_5
   229 000017DA 3F000000            <1> .cs:      dd CS_TASK_3
   230 000017DE 57000000            <1> .ss:      dd DS_TASK_5
   231 000017E2 57000000            <1> .ds:      dd DS_TASK_5
   232 000017E6 57000000            <1> .fs:      dd DS_TASK_5
   233 000017EA 57000000            <1> .gs:      dd DS_TASK_5
   234 000017EE 28000000            <1> .ldt:     dd SS_LDT
   235 000017F2 00000000            <1> .io:      dd 0
   236 000017F6 00<rept>            <1> .fp_save: times 108 + 4 db 0
   237                              <1> 
   238                              <1> TSS_6:
   239 00001866 00000000            <1> .link:    dd 0
   240 0000186A 004A1000            <1> .esp0:    dd SP_TASK_6 - 512
   241 0000186E 10000000            <1> .ss0:     dd DS_KERNEL
   242 00001872 00000000            <1> .esp1:    dd 0
   243 00001876 00000000            <1> .ss1:     dd 0
   244 0000187A 00000000            <1> .esp2:    dd 0
   245 0000187E 00000000            <1> .ss2:     dd 0
   246 00001882 00402000            <1> .cr3:     dd CR3_TASK_6
   247 00001886 [441A0000]          <1> .eip:     dd task_3
   248 0000188A 02020000            <1> .eflags:  dd 0x0202
   249 0000188E 00000000            <1> .eax:     dd 0
   250 00001892 00000000            <1> .ecx:     dd 0
   251 00001896 00000000            <1> .edx:     dd 0
   252 0000189A 00000000            <1> .ebx:     dd 0
   253 0000189E 004C1000            <1> .esp:     dd SP_TASK_6
   254 000018A2 00000000            <1> .ebp:     dd 0
   255 000018A6 00000000            <1> .esi:     dd 0
   256 000018AA 00000000            <1> .edi:     dd 0
   257 000018AE 5F000000            <1> .es:      dd DS_TASK_6
   258 000018B2 3F000000            <1> .cs:      dd CS_TASK_3
   259 000018B6 5F000000            <1> .ss:      dd DS_TASK_6
   260 000018BA 5F000000            <1> .ds:      dd DS_TASK_6
   261 000018BE 5F000000            <1> .fs:      dd DS_TASK_6
   262 000018C2 5F000000            <1> .gs:      dd DS_TASK_6
   263 000018C6 28000000            <1> .ldt:     dd SS_LDT
   264 000018CA 00000000            <1> .io:      dd 0
   265 000018CE 00<rept>            <1> .fp_save:	times 108 + 4 db 0
   266                              <1> 
   202                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 0000193E 68[6C190000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 00001946 006A3FE8D1EBFFFF66- <1>
     2 0000194F 83C410              <1>
     3                              <1> 	; cdecl	itoa, esp, .t0, 8, 16, 0b0100
     4                              <1> 	; cdecl	draw_str, 0, 2, 0x010F, .s0
     5                              <1> 	;mov	[ESP_COUNTER], esp
     6                              <1> 	; task_1 dose not have level 0
     7                              <1> 	; cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
     8                              <1> .10L:
     9                              <1> 	;cdecl	itoa, esp, .t0, 8, 16, 0b0100	
    10                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .t0
    11                              <1> 	;mov	[ESP_COUNTER], esp
    12                              <1> 	
    13                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
    14                              <1> 	
    15 00001952 A1[38030000]        <1> 	mov	eax, [RTC_TIME]
    16 00001957 5068000700006A006A- <1> 	cdecl	draw_time, 72, 0, 0x0700, eax
    16 00001960 48E8D4EEFFFF6683C4- <1>
    16 00001969 10                  <1>
    17                              <1> 
    18                              <1> 	; jmp	SS_TASK_0:0	
    19                              <1> 
    20 0000196A EBE6                <1> 	jmp	.10L
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24 0000196C 5461736B2D3100      <1> .s0	db	"Task-1", 0
   203                                  %include	"task/task_2.s"
     1                              <1> task_2:
     2 00001973 68[361A0000]6A076A- <1> 	cdecl	draw_str, 63, 1, 0x07, .s0
     2 0000197B 016A3FE89CEBFFFF66- <1>
     2 00001984 83C410              <1>
     3                              <1> 	
     4 00001987 DB05[241A0000]      <1> 	fild	dword [.c1000]
     5 0000198D D9EB                <1> 	fldpi
     6 0000198F DA35[281A0000]      <1> 	fidiv	dword [.c180]
     7 00001995 D9EB                <1> 	fldpi
     8 00001997 DCC0                <1> 	fadd	st0, st0
     9 00001999 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 0000199B D8C2                <1> 	fadd	st0, st2
    14 0000199D D9F8                <1> 	fprem
    15 0000199F D9C0                <1> 	fld	st0	; copy st0
    16 000019A1 D9FE                <1> 	fsin
    17 000019A3 D8CC                <1> 	fmul	st0, st4
    18 000019A5 DF35[2C1A0000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 000019AB A1[2C1A0000]        <1> 	mov	eax, [.bcd]
    21 000019B0 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 000019B2 250F0F0000          <1> 	and	eax, 0x0F0F
    24 000019B7 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 000019BC C1EB04              <1> 	shr	ebx, 4
    27 000019BF 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 000019C5 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 000019CB 883D[3E1A0000]      <1> 	mov	[.s2 + 0], bh
    31 000019D1 8825[401A0000]      <1> 	mov	[.s3 + 0], ah
    32 000019D7 881D[411A0000]      <1> 	mov	[.s3 + 1], bl
    33 000019DD A2[421A0000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 000019E2 B807000000          <1> 	mov	eax, 7		; sign bit
    36 000019E7 0FA305[351A0000]    <1> 	bt	[.bcd + 9], eax
    37 000019EE 7209                <1> 	jc	.10F
    38                              <1> 	
    39 000019F0 C605[3D1A0000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 000019F7 EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 000019F9 C605[3D1A0000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 00001A00 68[3D1A0000]6A076A- <1> 	cdecl	draw_str, 72, 1, 0x07, .s1
    44 00001A08 016A48E80FEBFFFF66- <1>
    44 00001A11 83C410              <1>
    45                              <1> 	
    46 00001A14 6A0AE809F3FFFF6683- <1> 	cdecl	wait_tick, 10
    46 00001A1D C404                <1>
    47                              <1> 
    48 00001A1F E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 00001A24 E8030000            <1> .c1000	dd	1000
    53 00001A28 B4000000            <1> .c180	dd	180
    54 00001A2C 00<rept>            <1> .bcd:	times	10	db	0x00
    55 00001A36 5461736B2D3200      <1> .s0	db	"Task-2", 0
    56 00001A3D 2D                  <1> .s1:	db	"-"
    57 00001A3E 302E                <1> .s2:	db	"0."
    58 00001A40 30303000            <1> .s3:	db	"000", 0
   204                                  %include	"task/task_3.s"
     1                              <1> task_3:
     2                              <1> 	; push	ebp
     3 00001A44 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00001A46 6A00                <1> 	push	dword 0	; origin x
     6 00001A48 6A00                <1> 	push	dword 0	; origin y
     7 00001A4A 6A00                <1> 	push	dword 0	; 
     8 00001A4C 6A00                <1> 	push	dword 0
     9 00001A4E 6A00                <1> 	push	dword 0
    10                              <1> 
    11                              <1> 
    12 00001A50 BE00701000          <1> 	mov	esi, 0x0010_7000
    13                              <1> 
    14 00001A55 8B06                <1> 	mov	eax, [esi + rose.x0]
    15 00001A57 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    16                              <1> 
    17 00001A5A C1E803              <1> 	shr	eax, 3		; eax is x
    18 00001A5D C1EB04              <1> 	shr	ebx, 4		; ebx is y
    19 00001A60 4B                  <1> 	dec	ebx
    20 00001A61 8B4E24              <1> 	mov	ecx, [esi + rose.color_s]
    21 00001A64 8D5630              <1> 	lea	edx, [esi + rose.title]
    22                              <1> 
    23 00001A67 52515350E8AFEAFFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx	; draw title
    23 00001A70 6683C410            <1>
    24                              <1> 
    25 00001A74 8B06                <1> 	mov	eax, [esi + rose.x0]
    26 00001A76 8B5E08              <1> 	mov	ebx, [esi + rose.x1]
    27 00001A79 29C3                <1> 	sub	ebx, eax
    28 00001A7B D1EB                <1> 	shr	ebx, 1			; half of size
    29 00001A7D 01C3                <1> 	add	ebx, eax		; origin x
    30 00001A7F 895DFC              <1> 	mov	[ebp - 4], ebx
    31                              <1> 
    32 00001A82 8B4604              <1> 	mov	eax, [esi + rose.y0]
    33 00001A85 8B5E0C              <1> 	mov	ebx, [esi + rose.y1]
    34 00001A88 29C3                <1> 	sub	ebx, eax
    35 00001A8A D1EB                <1> 	shr	ebx, 1
    36 00001A8C 01C3                <1> 	add	ebx, eax
    37 00001A8E 895DF8              <1> 	mov	[ebp - 8], ebx
    38                              <1> 
    39 00001A91 8B06                <1> 	mov	eax, [esi + rose.x0]	; x start
    40 00001A93 8B5DF8              <1> 	mov	ebx, [ebp - 8]		; y
    41 00001A96 8B4E08              <1> 	mov	ecx, [esi + rose.x1]	; x end
    42                              <1> 
    43 00001A99 FF761853515350E8F3- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; x axis
    43 00001AA2 EBFFFF6683C414      <1>
    44                              <1> 
    45 00001AA9 8B4604              <1> 	mov	eax, [esi + rose.y0]	; y start
    46 00001AAC 8B5DFC              <1> 	mov	ebx, [ebp - 4]		; x
    47 00001AAF 8B4E0C              <1> 	mov	ecx, [esi + rose.y1]	; y end
    48                              <1> 
    49 00001AB2 FF761C51535053E8DA- <1> 	cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
    49 00001ABB EBFFFF6683C414      <1>
    50                              <1> 
    51 00001AC2 8B06                <1> 	mov	eax, [esi + rose.x0]
    52 00001AC4 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    53 00001AC7 8B4E08              <1> 	mov	ecx, [esi + rose.x1]
    54 00001ACA 8B560C              <1> 	mov	edx, [esi + rose.y1]
    55                              <1> 
    56 00001ACD FF762052515350E870- <1> 	cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
    56 00001AD6 ECFFFF6683C414      <1>
    57                              <1> 
    58 00001ADD 8B4608              <1> 	mov	eax, [esi + rose.x1]
    59 00001AE0 2B06                <1> 	sub	eax, [esi + rose.x0]
    60 00001AE2 D1E8                <1> 	shr	eax, 1
    61 00001AE4 89C3                <1> 	mov	ebx, eax
    62 00001AE6 C1EB04              <1> 	shr	ebx, 4
    63 00001AE9 29D8                <1> 	sub	eax, ebx
    64                              <1> 	; eax -= eax / 16
    65                              <1> 
    66 00001AEB FF7614FF761050E84D- <1> 	cdecl	fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
    66 00001AF4 0100006683C40C      <1>
    67                              <1> .10L:
    68                              <1> 
    69 00001AFB 8D5DF4              <1> 	lea	ebx, [ebp - 12]	; x position address
    70 00001AFE 8D4DF0              <1> 	lea	ecx, [ebp - 16]	; y position address
    71 00001B01 8B45EC              <1> 	mov	eax, [ebp - 20]	; t
    72                              <1> 
    73 00001B04 505153E85201000066- <1> 	cdecl	fpu_rose_update, ebx, ecx, eax
    73 00001B0D 83C40C              <1>
    74                              <1> 
    75 00001B10 BA00000000          <1> 	mov	edx, 0
    76 00001B15 40                  <1> 	inc	eax
    77 00001B16 BBA08C0000          <1> 	mov	ebx, 360 * 100
    78 00001B1B F7F3                <1> 	div	ebx
    79                              <1> 	; EDX:EAX div ebx. EAX : /, EDX : %.
    80 00001B1D 8955EC              <1> 	mov	[ebp -20], edx
    81                              <1> 
    82 00001B20 8B4DF4              <1> 	mov	ecx, [ebp -12]	; x = 0
    83 00001B23 8B55F0              <1> 	mov	edx, [ebp -16]	; y = 0
    84                              <1> 
    85 00001B26 034DFC              <1> 	add	ecx, [ebp - 4]	; x += X
    86 00001B29 0355F8              <1> 	add	edx, [ebp - 8]	; t += Y
    87                              <1> 
    88 00001B2C 8B5E28              <1> 	mov	ebx, [esi + rose.color_f]
    89 00001B2F CD82                <1> 	int	0x82		; draw_pixel at (ecx, edx). color is ebx
    90                              <1> 
    91 00001B31 6A02E8ECF1FFFF6683- <1> 	cdecl	wait_tick, 2
    91 00001B3A C404                <1>
    92                              <1> 
    93 00001B3C 8B5E2C              <1> 	mov	ebx, [esi + rose.color_b]
    94 00001B3F CD82                <1> 	int	0x82
    95                              <1> 	
    96 00001B41 EBB8                <1> 	jmp	.10L
    97                              <1> 
    98 00001B43 00                  <1> ALIGN	4,	db	0
    99                              <1> 
   100                              <1> ALIGN 4, db 0
   101                              <1> DRAW_PARAM:
   102                              <1> .t3:
   103                              <1>     istruc rose
   104 00001B44 20000000            <1>         at rose.x0, dd 32
   105 00001B48 20000000            <1>         at rose.y0, dd 32
   106 00001B4C D0000000            <1>         at rose.x1, dd 208
   107 00001B50 D0000000            <1>         at rose.y1, dd 208
   108                              <1> 
   109 00001B54 02000000            <1>         at rose.n, dd 2
   110 00001B58 01000000            <1>         at rose.d, dd 1
   111                              <1> 
   112 00001B5C 07000000            <1>         at rose.color_x, dd 0x0007
   113 00001B60 07000000            <1>         at rose.color_y, dd 0x0007
   114 00001B64 0F000000            <1>         at rose.color_z, dd 0x000F
   115 00001B68 0F030000            <1>         at rose.color_s, dd 0x030F
   116 00001B6C 0F000000            <1>         at rose.color_f, dd 0x000F
   117 00001B70 03000000            <1>         at rose.color_b, dd 0x0003
   118                              <1> 
   119 00001B74 5461736B2D3300      <1>         at rose.title, db "Task-3", 0
   120 00001B7B 00<rept>            <1>     iend
   121                              <1> 
   122                              <1> .t4:
   123                              <1>     istruc rose
   124 00001B84 F8000000            <1>         at rose.x0, dd 248
   125 00001B88 20000000            <1>         at rose.y0, dd 32
   126 00001B8C A8010000            <1>         at rose.x1, dd 424
   127 00001B90 D0000000            <1>         at rose.y1, dd 208
   128                              <1> 
   129 00001B94 03000000            <1>         at rose.n, dd 3
   130 00001B98 01000000            <1>         at rose.d, dd 1
   131                              <1> 
   132 00001B9C 07000000            <1>         at rose.color_x, dd 0x0007
   133 00001BA0 07000000            <1>         at rose.color_y, dd 0x0007
   134 00001BA4 0F000000            <1>         at rose.color_z, dd 0x000F
   135 00001BA8 0F040000            <1>         at rose.color_s, dd 0x040F
   136 00001BAC 0F000000            <1>         at rose.color_f, dd 0x000F
   137 00001BB0 04000000            <1>         at rose.color_b, dd 0x0004
   138                              <1> 
   139 00001BB4 5461736B2D3400      <1>         at rose.title, db "Task-4", 0
   140 00001BBB 00<rept>            <1>     iend
   141                              <1> 
   142                              <1> .t5:
   143                              <1>     istruc rose
   144 00001BC4 20000000            <1>         at rose.x0, dd 32
   145 00001BC8 10010000            <1>         at rose.y0, dd 272
   146 00001BCC D0000000            <1>         at rose.x1, dd 208
   147 00001BD0 C0010000            <1>         at rose.y1, dd 448
   148                              <1> 
   149 00001BD4 02000000            <1>         at rose.n, dd 2
   150 00001BD8 06000000            <1>         at rose.d, dd 6
   151                              <1> 
   152 00001BDC 07000000            <1>         at rose.color_x, dd 0x0007
   153 00001BE0 07000000            <1>         at rose.color_y, dd 0x0007
   154 00001BE4 0F000000            <1>         at rose.color_z, dd 0x000F
   155 00001BE8 0F050000            <1>         at rose.color_s, dd 0x050F
   156 00001BEC 0F000000            <1>         at rose.color_f, dd 0x000F
   157 00001BF0 05000000            <1>         at rose.color_b, dd 0x0005
   158                              <1> 
   159 00001BF4 5461736B2D3500      <1>         at rose.title, db "Task-5", 0
   160 00001BFB 00<rept>            <1>     iend
   161                              <1> 
   162                              <1> .t6:
   163                              <1>     istruc rose
   164 00001C04 F8000000            <1>         at rose.x0, dd 248
   165 00001C08 10010000            <1>         at rose.y0, dd 272
   166 00001C0C A8010000            <1>         at rose.x1, dd 424
   167 00001C10 C0010000            <1>         at rose.y1, dd 448
   168                              <1> 
   169 00001C14 04000000            <1>         at rose.n, dd 4
   170 00001C18 06000000            <1>         at rose.d, dd 6
   171                              <1> 
   172 00001C1C 07000000            <1>         at rose.color_x, dd 0x0007
   173 00001C20 07000000            <1>         at rose.color_y, dd 0x0007
   174 00001C24 0F000000            <1>         at rose.color_z, dd 0x000F
   175 00001C28 0F060000            <1>         at rose.color_s, dd 0x060F
   176 00001C2C 0F000000            <1>         at rose.color_f, dd 0x000F
   177 00001C30 06000000            <1>         at rose.color_b, dd 0x0006
   178                              <1> 
   179 00001C34 5461736B2D3600      <1>         at rose.title, db "Task-6", 0
   180 00001C3B 00<rept>            <1>     iend
   181                              <1> 
   182                              <1> 
   183                              <1> 
   184                              <1> fpu_rose_init:	;	fpu_rose_init(A,n,d)
   185 00001C44 55                  <1> 	push	ebp
   186 00001C45 89E5                <1> 	mov	ebp, esp
   187                              <1> 
   188 00001C47 68B4000000          <1> 	push	dword 180
   189                              <1> 
   190 00001C4C D9EB                <1> 	fldpi
   191 00001C4E DA75FC              <1> 	fidiv	dword [ebp - 4]	; 180
   192 00001C51 DB450C              <1> 	fild	dword [ebp +12]	; n
   193 00001C54 DA7510              <1> 	fidiv	dword [ebp +16]	; n / d
   194 00001C57 DB4508              <1> 	fild	dword [ebp + 8]	; A
   195                              <1> 
   196 00001C5A 89EC                <1> 	mov	esp, ebp
   197 00001C5C 5D                  <1> 	pop	ebp
   198                              <1> 
   199 00001C5D C3                  <1> 	ret
   200                              <1> 
   201                              <1> fpu_rose_update:	;	fpu_rose_update(px, py, t)
   202                              <1> ; px,py is address. t is angle
   203 00001C5E 55                  <1> 	push	ebp
   204 00001C5F 89E5                <1> 	mov	ebp, esp
   205                              <1> 
   206 00001C61 50                  <1> 	push	eax
   207 00001C62 53                  <1> 	push	ebx
   208                              <1> 
   209 00001C63 8B4508              <1> 	mov	eax, [ebp + 8]
   210 00001C66 8B5D0C              <1> 	mov	ebx, [ebp +12]
   211                              <1> 
   212 00001C69 DB4510              <1> 	fild	dword [ebp +16]
   213 00001C6C D8CB                <1> 	fmul	st0, st3		; st0 is degree, st3 is radian / degree. st0 is radian
   214 00001C6E D9C0                <1> 	fld	st0
   215                              <1> 
   216 00001C70 D9FB                <1> 	fsincos
   217 00001C72 D9CA                <1> 	fxch	st2			; change st0, st2
   218 00001C74 D8CC                <1> 	fmul	st0, st4		; st0 = kθ
   219 00001C76 D9FE                <1> 	fsin				; st0 = sin(kθ)
   220 00001C78 D8CB                <1> 	fmul	st0, st3		; st0 = Asin(kθ)
   221                              <1> 
   222 00001C7A D9CA                <1> 	fxch	st2
   223 00001C7C D8CA                <1> 	fmul	st0, st2
   224 00001C7E DB18                <1> 	fistp	dword [eax]		; store x pos
   225                              <1> 
   226 00001C80 DEC9                <1> 	fmulp	st1, st0
   227 00001C82 D9E0                <1> 	fchs				; convert to display coordinate
   228 00001C84 DB1B                <1> 	fistp	dword [ebx]		; store y pos
   229                              <1> 
   230 00001C86 5B                  <1> 	pop	ebx
   231 00001C87 58                  <1> 	pop	eax
   232                              <1> 
   233 00001C88 89EC                <1> 	mov	esp, ebp
   234 00001C8A 5D                  <1> 	pop	ebp
   235                              <1> 
   236 00001C8B C3                  <1> 	ret
   237                              <1> 
   238                              <1> 
   239                              <1> 	
   240                              <1> 
   241                              <1> 
   205                                  ;%include	"../../../../testOS/src/39_rose/tasks/task_3.s"
   206                                  
   207                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   208                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   209                                  test_func:
   210 00001C8C 68[A41C0000]680F01-     	cdecl	draw_str, 0, 20, 0x010F, .t0
   210 00001C94 00006A146A00E880E8-
   210 00001C9D FFFF6683C410       
   211 00001CA3 C3                      	ret
   212                                  
   213 00001CA4 54657374206D657373-     .t0:	db	"Test message", 0
   213 00001CAD 61676500           
   214                                  
   215                                  debug:
   216 00001CB1 55                      	push	ebp
   217 00001CB2 89E5                    	mov	ebp, esp
   218 00001CB4 68[CF1C0000]680F01-     	cdecl	draw_str, 0, 1, 0x010F, .t0
   218 00001CBC 00006A016A00E858E8-
   218 00001CC5 FFFF6683C410       
   219 00001CCB 89EC                    	mov	esp, ebp
   220 00001CCD 5D                      	pop	ebp
   221                                  
   222 00001CCE C3                      	ret
   223 00001CCF 74657374                .t0:	db	"test"
   224                                  
   225 00001CD3 01<rept>                	times	KERNEL_SIZE - ($ - $$) - 0x100	db	1
   226                                  
   227 00001F00 [FF0F0000]              funcs:	dd	draw_num
   228 00001F04 [8C1C0000]              	dd	test_func
   229                                  	; dd	draw_str
   230 00001F08 [1F050000]              	dd	draw_str
   231 00001F0C [240D0000]              	dd	wait_tick
   232 00001F10 [D7050000]              	dd	draw_pixel
   233 00001F14 10000000                	dd	RING_ITEM_SIZE
   234 00001F18 [080B0000]              	dd	_KEY_BUFF
   235 00001F1C [82100000]              	dd	panic_handler
   236 00001F20 [200B0000]              	dd	ring_rd
   237 00001F24 [20040000]              	dd	draw_char
   238 00001F28 [B40D0000]              	dd	power_off
   239                                  
   240                                  
   241                                  
   242                                  
   243                                  
   244 00001F2C 01<rept>                	times	KERNEL_SIZE - ($ - $$)	db	1
   245                                  
   246                                  ; KERNEL_END:
   247                                  
