     1                                  %define		USE_SYSTEM_CALL
     2                                  %define		USE_TEST_AND_SET
     3                                  
     4                                  %include	"../include/define.s"
     1                              <1> VECT_BASE		equ	0x0010_0000
     2                              <1> KERNEL_LOAD		equ	0x0010_1000
     3                              <1> STACK_BASE		equ	0x0010_3000
     4                              <1> CR3_BASE		equ	0x0010_5000
     5                              <1> RUST_LOAD		equ	0x0000_1000
     6                              <1> RUST_SIZE		equ	0x0000_6000
     7                              <1> RUST_SECT		equ	RUST_SIZE / SECT_SIZE
     8                              <1> RUST_END		equ	RUST_LOAD + RUST_SIZE
     9                              <1> 
    10                              <1> BOOT_LOAD		equ	0x7c00
    11                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
    12                              <1> 
    13                              <1> BOOT_SIZE		equ	(1024 * 8)
    14                              <1> SECT_SIZE		equ	(512)
    15                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
    16                              <1> 
    17                              <1> E820_RECORD_SIZE	equ	20
    18                              <1> 
    19                              <1> KERNEL_SIZE		equ	(1024 * 8)
    20                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    21                              <1> KERNEL_END		equ	KERNEL_LOAD + KERNEL_SIZE
    22                              <1> ; KERNEL_END : 0x0010_3000
    23                              <1> 
    24                              <1> 
    25                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    26                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    27                              <1> 
    28                              <1> struc			ring_buff		; for keyboard
    29 00000000 <res 00000004>      <1> 				.rp	resd	1
    30 00000004 <res 00000004>      <1> 				.wp	resd	1
    31 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    32                              <1> endstruc
    33                              <1> 
    34                              <1> struc			rose
    35 00000000 <res 00000004>      <1> 				.x0		resd	1
    36 00000004 <res 00000004>      <1> 				.y0		resd	1
    37 00000008 <res 00000004>      <1> 				.x1		resd	1
    38 0000000C <res 00000004>      <1> 				.y1		resd	1
    39                              <1> 
    40 00000010 <res 00000004>      <1> 				.n		resd	1
    41 00000014 <res 00000004>      <1> 				.d		resd	1
    42                              <1> 
    43 00000018 <res 00000004>      <1> 				.color_x	resd	1
    44 0000001C <res 00000004>      <1> 				.color_y	resd	1
    45 00000020 <res 00000004>      <1> 				.color_z	resd	1
    46 00000024 <res 00000004>      <1> 				.color_s	resd	1
    47 00000028 <res 00000004>      <1> 				.color_f	resd	1
    48 0000002C <res 00000004>      <1> 				.color_b	resd	1
    49                              <1> 				
    50 00000030 <res 00000010>      <1> 				.title		resb	16
    51                              <1> endstruc
    52                              <1> 
    53                              <1> ;struc ring_buff
    54                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    55                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    56                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    57                              <1> ;endstruc
    58                              <1> 
    59                              <1> STACK_SIZE		equ	1024
    60                              <1> 
    61                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    62                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    63                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    64                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
    65                              <1> SP_TASK_4		equ	STACK_BASE + (STACK_SIZE * 5)
    66                              <1> SP_TASK_5		equ	STACK_BASE + (STACK_SIZE * 6)
    67                              <1> SP_TASK_6		equ	STACK_BASE + (STACK_SIZE * 7)
    68                              <1> SP_TASK_T		equ	STACK_BASE + (STACK_SIZE * 8)
    69                              <1> 
    70                              <1> PARAM_TASK_4		equ	0x0010_8000
    71                              <1> PARAM_TASK_5		equ	0x0010_9000
    72                              <1> PARAM_TASK_6		equ	0x0010_A000
    73                              <1> 
    74                              <1> CR3_TASK_4		equ	0x0020_0000
    75                              <1> CR3_TASK_5		equ	0x0020_2000
    76                              <1> CR3_TASK_6		equ	0x0020_4000
    77                              <1> CR3_TASK_T		equ	0x0020_6000
    78                              <1> 
    79                              <1> FAT_SIZE equ (1024 * 128)
    80                              <1> ROOT_SIZE equ (1024 * 16)
    81                              <1> 
    82                              <1> FAT1_START equ (KERNEL_SIZE)
    83                              <1> FAT2_START equ (FAT1_START + FAT_SIZE)
    84                              <1> ROOT_START equ (FAT2_START + FAT_SIZE)
    85                              <1> FILE_START equ (ROOT_START + ROOT_SIZE)
    86                              <1> 
    87                              <1> ATTR_VOLUME_ID equ 0x08
    88                              <1> ATTR_ARCHIVE equ 0x20
    89                              <1> 
     5                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     6                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     7                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     8                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     9                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
    10                                  %include	"../include/set_gate.s"
     1                              <1> %macro	set_gate 2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	mov	[edi + 0], ax
     9                              <1> 	shr	eax, 16
    10                              <1> 	mov	[edi + 6], ax
    11                              <1> 	
    12                              <1> 	pop	edi
    13                              <1> 	pop	eax
    14                              <1> %endmacro
    11                                  ;%include	"../../../../testOS/src/include/macro.s"
    12                                  
    13                                  ORG	KERNEL_LOAD
    14                                  
    15                                  ALIGN	4
    16 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    17 00000002 00001000                	dd	VECT_BASE
    18                                  
    19                                  
    20                                  [BITS 32]
    21                                  
    22                                  
    23                                  kernel:
    24 00000006 FA                      	cli
    25                                  
    26 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    27 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    28 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    29 00000013 C1E004                  	shl	eax, 4
    30 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    31 00000018 A3[14030000]            	mov	[FONT_ADR], eax
    32                                  	
    33                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    33 0000001D 50                  <1>  push eax
    33 0000001E 57                  <1>  push edi
    33                              <1> 
    33 0000001F BF[18130000]        <1>  mov edi, %1
    33 00000024 B8[90120000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if %0 == 3
    33 00000029 66C7075F00          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000002E 66894702            <1>  mov [edi + 2], ax
    33 00000032 C1E810              <1>  shr eax, 16
    33 00000035 884704              <1>  mov [edi + 4], al
    33 00000038 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000003B 5F                  <1>  pop edi
    33 0000003C 58                  <1>  pop eax
    34                                  	set_desc	GDT.tss_0, TSS_0
    34 0000003D 50                  <1>  push eax
    34 0000003E 57                  <1>  push edi
    34                              <1> 
    34 0000003F BF[20130000]        <1>  mov edi, %1
    34 00000044 B8[66130000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if %0 == 3
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 00000049 66894702            <1>  mov [edi + 2], ax
    34 0000004D C1E810              <1>  shr eax, 16
    34 00000050 884704              <1>  mov [edi + 4], al
    34 00000053 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 00000056 5F                  <1>  pop edi
    34 00000057 58                  <1>  pop eax
    35                                  	set_desc	GDT.tss_1, TSS_1
    35 00000058 50                  <1>  push eax
    35 00000059 57                  <1>  push edi
    35                              <1> 
    35 0000005A BF[28130000]        <1>  mov edi, %1
    35 0000005F B8[3E140000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if %0 == 3
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 00000064 66894702            <1>  mov [edi + 2], ax
    35 00000068 C1E810              <1>  shr eax, 16
    35 0000006B 884704              <1>  mov [edi + 4], al
    35 0000006E 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 00000071 5F                  <1>  pop edi
    35 00000072 58                  <1>  pop eax
    36                                  	set_desc	GDT.tss_2, TSS_2
    36 00000073 50                  <1>  push eax
    36 00000074 57                  <1>  push edi
    36                              <1> 
    36 00000075 BF[30130000]        <1>  mov edi, %1
    36 0000007A B8[16150000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if %0 == 3
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 0000007F 66894702            <1>  mov [edi + 2], ax
    36 00000083 C1E810              <1>  shr eax, 16
    36 00000086 884704              <1>  mov [edi + 4], al
    36 00000089 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000008C 5F                  <1>  pop edi
    36 0000008D 58                  <1>  pop eax
    37                                  	set_desc	GDT.tss_3, TSS_3
    37 0000008E 50                  <1>  push eax
    37 0000008F 57                  <1>  push edi
    37                              <1> 
    37 00000090 BF[38130000]        <1>  mov edi, %1
    37 00000095 B8[EE150000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if %0 == 3
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000009A 66894702            <1>  mov [edi + 2], ax
    37 0000009E C1E810              <1>  shr eax, 16
    37 000000A1 884704              <1>  mov [edi + 4], al
    37 000000A4 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 000000A7 5F                  <1>  pop edi
    37 000000A8 58                  <1>  pop eax
    38                                  	set_desc	GDT.tss_4, TSS_4
    38 000000A9 50                  <1>  push eax
    38 000000AA 57                  <1>  push edi
    38                              <1> 
    38 000000AB BF[40130000]        <1>  mov edi, %1
    38 000000B0 B8[C6160000]        <1>  mov eax, %2
    38                              <1> 
    38                              <1>  %if %0 == 3
    38                              <1>  mov [edi + 0], %3
    38                              <1>  %endif
    38                              <1> 
    38 000000B5 66894702            <1>  mov [edi + 2], ax
    38 000000B9 C1E810              <1>  shr eax, 16
    38 000000BC 884704              <1>  mov [edi + 4], al
    38 000000BF 886707              <1>  mov [edi + 7], ah
    38                              <1> 
    38 000000C2 5F                  <1>  pop edi
    38 000000C3 58                  <1>  pop eax
    39                                  	set_desc	GDT.tss_5, TSS_5
    39 000000C4 50                  <1>  push eax
    39 000000C5 57                  <1>  push edi
    39                              <1> 
    39 000000C6 BF[48130000]        <1>  mov edi, %1
    39 000000CB B8[9E170000]        <1>  mov eax, %2
    39                              <1> 
    39                              <1>  %if %0 == 3
    39                              <1>  mov [edi + 0], %3
    39                              <1>  %endif
    39                              <1> 
    39 000000D0 66894702            <1>  mov [edi + 2], ax
    39 000000D4 C1E810              <1>  shr eax, 16
    39 000000D7 884704              <1>  mov [edi + 4], al
    39 000000DA 886707              <1>  mov [edi + 7], ah
    39                              <1> 
    39 000000DD 5F                  <1>  pop edi
    39 000000DE 58                  <1>  pop eax
    40                                  	set_desc	GDT.tss_6, TSS_6
    40 000000DF 50                  <1>  push eax
    40 000000E0 57                  <1>  push edi
    40                              <1> 
    40 000000E1 BF[50130000]        <1>  mov edi, %1
    40 000000E6 B8[76180000]        <1>  mov eax, %2
    40                              <1> 
    40                              <1>  %if %0 == 3
    40                              <1>  mov [edi + 0], %3
    40                              <1>  %endif
    40                              <1> 
    40 000000EB 66894702            <1>  mov [edi + 2], ax
    40 000000EF C1E810              <1>  shr eax, 16
    40 000000F2 884704              <1>  mov [edi + 4], al
    40 000000F5 886707              <1>  mov [edi + 7], ah
    40                              <1> 
    40 000000F8 5F                  <1>  pop edi
    40 000000F9 58                  <1>  pop eax
    41 000000FA 0F0115[60130000]        	lgdt		[GDTR]
    42                                  
    43 00000101 BC00341000              	mov	esp, SP_TASK_0
    44 00000106 66B83000                	mov	ax, SS_TASK_0	; set tss0
    45 0000010A 0F00D8                  	ltr	ax
    46                                  	; say "this process is task 0" to CPU
    47                                  
    48                                  
    49 0000010D E859090000              	cdecl	init_int
    50 00000112 E8F2070000              	cdecl	init_pic
    51                                  
    52 00000117 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    52 0000011F [A20A0000]668907C1-
    52 00000127 E810668947065F58   
    53                                  	; set_vect	0x06, ope_exce
    54 0000012F 5057BF70001000B8-       	set_vect	0x0E, int_pf
    54 00000137 [4C110000]668907C1-
    54 0000013F E810668947065F58   
    55 00000147 5057BF38001000B8-       	set_vect	0x07, int_nm
    55 0000014F [A30C0000]668907C1-
    55 00000157 E810668947065F58   
    56 0000015F 5057BF00011000B8-       	set_vect	0x20, int_timer
    56 00000167 [B2110000]668907C1-
    56 0000016F E810668947065F58   
    57 00000177 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    57 0000017F [C00A0000]668907C1-
    57 00000187 E810668947065F58   
    58 0000018F 5057BF40011000B8-       	set_vect	0x28, int_rtc
    58 00000197 [CC080000]668907C1-
    58 0000019F E810668947065F58   
    59 000001A7 5057BF08041000B8-       	set_vect	0x81, trap_gate_81, word 0xEF00	; type = trap
    59 000001AF [FB0B0000]66C74704-
    59 000001B7 00EF668907C1E81066-
    59 000001C0 8947065F58         
    60 000001C5 5057BF10041000B8-       	set_vect	0x82, trap_gate_82, word 0xEF00
    60 000001CD [210C0000]66C74704-
    60 000001D5 00EF668907C1E81066-
    60 000001DE 8947065F58         
    61                                  
    62 000001E3 E8C20E0000              	cdecl	init_page
    63                                  
    64                                  	;mov	eax, CR3_BASE
    65                                  	;mov	cr3, eax
    66                                  	
    67                                  	;mov	eax, cr0
    68                                  	;or	eax, (1 << 31)
    69                                  	;mov	cr0, eax
    70                                  	;jmp	$ + 2
    71                                  
    72                                  	;mov	eax, 0xffff00
    73                                  	;mov	[eax], dword 1
    74                                  	;cdecl	itoa, dword [eax], .t1, 16, 16, 0b0100
    75                                  	;cdecl	draw_str, 0, 10, 0x010F, .t1
    76                                  
    77                                  	set_gate	GDT.call_gate, call_gate
    77 000001E8 50                  <1>  push eax
    77 000001E9 57                  <1>  push edi
    77                              <1> 
    77 000001EA BF[58130000]        <1>  mov edi, %1
    77 000001EF B8[AB0B0000]        <1>  mov eax, %2
    77                              <1> 
    77 000001F4 668907              <1>  mov [edi + 0], ax
    77 000001F7 C1E810              <1>  shr eax, 16
    77 000001FA 66894706            <1>  mov [edi + 6], ax
    77                              <1> 
    77 000001FE 5F                  <1>  pop edi
    77 000001FF 58                  <1>  pop eax
    78                                  	
    79 00000200 6A10E8EE0600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    79 00000209 C404               
    80 0000020B E82C100000              	cdecl	int_en_timer
    81                                  	
    82                                  	outp	0x21, 0b1111_1000	; slave
    82 00000210 B0F8                <1>  mov al, %2
    82 00000212 E621                <1>  out %1, al
    83                                  	outp	0xA1, 0b1111_1111	; rtc
    83 00000214 B0FF                <1>  mov al, %2
    83 00000216 E6A1                <1>  out %1, al
    84                                  	
    85 00000218 FB                      	sti
    86                                  	
    87 00000219 6A0D6A3FE89E020000-     	cdecl	draw_font, 63, 13
    87 00000222 6683C408           
    88 00000226 6A046A3FE80A030000-     	cdecl	draw_color_bar, 63, 4
    88 0000022F 6683C408           
    89                                  
    90 00000233 68[E5020000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    90 0000023B 00006A0E6A19E8B502-
    90 00000244 00006683C410       
    91                                  	
    92                                  	;jmp	SS_TASK_1:10000
    93                                  
    94                                  
    95                                  
    96                                  	; mov	eax, 0x4321
    97                                  	;cdecl	BOOT_SIZE + KERNEL_SIZE + 0x1000
    98 0000024A E8(03200000)            	cdecl	RUST_LOAD + 0x1003
    99                                  	; mov	eax, BOOT_SIZE + KERNEL_SIZE + 0x1000
   100                                  	; cdecl	draw_num, func, 0, 0
   101                                  
   102                                  	; call	0x104F00
   103                                  	; cdecl	draw_num, BOOT_SIZE + KERNEL_SIZE , 0, 0
   104 0000024F 6A006A0050E8820D00-     	cdecl	draw_num, eax, 0, 0
   104 00000258 006683C40C         
   105                                  	; db	0x12, 0x34, 0x56, 0x78
   106                                  	
   107                                  	; cdecl	0x1000, 0x1234, 0, 2
   108 0000025D EBFE                    	jmp	$
   109                                  
   110                                  .10L:
   111                                  
   112 0000025F E8ED0F0000              	cdecl	draw_rotation_bar
   113                                  
   114 00000264 68[0C030000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
   114 0000026A [E40A0000]E8890800-
   114 00000272 006683C408         
   115 00000277 83F800                  	cmp	eax, 0
   116 0000027A 74E3                    	je	.10L
   117                                  
   118 0000027C 68[E40A0000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
   118 00000284 02E8CE0800006683C4-
   118 0000028D 0C                 
   119                                  
   120 0000028E A0[0C030000]            	mov	al, [.int_key]
   121 00000293 3C02                    	cmp	al, 0x02
   122 00000295 7522                    	jne	.14L
   123                                  
   124 00000297 FF15F09B0000            	call	[BOOT_LOAD + BOOT_SIZE - 16]
   125 0000029D BE00780000              	mov	esi, 0x7800
   126 000002A2 C6462000                	mov	[esi + 32], byte 0
   127 000002A6 5668040F00006A006A-     	cdecl	draw_str, 0, 0, 0x0F04, esi
   127 000002AF 00E8460200006683C4-
   127 000002B8 10                 
   128                                  
   129                                  .14L:
   130 000002B9 A0[0C030000]            	mov	al, [.int_key]
   131 000002BE 50E85A0A00006683C4-     	cdecl	ctrl_alt_end, eax
   131 000002C7 04                 
   132 000002C8 83F800                  	cmp	eax, 0
   133 000002CB 7492                    	je	.10L
   134                                  
   135 000002CD B800000000              	mov	eax, 0
   136 000002D2 0FAB05[10030000]        	bts	[.once], eax
   137 000002D9 7284                    	jc	.10L
   138 000002DB E8B00A0000              	cdecl	power_off
   139                                  
   140 000002E0 E97AFFFFFF              	jmp	.10L
   141                                  	
   142                                  	
   143 000002E5 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   143 000002EE 65726E656C212000   
   144 000002F6 2D2D2D2D00              .t0:	db	"----",0
   145 000002FB 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
   145 00000304 2D2D2D2D2D2D2D00   
   146 0000030C 00000000                .int_key:	dd	0
   147 00000310 00000000                .once:		dd	0
   148                                  
   149                                  ALIGN	4,	db	0
   150 00000314 00000000                FONT_ADR:	dd	0
   151 00000318 00000000                RTC_TIME:	dd	0
   152                                  
   153                                  
   154                                  
   155                                  ope_exce:
   156 0000031C 6A026A006834120000-     	cdecl	draw_num, 0x1234, 0, 2
   156 00000325 E8B10C00006683C40C 
   157 0000032E EBFE                    	jmp	$
   158                                  
   159                                  
   160                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 00000330 55                  <1> 	push	ebp
     4 00000331 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 00000333 50                  <1> 	push	eax
     7 00000334 52                  <1> 	push	edx
     8                              <1> 
     9 00000335 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 00000338 80E403              <1> 	and	ah, 0x03
    11 0000033B B004                <1> 	mov	al, 0x04	; read map
    12 0000033D 66BACE03            <1> 	mov	dx, 0x03CE
    13 00000341 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 00000343 5A                  <1> 	pop	edx
    16 00000344 58                  <1> 	pop	eax
    17                              <1> 
    18 00000345 89EC                <1> 	mov	esp,ebp
    19 00000347 5D                  <1> 	pop	ebp
    20                              <1> 
    21 00000348 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 00000349 55                  <1> 	push	ebp
    25 0000034A 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 0000034C 50                  <1> 	push	eax
    28 0000034D 52                  <1> 	push	edx
    29                              <1> 
    30 0000034E 8A6508              <1> 	mov	ah, [ebp + 8]
    31 00000351 80E40F              <1> 	and	ah, 0x0F
    32 00000354 B002                <1> 	mov	al, 0x02		; write select
    33 00000356 66BAC403            <1> 	mov	dx, 0x03C4
    34 0000035A 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 0000035C 5A                  <1> 	pop	edx
    37 0000035D 58                  <1> 	pop	eax
    38                              <1> 
    39 0000035E 89EC                <1> 	mov	esp, ebp
    40 00000360 5D                  <1> 	pop	ebp
    41                              <1> 
    42 00000361 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 00000362 55                  <1> 	push	ebp
    51 00000363 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 00000365 50                  <1> 	push	eax
    54 00000366 53                  <1> 	push	ebx
    55 00000367 51                  <1> 	push	ecx
    56 00000368 52                  <1> 	push	edx
    57 00000369 56                  <1> 	push	esi
    58 0000036A 57                  <1> 	push	edi
    59                              <1> 
    60 0000036B 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 0000036E 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 00000371 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 00000375 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 00000379 84C7                <1> 	test	bh, al			; BACK
    67 0000037B 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 0000037E FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 00000380 84C3                <1> 	test	bl, al			; FORWARD
    71 00000382 0F94C2              <1> 	setz	dl
    72 00000385 FECA                <1> 	dec	dl
    73                              <1> 
    74 00000387 FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 00000388 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 0000038D AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 0000038E 88C4                <1> 	mov	ah, al			; AL is font data
    80 00000390 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 00000392 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 00000394 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 0000039A 7404                <1> 	jz	.11F
    86 0000039C 2227                <1> 	and	ah, [edi]
    87 0000039E EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 000003A0 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 000003A2 08E0                <1> 	or	al,ah
    92 000003A4 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 000003A6 83C750              <1> 	add	edi,80			; next
    95 000003A9 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 000003AB 5F                  <1> 	pop	edi
    99 000003AC 5E                  <1> 	pop	esi
   100 000003AD 5A                  <1> 	pop	edx
   101 000003AE 59                  <1> 	pop	ecx
   102 000003AF 5B                  <1> 	pop	ebx
   103 000003B0 58                  <1> 	pop	eax
   104                              <1> 
   105 000003B1 89EC                <1> 	mov	esp, ebp
   106 000003B3 5D                  <1> 	pop	ebp
   107                              <1> 
   108 000003B4 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 000003B5 55                  <1> 	push	ebp
   113 000003B6 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 000003B8 57                  <1> 	push	edi
   116 000003B9 50                  <1> 	push	eax
   117 000003BA 53                  <1> 	push	ebx
   118                              <1> 
   119 000003BB 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 000003BE 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 000003C2 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 000003C6 84C3                <1> 	test	bl, al
   124 000003C8 0F94C3              <1> 	setz	bl
   125 000003CB FECB                <1> 	dec	bl
   126                              <1> 
   127 000003CD 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 000003D0 88C4                <1> 	mov	ah, al
   129 000003D2 F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 000003D4 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 000003D6 20D8                <1> 	and	al, bl
   134 000003D8 08E0                <1> 	or	al, ah
   135 000003DA 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 000003DC 5B                  <1> 	pop	ebx
   138 000003DD 58                  <1> 	pop	eax
   139 000003DE 5F                  <1> 	pop	edi
   140                              <1> 
   141 000003DF 89EC                <1> 	mov	esp, ebp
   142 000003E1 5D                  <1> 	pop	ebp
   143                              <1> 
   144 000003E2 C3                  <1> 	ret
   145                              <1> 
   161                                  %include	"../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2 000003E3 55                  <1> 	push	ebp
     3 000003E4 89E5                <1> 	mov	ebp,esp
     4                              <1> 
     5 000003E6 57                  <1> 	push	edi
     6 000003E7 56                  <1> 	push	esi
     7 000003E8 51                  <1> 	push	ecx
     8                              <1> 
     9 000003E9 FC                  <1> 	cld
    10 000003EA 8B7D08              <1> 	mov	edi,[ebp + 8]
    11 000003ED 8B750C              <1> 	mov	esi,[ebp + 12]
    12 000003F0 8B4D10              <1> 	mov	ecx,[ebp + 16]
    13                              <1> 
    14 000003F3 F3A4                <1> 	rep	movsb
    15                              <1> 
    16 000003F5 59                  <1> 	pop	ecx
    17 000003F6 5E                  <1> 	pop	esi
    18 000003F7 5F                  <1> 	pop	edi
    19                              <1> 
    20 000003F8 89EC                <1> 	mov	esp,ebp
    21 000003FA 5D                  <1> 	pop	ebp
    22                              <1> 
    23 000003FB C3                  <1> 	ret
    24                              <1> 
   162                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 000003FC 55                  <1> 	push	ebp
     4 000003FD 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000003FF 56                  <1> 	push	esi
     7 00000400 57                  <1> 	push	edi
     8 00000401 50                  <1> 	push	eax
     9 00000402 53                  <1> 	push	ebx
    10 00000403 51                  <1> 	push	ecx
    11 00000404 52                  <1> 	push	edx
    12                              <1> 
    13 00000405 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 00000409 C1E604              <1> 	shl	esi, 4
    15 0000040C 0335[14030000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 00000412 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 00000415 C1E708              <1> 	shl	edi, 8
    19 00000418 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 0000041F 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 00000422 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 00000426 6A03E803FFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 0000042F C404                <1>
    25 00000431 6A08E811FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 0000043A C404                <1>
    26 0000043C 536A085756E81CFFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 00000445 FF6683C410          <1>
    27                              <1> 
    28 0000044A 6A02E8DFFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 00000453 C404                <1>
    29 00000455 6A04E8EDFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 0000045E C404                <1>
    30 00000460 536A045756E8F8FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 00000469 FF6683C410          <1>
    31                              <1> 
    32 0000046E 6A01E8BBFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 00000477 C404                <1>
    33 00000479 6A02E8C9FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 00000482 C404                <1>
    34 00000484 536A025756E8D4FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 0000048D FF6683C410          <1>
    35                              <1> 	
    36 00000492 6A00E897FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 0000049B C404                <1>
    37 0000049D 6A01E8A5FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 000004A6 C404                <1>
    38 000004A8 536A015756E8B0FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 000004B1 FF6683C410          <1>
    39                              <1> 
    40 000004B6 5A                  <1> 	pop	edx
    41 000004B7 59                  <1> 	pop	ecx
    42 000004B8 5B                  <1> 	pop	ebx
    43 000004B9 58                  <1> 	pop	eax
    44 000004BA 5F                  <1> 	pop	edi
    45 000004BB 5E                  <1> 	pop	esi
    46                              <1> 
    47 000004BC 89EC                <1> 	mov	esp, ebp
    48 000004BE 5D                  <1> 	pop	ebp
    49                              <1> 
    50 000004BF C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
   163                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 000004C0 55                  <1> 	push	ebp
     3 000004C1 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000004C3 50                  <1> 	push	eax
     6 000004C4 53                  <1> 	push	ebx
     7 000004C5 51                  <1> 	push	ecx
     8                              <1> 
     9 000004C6 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 000004CB 81F900010000        <1> 	cmp	ecx,256
    12 000004D1 7321                <1> 	jae	.10E
    13                              <1> 
    14 000004D3 89C8                <1> 	mov	eax, ecx
    15 000004D5 83E00F              <1> 	and	eax, 0b00001111
    16 000004D8 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 000004DB 89CB                <1> 	mov	ebx, ecx
    19 000004DD C1EB04              <1> 	shr	ebx, 4
    20 000004E0 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 000004E3 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 000004EC FF6683C410          <1>
    23                              <1> 	
    24 000004F1 41                  <1> 	inc	ecx
    25 000004F2 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 000004F4 59                  <1> 	pop	ecx
    30 000004F5 5B                  <1> 	pop	ebx
    31 000004F6 58                  <1> 	pop	eax
    32                              <1> 
    33 000004F7 89EC                <1> 	mov	esp, ebp
    34 000004F9 5D                  <1> 	pop	ebp
    35                              <1> 
    36 000004FA C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
   164                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 000004FB 55                  <1> 	push	ebp
     3 000004FC 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 000004FE 50                  <1> 	push	eax
     6 000004FF 53                  <1> 	push	ebx
     7 00000500 51                  <1> 	push	ecx
     8 00000501 52                  <1> 	push	edx
     9 00000502 56                  <1> 	push	esi
    10                              <1> 
    11 00000503 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 00000506 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 00000509 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 0000050D 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 00000510 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 00000511 AC                  <1> 	lodsb
    20 00000512 3C00                <1> 	cmp	al, 0
    21 00000514 741A                <1> 	je	.10E
    22                              <1> %ifdef	USE_SYSTEM_CALL
    23 00000516 CD81                <1> 	int 0x81
    24                              <1> %else
    25                              <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    26                              <1> %endif
    27 00000518 43                  <1> 	inc	ebx
    28 00000519 83FB50              <1> 	cmp	ebx, 80
    29 0000051C 7CF3                <1> 	jl	.10L
    30 0000051E BB00000000          <1> 	mov	ebx, 0
    31 00000523 41                  <1> 	inc	ecx
    32 00000524 83F91E              <1> 	cmp	ecx, 30
    33 00000527 7CE8                <1> 	jl	.10L
    34 00000529 B900000000          <1> 	mov	ecx, 0
    35                              <1> 	
    36 0000052E EBE1                <1> 	jmp	.10L
    37                              <1> .10E:
    38                              <1> 
    39 00000530 5E                  <1> 	pop	esi
    40 00000531 5A                  <1> 	pop	edx
    41 00000532 59                  <1> 	pop	ecx
    42 00000533 5B                  <1> 	pop	ebx
    43 00000534 58                  <1> 	pop	eax
    44                              <1> 
    45 00000535 89EC                <1> 	mov	esp, ebp
    46 00000537 5D                  <1> 	pop	ebp
    47                              <1> 
    48 00000538 C3                  <1> 	ret
   165                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 00000539 55                  <1> 	push	ebp
     3 0000053A 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000053C 56                  <1> 	push	esi
     6 0000053D 57                  <1> 	push	edi
     7 0000053E 50                  <1> 	push	eax
     8 0000053F 53                  <1> 	push	ebx
     9 00000540 51                  <1> 	push	ecx
    10 00000541 52                  <1> 	push	edx
    11                              <1> 
    12 00000542 8B7508              <1> 	mov	esi, [ebp + 8]
    13 00000545 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 00000548 B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 0000054D 83F910              <1> 	cmp	ecx, 16
    18 00000550 732E                <1> 	jae	.10E
    19                              <1> 
    20 00000552 89C8                <1> 	mov	eax, ecx
    21 00000554 83E001              <1> 	and	eax, 0x01	; % 2
    22 00000557 C1E003              <1> 	shl	eax, 3		; *= 8
    23 0000055A 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 0000055C 89CB                <1> 	mov	ebx, ecx
    26 0000055E D1EB                <1> 	shr	ebx, 1		; / 2
    27 00000560 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 00000562 89CA                <1> 	mov	edx, ecx
    32 00000564 D1E2                <1> 	shl	edx, 1
    33 00000566 8B92[93050000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 0000056C 68[8A050000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 00000574 E882FFFFFF6683C410  <1>
    36                              <1> 
    37 0000057D 41                  <1> 	inc	ecx
    38 0000057E EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 00000580 52                  <1> 	push	edx	
    42 00000581 51                  <1> 	push	ecx	
    43 00000582 53                  <1> 	push	ebx	
    44 00000583 50                  <1> 	push	eax	
    45 00000584 57                  <1> 	push	edi	
    46 00000585 56                  <1> 	push	esi	
    47                              <1> 
    48 00000586 89EC                <1> 	mov	esp, ebp
    49 00000588 5D                  <1> 	pop	ebp
    50                              <1> 
    51 00000589 C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 0000058A 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 00000593 00000008            <1> .t0:	dw 0x0000,0x0800
    57 00000597 00010009            <1> 	dw 0x0100,0x0900
    58 0000059B 0002000A            <1> 	dw 0x0200,0x0A00
    59 0000059F 0003000B            <1> 	dw 0x0300,0x0B00
    60 000005A3 0004000C            <1> 	dw 0x0400,0x0C00
    61 000005A7 0005000D            <1> 	dw 0x0500,0x0D00
    62 000005AB 0006000E            <1> 	dw 0x0600,0x0E00
    63 000005AF 0007000F            <1> 	dw 0x0700,0x0F00
   166                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 000005B3 55                  <1> 	push	ebp
     4 000005B4 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000005B6 57                  <1> 	push	edi
     7 000005B7 53                  <1> 	push	ebx
     8 000005B8 51                  <1> 	push	ecx
     9                              <1> 
    10 000005B9 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 000005BC C1E704              <1> 	shl	edi, 4
    12 000005BF 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 000005C6 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 000005C9 89D9                <1> 	mov	ecx, ebx
    16 000005CB C1EB03              <1> 	shr	ebx, 3
    17 000005CE 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 000005D0 83E107              <1> 	and	ecx, 0x07
    20 000005D3 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 000005D8 D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 000005DA 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 000005DD 6A03E84CFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 000005E6 C404                <1>
    28 000005E8 6A08E85AFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 000005F1 C404                <1>
    29 000005F3 516A085753E8B8FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 000005FC FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 00000601 6A02E828FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 0000060A C404                <1>
    34 0000060C 6A04E836FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 00000615 C404                <1>
    35 00000617 516A045753E894FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 00000620 FF6683C410          <1>
    36                              <1> 	
    37 00000625 6A01E804FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 0000062E C404                <1>
    38 00000630 6A02E812FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 00000639 C404                <1>
    39 0000063B 516A025753E870FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 00000644 FF6683C410          <1>
    40                              <1> 	
    41 00000649 6A00E8E0FCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 00000652 C404                <1>
    42 00000654 6A01E8EEFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 0000065D C404                <1>
    43 0000065F 516A015753E84CFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 00000668 FF6683C410          <1>
    44                              <1> 
    45 0000066D 59                  <1> 	pop	ecx
    46 0000066E 5B                  <1> 	pop	ebx
    47 0000066F 5F                  <1> 	pop	edi
    48                              <1> 
    49 00000670 89EC                <1> 	mov	esp, ebp
    50 00000672 5D                  <1> 	pop	ebp
    51                              <1> 
    52 00000673 C3                  <1> 	ret
    53                              <1> 
   167                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 00000674 55                  <1> 	push	ebp
     3 00000675 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000677 6A00                <1> 	push	dword 0	; SUM: - 4
     6 00000679 6A00                <1> 	push	dword 0	; x0 : - 8
     7 0000067B 6A00                <1> 	push	dword 0	; wid: -12
     8 0000067D 6A00                <1> 	push	dword 0	; inx: -16
     9 0000067F 6A00                <1> 	push	dword 0	; y0 : -20
    10 00000681 6A00                <1> 	push	dword 0	; hei: -24
    11 00000683 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 00000685 50                  <1> 	push	eax
    14 00000686 53                  <1> 	push	ebx
    15 00000687 51                  <1> 	push	ecx
    16 00000688 52                  <1> 	push	edx
    17 00000689 56                  <1> 	push	esi
    18 0000068A 57                  <1> 	push	edi
    19                              <1> 
    20 0000068B 8B4508              <1> 	mov	eax, [ebp + 8]
    21 0000068E 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 00000691 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 00000693 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 00000695 F7DB                <1> 	neg	ebx
    26 00000697 BEFFFFFFFF          <1> 	mov	esi, -1
    27 0000069C EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 0000069E BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 000006A3 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 000006A6 8B5514              <1> 	mov	edx, [ebp +20]
    34 000006A9 29CA                <1> 	sub	edx, ecx
    35 000006AB 7D09                <1> 	jge	.20F
    36                              <1> 
    37 000006AD F7DA                <1> 	neg	edx
    38 000006AF BFFFFFFFFF          <1> 	mov	edi, -1
    39 000006B4 EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 000006B6 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 000006BB 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 000006BE 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 000006C1 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 000006C4 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 000006C7 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 000006CA 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 000006CD 39D3                <1> 	cmp	ebx, edx
    53 000006CF 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 000006D1 8D75EC              <1> 	lea	esi, [ebp -20]
    56 000006D4 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 000006D7 EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 000006D9 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 000006DC 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 000006DF 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 000006E2 83F900              <1> 	cmp	ecx, 0
    67 000006E5 7505                <1> 	jnz	.30E
    68 000006E7 B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75                              <1> %ifdef	USE_SYSTEM_CALL
    76 000006EC 51                  <1> 	push	ecx
    77 000006ED 52                  <1> 	push	edx
    78 000006EE 53                  <1> 	push	ebx
    79                              <1> 
    80 000006EF 8B4DF8              <1> 	mov	ecx, [ebp - 8]
    81 000006F2 8B55EC              <1> 	mov	edx, [ebp -20]
    82 000006F5 8B5D18              <1> 	mov	ebx, [ebp +24]
    83                              <1> 
    84 000006F8 CD82                <1> 	int	0x82
    85                              <1> 
    86 000006FA 5B                  <1> 	pop	ebx
    87 000006FB 5A                  <1> 	pop	edx
    88 000006FC 59                  <1> 	pop	ecx
    89                              <1> %else	
    90                              <1> 	cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    91                              <1> %endif
    92                              <1> 	
    93                              <1> 	; update coordinate
    94 000006FD 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    95 00000700 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    96                              <1> 
    97 00000702 8B45FC              <1> 	mov	eax, [ebp - 4]
    98 00000705 0347FC              <1> 	add	eax, [edi - 4]
    99 00000708 8B5EFC              <1> 	mov	ebx, [esi - 4]
   100                              <1> 
   101 0000070B 39D8                <1> 	cmp	eax, ebx
   102 0000070D 7C07                <1> 	jl	.52E
   103 0000070F 29D8                <1> 	sub	eax, ebx	; sum -= wid
   104                              <1> 	; sum can only add -1 or 1
   105                              <1> 	; so. not be  "dif * 2 < sum" 
   106                              <1> 
   107 00000711 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
   108 00000714 011F                <1> 	add	[edi - 0], ebx
   109                              <1> .52E:
   110 00000716 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
   111                              <1> 
   112 00000719 E2D1                <1> 	loop	.50L
   113                              <1> .50E:
   114                              <1> 
   115                              <1> 
   116 0000071B 5F                  <1> 	pop	edi
   117 0000071C 5E                  <1> 	pop	esi
   118 0000071D 5A                  <1> 	pop	edx
   119 0000071E 59                  <1> 	pop	ecx
   120 0000071F 5B                  <1> 	pop	ebx
   121 00000720 58                  <1> 	pop	eax
   122                              <1> 
   123 00000721 89EC                <1> 	mov	esp, ebp
   124 00000723 5D                  <1> 	pop	ebp
   125                              <1> 
   126 00000724 C3                  <1> 	ret
   127                              <1> 
   128                              <1> 
   168                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 00000725 55                  <1> 	push	ebp
     3 00000726 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000728 50                  <1> 	push	eax
     6 00000729 53                  <1> 	push	ebx
     7 0000072A 51                  <1> 	push	ecx
     8 0000072B 52                  <1> 	push	edx
     9 0000072C 56                  <1> 	push	esi
    10                              <1> 
    11 0000072D 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 00000730 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 00000733 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 00000736 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 00000739 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 0000073C 39C8                <1> 	cmp	eax, ecx
    21 0000073E 7C01                <1> 	jl	.10E		; OK
    22 00000740 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 00000741 39D3                <1> 	cmp	ebx, edx
    25 00000743 7C02                <1> 	jl	.20E		; OK
    26 00000745 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 00000747 5653515350E823FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 00000750 FF6683C414          <1>
    36 00000755 5652505350E815FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 0000075E FF6683C414          <1>
    37                              <1> 
    38 00000763 4A                  <1> 	dec	edx
    39 00000764 5652515250E806FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 0000076D FF6683C414          <1>
    40 00000772 42                  <1> 	inc	edx
    41                              <1> 
    42 00000773 49                  <1> 	dec	ecx
    43 00000774 5652515351E8F6FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 0000077D FF6683C414          <1>
    44                              <1> 
    45 00000782 5E                  <1> 	pop	esi
    46 00000783 5A                  <1> 	pop	edx
    47 00000784 59                  <1> 	pop	ecx
    48 00000785 5B                  <1> 	pop	ebx
    49 00000786 58                  <1> 	pop	eax
    50                              <1> 
    51 00000787 89EC                <1> 	mov	esp, ebp
    52 00000789 5D                  <1> 	pop	ebp
    53                              <1> 
    54 0000078A C3                  <1> 	ret
    55                              <1> 
   169                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 0000078B 55                  <1> 	push 	ebp
     3 0000078C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000078E 50                  <1> 	push	eax
     6 0000078F 53                  <1> 	push	ebx
     7 00000790 51                  <1> 	push	ecx
     8 00000791 52                  <1> 	push	edx
     9 00000792 56                  <1> 	push	esi
    10 00000793 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 00000794 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 00000798 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 0000079B 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 0000079E 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 000007A0 B020                <1> 	mov	al,' '
    27 000007A2 F7C304000000        <1> 	test	ebx, 0b0100
    28 000007A8 7402                <1> 	je	.42E
    29 000007AA B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 000007AC FC                  <1> 	cld
    32 000007AD F3AA                <1> 	rep	stosb
    33                              <1> 
    34 000007AF 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 000007B2 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 000007B5 89F7                <1> 	mov	edi, esi
    37 000007B7 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 000007B9 4F                  <1> 	dec	edi
    39                              <1> 
    40 000007BA F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 000007C0 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 000007C2 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 000007C5 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 000007C7 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 000007CA F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 000007D0 7410                <1> .20Q:	je	.20E		; not print sign
    51 000007D2 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 000007D5 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 000007D7 F7D8                <1> 	neg	eax		; ax *= -1
    54 000007D9 C6062D              <1> 	mov	[esi], byte '-'
    55 000007DC EB03                <1> 	jmp	.22E
    56 000007DE C6062B              <1> .22F:	mov	[esi], byte '+'
    57 000007E1 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 000007E2 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 000007E5 BA00000000          <1> 	mov	edx, 0
    64 000007EA F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 000007EC 89D6                <1> 	mov	esi, edx
    68 000007EE 8A96[06080000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 000007F4 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 000007F6 4F                  <1> 	dec	edi
    72                              <1> 
    73 000007F7 83F800              <1> 	cmp	eax,0
    74 000007FA E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 000007FC 5F                  <1> 	pop	edi
    79 000007FD 5E                  <1> 	pop	esi
    80 000007FE 5A                  <1> 	pop	edx
    81 000007FF 59                  <1> 	pop	ecx
    82 00000800 5B                  <1> 	pop	ebx
    83 00000801 58                  <1> 	pop	eax
    84                              <1> 
    85 00000802 89EC                <1> 	mov	esp, ebp
    86 00000804 5D                  <1> 	pop	ebp
    87                              <1> 
    88 00000805 C3                  <1> 	ret
    89                              <1> 
    90 00000806 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 0000080F 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   170                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 00000816 55                  <1> 	push	ebp
     3 00000817 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000819 50                  <1> 	push	eax
     6 0000081A 53                  <1> 	push	ebx
     7                              <1> 
     8 0000081B 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 0000081E 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 00000821 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 00000828 [88080000]53E859FF- <1>
    10 00000830 FFFF6683C414        <1>
    11                              <1> 
    12 00000836 88E3                <1> 	mov	bl, ah
    13 00000838 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 0000083F [85080000]53E842FF- <1>
    13 00000847 FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 0000084D C1E810              <1> 	shr	eax, 16
    17 00000850 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 00000857 [82080000]50E82AFF- <1>
    17 0000085F FFFF6683C414        <1>
    18                              <1> 
    19 00000865 68[82080000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 0000086D FF750CFF7508E883FC- <1>
    19 00000876 FFFF6683C410        <1>
    20                              <1> 
    21 0000087C 5B                  <1> 	pop	ebx
    22 0000087D 58                  <1> 	pop	eax
    23                              <1> 
    24 0000087E 89EC                <1> 	mov	esp, ebp
    25 00000880 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000881 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 00000882 5A5A3A              <1> .hour:	db	"ZZ:"
    31 00000885 5A5A3A              <1> .min:	db	"ZZ:"
    32 00000888 5A5A00              <1> .sec:	db	"ZZ", 0
   171                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 0000088B 55                  <1> 	push	ebp
     3 0000088C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000088E 53                  <1> 	push	ebx
     6                              <1> 
     7 0000088F B00A                <1> 	mov	al, 0x0A
     8 00000891 E670                <1> 	out	0x70, al
     9 00000893 E471                <1> 	in	al, 0x71
    10                              <1> 
    11 00000895 A880                <1> 	test	al, 0x80
    12 00000897 7407                <1> 	je	.10F
    13 00000899 B801000000          <1> 	mov	eax, 1		; data updating. error
    14 0000089E EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 000008A0 B004                <1> 	mov	al, 0x04	; Hour
    17 000008A2 E670                <1> 	out	0x70, al
    18 000008A4 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 000008A6 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 000008A9 B002                <1> 	mov	al, 0x02
    23 000008AB E670                <1> 	out	0x70, al
    24 000008AD E471                <1> 	in	al, 0x71
    25                              <1> 
    26 000008AF C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 000008B2 B000                <1> 	mov	al, 0x00
    29 000008B4 E670                <1> 	out	0x70, al
    30 000008B6 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 000008B8 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 000008BD 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 000008C0 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 000008C2 B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 000008C7 5B                  <1> 	pop	ebx
    45                              <1> 
    46 000008C8 89EC                <1> 	mov	esp, ebp
    47 000008CA 5D                  <1> 	pop	ebp
    48                              <1> 
    49 000008CB C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   172                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 000008CC 60                  <1> 	pusha		; all registers in stack
     3 000008CD 1E                  <1> 	push	ds
     4 000008CE 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 000008CF 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 000008D3 8ED8                <1> 	mov	ds, ax
     9 000008D5 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 000008D7 68[18030000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 000008DF FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 000008E5 B00C                <2>  mov al, %2
    13 000008E7 E670                <2>  out %1, al
    14 000008E9 E471                <1> 	in	al, 0x71
    15                              <1> 
    16 000008EB B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 000008ED E620                <1> 	out	0x20, al
    18 000008EF E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 000008F1 07                  <1> 	pop	es
    21 000008F2 1F                  <1> 	pop	ds
    22 000008F3 61                  <1> 	popa
    23                              <1> 
    24 000008F4 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 000008F5 55                  <1> 	push	ebp
    28 000008F6 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 000008F8 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 000008F9 B00B                <2>  mov al, %2
    32 000008FB E670                <2>  out %1, al
    33                              <1> 
    34 000008FD E471                <1> 	in	al, 0x71
    35 000008FF 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 00000902 E671                <1> 	out	0x71, al
    38                              <1> 
    39 00000904 58                  <1> 	pop	eax
    40                              <1> 
    41 00000905 89EC                <1> 	mov	esp, ebp
    42 00000907 5D                  <1> 	pop	ebp
    43                              <1> 
    44 00000908 C3                  <1> 	ret
    45                              <1> 
   173                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 00000909 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 0000090A B011                <2>  mov al, %2
     6 0000090C E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 0000090E B020                <2>  mov al, %2
     7 00000910 E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 00000912 B004                <2>  mov al, %2
     8 00000914 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 00000916 B005                <2>  mov al, %2
     9 00000918 E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 0000091A B0FF                <2>  mov al, %2
    10 0000091C E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 0000091E B011                <2>  mov al, %2
    12 00000920 E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 00000922 B028                <2>  mov al, %2
    13 00000924 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 00000926 B002                <2>  mov al, %2
    14 00000928 E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 0000092A B001                <2>  mov al, %2
    15 0000092C E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 0000092E B0FF                <2>  mov al, %2
    16 00000930 E6A1                <2>  out %1, al
    17                              <1> 
    18 00000932 58                  <1> 	pop	eax
    19                              <1> 
    20 00000933 C3                  <1> 	ret
   174                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 00000934 FB                  <1> 	sti
     3                              <1> 
     4 00000935 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 0000093E 19E8B7FBFFFF6683C4- <1>
     4 00000947 10                  <1>
     5                              <1> 
     6 00000948 8B0424              <1> 	mov	eax, [esp + 0]
     7 0000094B 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 00000952 [100A0000]50E82FFE- <1>
     7 0000095A FFFF6683C414        <1>
     8                              <1> 	
     9 00000960 8B442404            <1> 	mov	eax, [esp + 4]
    10 00000964 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 0000096B [210A0000]50E816FE- <1>
    10 00000973 FFFF6683C414        <1>
    11                              <1> 	
    12 00000979 8B442408            <1> 	mov	eax, [esp + 8]
    13 0000097D 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 00000984 [320A0000]50E8FDFD- <1>
    13 0000098C FFFF6683C414        <1>
    14                              <1> 	
    15 00000992 8B44240C            <1> 	mov	eax, [esp +12]
    16 00000996 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 0000099D [430A0000]50E8E4FD- <1>
    16 000009A5 FFFF6683C414        <1>
    17                              <1> 
    18 000009AB 68[090A0000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 000009B3 00006A106A19E83DFB- <1>
    18 000009BC FFFF6683C410        <1>
    19 000009C2 68[1A0A0000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 000009CA 00006A116A19E826FB- <1>
    19 000009D3 FFFF6683C410        <1>
    20 000009D9 68[2B0A0000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 000009E1 00006A126A19E80FFB- <1>
    20 000009EA FFFF6683C410        <1>
    21 000009F0 68[3C0A0000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 000009F8 00006A136A19E8F8FA- <1>
    21 00000A01 FFFF6683C410        <1>
    22                              <1> 
    23 00000A07 EBFE                <1> 	jmp	$
    24                              <1> 
    25 00000A09 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 00000A10 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 00000A19 00                  <1>
    27 00000A1A 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 00000A21 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 00000A2A 00                  <1>
    29 00000A2B 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 00000A32 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 00000A3B 00                  <1>
    31 00000A3C 2020202B31323A      <1> .s4:	db	"   +12:"
    32 00000A43 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 00000A4C 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 00000A4D 9C                  <1> 	pushf
    37 00000A4E 0E                  <1> 	push	cs
    38 00000A4F 68[34090000]        <1> 	push	int_stop
    39                              <1> 
    40 00000A54 B8[5A0A0000]        <1> 	mov	eax, .s0
    41 00000A59 CF                  <1> 	iret
    42                              <1> 
    43 00000A5A 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 00000A63 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 00000A6B 55                  <1> 	push	ebp
    47 00000A6C 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 00000A6E 50                  <1> 	push	eax
    50 00000A6F 53                  <1> 	push	ebx
    51 00000A70 51                  <1> 	push	ecx
    52 00000A71 57                  <1> 	push	edi
    53                              <1> 
    54 00000A72 8D05[4D0A0000]      <1> 	lea	eax, [int_default]
    55 00000A78 BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000A7D 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 00000A7F B900010000          <1> 	mov	ecx, 256
    65 00000A84 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000A89 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 00000A8B 894704              <1> 	mov	[edi + 4], eax	; top
    69 00000A8E 83C708              <1> 	add	edi, 8
    70 00000A91 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 00000A93 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000A9A 5F                  <1> 	pop	edi
    75 00000A9B 59                  <1> 	pop	ecx
    76 00000A9C 5B                  <1> 	pop	ebx
    77 00000A9D 58                  <1> 	pop	eax
    78                              <1> 
    79 00000A9E 89EC                <1> 	mov	esp, ebp
    80 00000AA0 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00000AA1 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 00000AA2 9C                  <1> 	pushf
    86 00000AA3 0E                  <1> 	push	cs
    87 00000AA4 68[34090000]        <1> 	push	int_stop
    88                              <1> 
    89 00000AA9 B8[AF0A0000]        <1> 	mov	eax, .s0
    90 00000AAE CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 00000AAF 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 00000AB8 44495620203E2000    <1>
   175                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 00000AC0 60                  <1> 	pusha
     3 00000AC1 1E                  <1> 	push	ds
     4 00000AC2 06                  <1> 	push	es
     5                              <1> 
     6 00000AC3 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 00000AC7 8ED8                <1> 	mov	ds, ax
     8 00000AC9 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000ACB E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 00000ACD 5068[E40A0000]E854- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 00000AD5 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 00000ADC B020                <2>  mov al, %2
    16 00000ADE E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 00000AE0 07                  <1> 	pop	es
    20 00000AE1 1F                  <1> 	pop	ds
    21 00000AE2 61                  <1> 	popa
    22                              <1> 
    23 00000AE3 CF                  <1> 	iret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000AE4 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   176                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   177                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 00000AFC 55                  <1> 	push	ebp
     4 00000AFD 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000AFF 56                  <1> 	push	esi
     7 00000B00 57                  <1> 	push	edi
     8 00000B01 53                  <1> 	push	ebx
     9                              <1> 
    10 00000B02 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000B05 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 00000B08 B800000000          <1> 	mov	eax, 0
    14 00000B0D 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000B0F 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000B12 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000B14 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 00000B18 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 00000B1A 43                  <1> 	inc	ebx
    23 00000B1B 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 00000B1E 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000B20 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000B25 5B                  <1> 	pop	ebx
    30 00000B26 5F                  <1> 	pop	edi
    31 00000B27 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000B28 89EC                <1> 	mov	esp, ebp
    34 00000B2A 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000B2B C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 00000B2C 55                  <1> 	push	ebp
    40 00000B2D 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 00000B2F 56                  <1> 	push	esi
    43 00000B30 53                  <1> 	push	ebx
    44 00000B31 51                  <1> 	push	ecx
    45                              <1> 
    46 00000B32 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000B35 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000B38 89D9                <1> 	mov	ecx, ebx
    50 00000B3A 41                  <1> 	inc	ecx
    51 00000B3B 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 00000B3E 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000B40 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000B42 8A450C              <1> 	mov	al, [ebp +12]
    60 00000B45 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000B49 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 00000B4C B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000B51 59                  <1> 	pop	ecx
    66 00000B52 5B                  <1> 	pop	ebx
    67 00000B53 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000B54 89EC                <1> 	mov	esp, ebp
    70 00000B56 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000B57 C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000B58 55                  <1> 	push	ebp
    77 00000B59 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 00000B5B 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 00000B5C 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 00000B5F 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000B62 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000B65 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000B68 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 00000B6B B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000B70 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000B71 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000B74 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000B77 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000B7E [A80B0000]50E803FC- <1>
    95 00000B86 FFFF6683C414        <1>
    96 00000B8C 68[A80B0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000B94 52E861F9FFFF6683C4- <1>
    96 00000B9D 10                  <1>
    97                              <1> 
    98 00000B9E 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000BA1 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000BA3 61                  <1> 	popa
   104                              <1> 
   105 00000BA4 89EC                <1> 	mov	esp, ebp
   106 00000BA6 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000BA7 C3                  <1> 	ret
   109                              <1> 
   110 00000BA8 2D2D00              <1> .tmp:	db	"--",0
   178                                  %include	"../modules/protect/call_gate.s"
     1                              <1> call_gate:
     2                              <1> 	;retf	4 * 4
     3                              <1> ; if SS_GATE_0 called
     4 00000BAB 55                  <1> 	push	ebp
     5 00000BAC 89E5                <1> 	mov	ebp, esp
     6                              <1> 
     7 00000BAE 60                  <1> 	pusha
     8 00000BAF 1E                  <1> 	push	ds
     9 00000BB0 06                  <1> 	push	es
    10                              <1> 
    11 00000BB1 66B81000            <1> 	mov	ax, 0x0010
    12 00000BB5 8ED8                <1> 	mov	ds, ax
    13 00000BB7 8EC0                <1> 	mov	es, ax
    14                              <1> 
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_1
    17                              <1> 	;je	.11L
    18                              <1> 
    19                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t0
    20                              <1> 	;jmp	.10E
    21                              <1> .11L:
    22                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t1
    23                              <1> .10E:
    24                              <1> 		
    25                              <1> 	;cdecl	itoa, esp, .t2, 8, 16, 0b0100
    26                              <1> 	;cdecl	draw_str, 0, 1, 0x010F, .t2
    27                              <1> 
    28                              <1> 	;cdecl	itoa, dword [ESP_COUNTER], .t3, 8, 16, 0b0100
    29                              <1> 	;cdecl	draw_str, 0, 2, 0x010F, .t3
    30                              <1> 	
    31                              <1> 
    32                              <1> 
    33                              <1> 	; ebp + 0 -- EBP
    34                              <1> 	; ebp + 4 -- EIP
    35                              <1> 	; ebp + 8 -- CS
    36 00000BB9 8B450C              <1> 	mov	eax, dword[ebp +12]
    37 00000BBC 8B5D10              <1> 	mov	ebx, dword[ebp +16]
    38 00000BBF 8B4D14              <1> 	mov	ecx, dword[ebp +20]
    39 00000BC2 8B5518              <1> 	mov	edx, dword[ebp +24]
    40 00000BC5 52515350E82DF9FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx
    40 00000BCE 6683C410            <1>
    41                              <1> 	; wrapper
    42                              <1> 
    43 00000BD2 07                  <1> 	pop	es
    44 00000BD3 1F                  <1> 	pop	ds
    45 00000BD4 61                  <1> 	popa
    46                              <1> 
    47 00000BD5 89EC                <1> 	mov	esp, ebp
    48 00000BD7 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000BD8 CA1000              <1> 	retf	4 * 4	; 4 DWORDs
    51                              <1> 
    52                              <1> 
    53 00000BDB 7461736B5F3000      <1> .t0:	db	"task_0",0
    54 00000BE2 7461736B5F3100      <1> .t1:	db	"task_1",0
    55 00000BE9 2D2D2D2D2D2D2D2D00  <1> .t2:	db	"--------", 0
    56 00000BF2 2D2D2D2D2D2D2D2D00  <1> .t3:	db	"--------", 0
   179                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ; system calls
     2                              <1> trap_gate_81:	; system call 81, draw_char
     3                              <1> %ifdef	USE_TEST_AND_SET
     4 00000BFB 68[480C0000]E84B00- <1> 	cdecl	test_and_set, IN_USE_81
     4 00000C03 00006683C404        <1>
     5                              <1> %endif
     6 00000C09 50525153E8EAF7FFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
     6 00000C12 6683C410            <1>
     7                              <1> %ifdef	USE_TEST_AND_SET
     8 00000C16 C705[480C0000]0000- <1> 	mov	[IN_USE_81], dword 0
     8 00000C1E 0000                <1>
     9                              <1> %endif
    10 00000C20 CF                  <1> 	iret
    11                              <1> 
    12                              <1> trap_gate_82:
    13                              <1> %ifdef	USE_TEST_AND_SET
    14 00000C21 68[4C0C0000]E82500- <1> 	cdecl	test_and_set, IN_USE_82
    14 00000C29 00006683C404        <1>
    15                              <1> %endif
    16 00000C2F 535251E87CF9FFFF66- <1> 	cdecl	draw_pixel, ecx, edx, ebx
    16 00000C38 83C40C              <1>
    17                              <1> %ifdef	USE_TEST_AND_SET
    18 00000C3B C705[4C0C0000]0000- <1> 	mov	[IN_USE_82], dword 0
    18 00000C43 0000                <1>
    19                              <1> %endif
    20 00000C45 CF                  <1> 	iret
    21                              <1> 
    22 00000C46 00<rept>            <1> ALIGN	4,		db	0
    23 00000C48 00000000            <1> IN_USE_81:		dd	0
    24 00000C4C 00000000            <1> IN_USE_82:		dd	0
   180                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2 00000C50 55                  <1> 	push	ebp
     3 00000C51 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000C53 50                  <1> 	push	eax
     6 00000C54 53                  <1> 	push	ebx
     7                              <1> 
     8 00000C55 B800000000          <1> 	mov	eax, 0		; set bit
     9 00000C5A 8B5D08              <1> 	mov	ebx, [ebp + 8]	; global variable
    10                              <1> 
    11                              <1> .10L:
    12 00000C5D F00FAB03            <1> 	lock	bts [ebx], eax
    13 00000C61 7307                <1> 	jnc	.10E		; we can use registers
    14                              <1> .12L:
    15 00000C63 0FA303              <1> 	bt	[ebx], eax
    16 00000C66 72FB                <1> 	jc	.12L		; we can not use
    17                              <1> 
    18 00000C68 EBF3                <1> 	jmp	.10L
    19                              <1> .10E:
    20                              <1> 	
    21 00000C6A 5B                  <1> 	pop	ebx
    22 00000C6B 58                  <1> 	pop	eax
    23                              <1> 
    24 00000C6C 89EC                <1> 	mov	esp, ebp
    25 00000C6E 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000C6F C3                  <1> 	ret
    28                              <1> 
   181                                  %include	"../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 	; eax : return value
     3                              <1> 	; ebx : segment selector
     4                              <1> 
     5 00000C70 8B83[F2120000]      <1> 	mov	eax, [GDT + ebx + 2]
     6 00000C76 C1E008              <1> 	shl	eax, 8
     7 00000C79 8A83[F7120000]      <1> 	mov	al, [GDT + ebx + 7]
     8 00000C7F C1C808              <1> 	ror	eax, 8
     9                              <1> 
    10 00000C82 C3                  <1> 	ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 	; eax : tss address
    14 00000C83 DD7068              <1> 	fnsave	[eax + 104]
    15 00000C86 C780D4000000010000- <1> 	mov	[eax + 104 + 108], dword 1	; store flag or present flag(?)
    15 00000C8F 00                  <1>
    16                              <1> 	
    17 00000C90 C3                  <1> 	ret
    18                              <1> 
    19                              <1> load_fpu_context:
    20 00000C91 83B8D400000000      <1> 	cmp	[eax + 104 + 108], dword 0
    21 00000C98 7505                <1> 	jne	.10F
    22 00000C9A 9BDBE3              <1> 	finit					; not initialized yet
    23 00000C9D EB03                <1> 	jmp	.10E
    24                              <1> .10F:
    25 00000C9F DD6068              <1> 	frstor	[eax + 104]
    26                              <1> .10E:
    27 00000CA2 C3                  <1> 	ret
    28                              <1> 
    29                              <1> int_nm:
    30 00000CA3 60                  <1> 	pusha
    31 00000CA4 06                  <1> 	push	es
    32 00000CA5 1E                  <1> 	push	ds
    33                              <1> 
    34 00000CA6 66B81000            <1> 	mov	ax, DS_KERNEL
    35 00000CAA 8EC0                <1> 	mov	es, ax
    36 00000CAC 8ED8                <1> 	mov	ds, ax
    37                              <1> 
    38 00000CAE 0F06                <1> 	clts
    39                              <1> 
    40 00000CB0 8B3D[FC0C0000]      <1> 	mov	edi, [.last_tss]
    41 00000CB6 0F00CE              <1> 	str	esi
    42 00000CB9 83E6F8              <1> 	and	esi, ~0x0007	; exclude TI,RPL bits
    43                              <1> 
    44 00000CBC 83FF00              <1> 	cmp	edi, 0		; first use
    45 00000CBF 7420                <1> 	je	.10F
    46                              <1> 
    47 00000CC1 39FE                <1> 	cmp	esi, edi
    48 00000CC3 741A                <1> 	je	.12E
    49                              <1> 
    50 00000CC5 FA                  <1> 	cli
    51                              <1> 
    52 00000CC6 89FB                <1> 	mov	ebx, edi
    53 00000CC8 E8A3FFFFFF          <1> 	call	get_tss_base	; eax is address to tss
    54 00000CCD E8B1FFFFFF          <1> 	call	save_fpu_context; eax used here
    55                              <1> 
    56 00000CD2 89F3                <1> 	mov	ebx, esi
    57 00000CD4 E897FFFFFF          <1> 	call	get_tss_base
    58 00000CD9 E8B3FFFFFF          <1> 	call	load_fpu_context
    59                              <1> 
    60 00000CDE FB                  <1> 	sti
    61                              <1> .12E:
    62 00000CDF EB0E                <1> 	jmp	.10E
    63                              <1> .10F:
    64 00000CE1 FA                  <1> 	cli
    65                              <1> 
    66 00000CE2 89F3                <1> 	mov	ebx, esi
    67 00000CE4 E887FFFFFF          <1> 	call	get_tss_base
    68 00000CE9 E8A3FFFFFF          <1> 	call	load_fpu_context
    69                              <1> 
    70 00000CEE FB                  <1> 	sti
    71                              <1> .10E:
    72                              <1> 
    73 00000CEF 8935[FC0C0000]      <1> 	mov	[.last_tss], esi
    74                              <1> 
    75 00000CF5 1F                  <1> 	pop	ds
    76 00000CF6 07                  <1> 	pop	es
    77 00000CF7 61                  <1> 	popa
    78                              <1> 
    79 00000CF8 CF                  <1> 	iret
    80                              <1> 
    81 00000CF9 00<rept>            <1> ALIGN	4,	db	0
    82 00000CFC 00000000            <1> .last_tss:	dd	0
   182                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2 00000D00 55                  <1> 	push	ebp
     3 00000D01 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000D03 50                  <1> 	push	eax
     6 00000D04 51                  <1> 	push	ecx
     7                              <1> 
     8 00000D05 8B4D08              <1> 	mov	ecx, [ebp + 8]
     9 00000D08 A1[34120000]        <1> 	mov	eax, [TIMER_COUNT]
    10                              <1> .10L:
    11 00000D0D 3905[34120000]      <1> 	cmp	[TIMER_COUNT], eax
    12 00000D13 74F8                <1> 	je	.10L
    13 00000D15 40                  <1> 	inc	eax		; per 10ms
    14 00000D16 E2F5                <1> 	loop	.10L		; 10ms * ecx]
    15                              <1> 
    16 00000D18 59                  <1> 	pop	ecx
    17 00000D19 58                  <1> 	pop	eax
    18                              <1> 
    19 00000D1A 89EC                <1> 	mov	esp, ebp
    20 00000D1C 5D                  <1> 	pop	ebp
    21                              <1> 
    22 00000D1D C3                  <1> 	ret
    23                              <1> 
   183                                  %include	"../modules/protect/ctrl_alt_end.s"
     1                              <1> ctrl_alt_end:
     2 00000D1E 55                  <1> 	push	ebp
     3 00000D1F 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000D21 8B4508              <1> 	mov	eax, [ebp + 8]
     6 00000D24 0FBAF007            <1> 	btr	eax, 7		; press : 0*******, pull : 1*******
     7 00000D28 7209                <1> 	jc	.10F
     8 00000D2A 0FAB05[700D0000]    <1> 	bts	[.key_state], eax	; set
     9 00000D31 EB07                <1> 	jmp	.10E
    10                              <1> .10F:
    11 00000D33 0FBB05[700D0000]    <1> 	btc	[.key_state], eax	; clear
    12                              <1> .10E:
    13                              <1> 	; key press check
    14 00000D3A B81D000000          <1> 	mov	eax, 0x1D		; ctrl
    15 00000D3F 0FA305[700D0000]    <1> 	bt	[.key_state], eax
    16 00000D46 7321                <1> 	jnc	.20E			; not press
    17                              <1> 
    18 00000D48 B838000000          <1> 	mov	eax, 0x38
    19 00000D4D 0FA305[700D0000]    <1> 	bt	[.key_state], eax
    20 00000D54 7313                <1> 	jnc	.20E
    21                              <1> 
    22 00000D56 B84F000000          <1> 	mov	eax, 0x4F
    23 00000D5B 0FA305[700D0000]    <1> 	bt	[.key_state], eax
    24 00000D62 7305                <1> 	jnc	.20E
    25                              <1> 
    26 00000D64 B8FFFFFFFF          <1> 	mov	eax, -1			; success
    27                              <1> .20E:
    28 00000D69 C1F808              <1> 	sar	eax, 8
    29                              <1> 
    30 00000D6C 89EC                <1> 	mov	esp, ebp
    31 00000D6E 5D                  <1> 	pop	ebp
    32                              <1> 
    33 00000D6F C3                  <1> 	ret
    34                              <1> 
    35                              <1> 
    36 00000D70 00<rept>            <1> .key_state:	times	32	db	0
   184                                  %include	"../modules/protect/power_off.s"
     1                              <1> power_off:
     2 00000D90 55                  <1> 	push	ebp
     3 00000D91 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000D93 50                  <1> 	push	eax
     6 00000D94 53                  <1> 	push	ebx
     7 00000D95 51                  <1> 	push	ecx
     8 00000D96 52                  <1> 	push	edx
     9 00000D97 56                  <1> 	push	esi
    10                              <1> 
    11 00000D98 68[1B0F0000]680F02- <1> 	cdecl	draw_str, 25, 14, 0x020F, .s0
    11 00000DA0 00006A0E6A19E850F7- <1>
    11 00000DA9 FFFF6683C410        <1>
    12                              <1> 
    13 00000DAF 0F20C0              <1> 	mov	eax, cr0
    14 00000DB2 25FFFFFF7F          <1> 	and	eax, 0x7FFF_FFFF
    15 00000DB7 0F22C0              <1> 	mov	cr0, eax
    16 00000DBA EB00                <1> 	jmp	$ + 2
    17                              <1> 
    18 00000DBC A1047E0000          <1> 	mov	eax, [0x7C00 + 512 + 4]
    19 00000DC1 8B1D087E0000        <1> 	mov	ebx, [0x7C00 + 512 + 8]
    20 00000DC7 83F800              <1> 	cmp	eax, 0
    21 00000DCA 7473                <1> 	je	.10E
    22                              <1> 	
    23 00000DCC 68525344545350E86C- <1> 	cdecl	acpi_find, eax, ebx, 'RSDT'
    23 00000DD5 0100006683C40C      <1>
    24 00000DDC 83F800              <1> 	cmp	eax, 0
    25 00000DDF 745E                <1> 	je	.10E
    26                              <1> 
    27 00000DE1 684641435050E88601- <1> 	cdecl	find_rsdt_entry, eax, 'FACP'
    27 00000DEA 00006683C408        <1>
    28 00000DF0 83F800              <1> 	cmp	eax, 0
    29 00000DF3 744A                <1> 	je	.10E
    30                              <1> 
    31 00000DF5 8B5828              <1> 	mov	ebx, [eax + 40]	; DSDT address
    32 00000DF8 83FB00              <1> 	cmp	ebx, 0
    33 00000DFB 7442                <1> 	je	.10E
    34                              <1> 
    35 00000DFD 8B4840              <1> 	mov	ecx, [eax + 64] ; PM1a_CNT_BLK
    36 00000E00 890D[380F0000]      <1> 	mov	[PM1a_CNT_BLK], ecx
    37                              <1> 
    38 00000E06 8B4844              <1> 	mov	ecx, [eax + 68]
    39 00000E09 890D[3C0F0000]      <1> 	mov	[PM1b_CNT_BLK], ecx
    40                              <1> 
    41 00000E0F 8B4B04              <1> 	mov	ecx, [ebx + 4]	; DSDT table length
    42 00000E12 83E924              <1> 	sub	ecx, 36		; exclude header
    43 00000E15 83C324              <1> 	add	ebx, 36		; exclude header
    44                              <1> 
    45 00000E18 685F53355F5153E820- <1> 	cdecl	acpi_find, ebx, ecx, '_S5_'
    45 00000E21 0100006683C40C      <1>
    46 00000E28 83F800              <1> 	cmp	eax, 0
    47 00000E2B 7412                <1> 	je	.10E		; S5 package not found
    48                              <1> 
    49 00000E2D 83C004              <1> 	add	eax, 4
    50 00000E30 50E86B0100006683C4- <1> 	cdecl	acpi_package_value, eax
    50 00000E39 04                  <1>
    51 00000E3A A3[400F0000]        <1> 	mov	[S5_PACKAGE], eax
    52                              <1> 
    53                              <1> .10E:
    54                              <1> 	; power off failed
    55                              <1> 
    56 00000E3F 0F20C0              <1> 	mov	eax, cr0
    57 00000E42 0D00000080          <1> 	or	eax, 0x8000_0000
    58 00000E47 0F22C0              <1> 	mov	cr0, eax
    59 00000E4A EB00                <1> 	jmp	$ + 2
    60                              <1> 
    61 00000E4C 8B15[380F0000]      <1> 	mov	edx, [PM1a_CNT_BLK]
    62 00000E52 83FA00              <1> 	cmp	edx, 0
    63 00000E55 0F8495000000        <1> 	je	.20E
    64                              <1> 
    65 00000E5B 68[310F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s3
    65 00000E63 00006A0E6A26E88DF6- <1>
    65 00000E6C FFFF6683C410        <1>
    66 00000E72 6A64E887FEFFFF6683- <1> 	cdecl	wait_tick, 100
    66 00000E7B C404                <1>
    67 00000E7D 68[2E0F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s2
    67 00000E85 00006A0E6A26E86BF6- <1>
    67 00000E8E FFFF6683C410        <1>
    68 00000E94 6A64E865FEFFFF6683- <1> 	cdecl	wait_tick, 100
    68 00000E9D C404                <1>
    69 00000E9F 68[2B0F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s1
    69 00000EA7 00006A0E6A26E849F6- <1>
    69 00000EB0 FFFF6683C410        <1>
    70 00000EB6 6A64E843FEFFFF6683- <1> 	cdecl	wait_tick, 100
    70 00000EBF C404                <1>
    71                              <1> 	
    72 00000EC1 660FB605[400F0000]  <1> 	movzx	ax, [S5_PACKAGE.0]
    73 00000EC9 66C1E00A            <1> 	shl	ax, 10
    74 00000ECD 660D0020            <1> 	or	ax, 1 << 13
    75 00000ED1 66EF                <1> 	out	dx, ax
    76                              <1> 
    77 00000ED3 8B15[3C0F0000]      <1> 	mov	edx, [PM1b_CNT_BLK]
    78 00000ED9 83FA00              <1> 	cmp	edx, 0
    79 00000EDC 7412                <1> 	je	.20E
    80                              <1> 
    81 00000EDE 660FB605[410F0000]  <1> 	movzx	ax, [S5_PACKAGE.1]
    82 00000EE6 66C1E00A            <1> 	shl	ax, 10
    83 00000EEA 660D0020            <1> 	or	ax, 1 << 13
    84 00000EEE 66EF                <1> 	out	dx, ax
    85                              <1> .20E:
    86 00000EF0 6A64E809FEFFFF6683- <1> 	cdecl	wait_tick, 100
    86 00000EF9 C404                <1>
    87 00000EFB 68[340F0000]680F02- <1> 	cdecl	draw_str, 38, 14, 0x020F, .s4
    87 00000F03 00006A0E6A26E8EDF5- <1>
    87 00000F0C FFFF6683C410        <1>
    88                              <1> 
    89 00000F12 5E                  <1> 	pop	esi
    90 00000F13 5A                  <1> 	pop	edx
    91 00000F14 59                  <1> 	pop	ecx
    92 00000F15 5B                  <1> 	pop	ebx
    93 00000F16 58                  <1> 	pop	eax
    94                              <1> 
    95 00000F17 89EC                <1> 	mov	esp, ebp
    96 00000F19 5D                  <1> 	pop	ebp
    97                              <1> 
    98 00000F1A C3                  <1> 	ret
    99                              <1> 	
   100 00000F1B 506F776572206F6666- <1> .s0:		db	"Power off...   ", 0
   100 00000F24 2E2E2E20202000      <1>
   101 00000F2B 203100              <1> .s1:		db	" 1", 0
   102 00000F2E 203200              <1> .s2:		db	" 2", 0
   103 00000F31 203300              <1> .s3:		db	" 3", 0
   104 00000F34 4E4700              <1> .s4:		db	"NG", 0
   105                              <1> 
   106 00000F37 00                  <1> ALIGN	4,	db	0
   107 00000F38 00000000            <1> PM1a_CNT_BLK:	dd	0
   108 00000F3C 00000000            <1> PM1b_CNT_BLK:	dd	0
   109                              <1> S5_PACKAGE:
   110 00000F40 00                  <1> .0:		db	0
   111 00000F41 00                  <1> .1:		db	0
   112 00000F42 00                  <1> .2:		db	0
   113 00000F43 00                  <1> .3:		db	0
   114                              <1> 
   115                              <1> 
   116                              <1> 
   185                                  %include	"../modules/protect/acpi_find.s"
     1                              <1> acpi_find:
     2 00000F44 55                  <1> 	push	ebp
     3 00000F45 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000F47 50                  <1> 	push	eax
     6 00000F48 51                  <1> 	push	ecx
     7 00000F49 57                  <1> 	push	edi
     8                              <1> 
     9 00000F4A 8B7D08              <1> 	mov	edi, [ebp + 8]	; address
    10 00000F4D 8B4D0C              <1> 	mov	ecx, [ebp +12]	; length
    11 00000F50 8B4510              <1> 	mov	eax, [ebp +16]	; search string
    12                              <1> 
    13 00000F53 FC                  <1> 	cld
    14                              <1> .10L:
    15 00000F54 F2AE                <1> 	repne	scasb		; compare only 1 byte(AL)
    16                              <1> 
    17 00000F56 83F900              <1> 	cmp	ecx, 0
    18 00000F59 7507                <1> 	jnz	.11E
    19 00000F5B B800000000          <1> 	mov	eax, 0
    20 00000F60 EB09                <1> 	jmp	.10E		; failed
    21                              <1> .11E:
    22 00000F62 263B47FF            <1> 	cmp	eax, [es:edi - 1]	; compare 4 bytes(name)
    23 00000F66 75EC                <1> 	jne	.10L
    24                              <1> 	
    25 00000F68 4F                  <1> 	dec	edi
    26 00000F69 89F8                <1> 	mov	eax, edi
    27                              <1> .10E:
    28                              <1> 	
    29 00000F6B 5F                  <1> 	pop	edi
    30 00000F6C 59                  <1> 	pop	ecx
    31 00000F6D 5B                  <1> 	pop	ebx
    32                              <1> 
    33 00000F6E 89EC                <1> 	mov	esp, ebp
    34 00000F70 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000F71 C3                  <1> 	ret
    37                              <1> 
   186                                  %include	"../modules/protect/find_rsdt_entry.s"
     1                              <1> find_rsdt_entry:
     2 00000F72 55                  <1> 	push	ebp
     3 00000F73 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000F75 53                  <1> 	push	ebx
     6 00000F76 51                  <1> 	push	ecx
     7 00000F77 56                  <1> 	push	esi
     8 00000F78 57                  <1> 	push	edi
     9                              <1> 
    10 00000F79 8B7508              <1> 	mov	esi, [ebp + 8]	; table address
    11 00000F7C 8B4D0C              <1> 	mov	ecx, [ebp +12]	; name
    12                              <1> 
    13 00000F7F BB00000000          <1> 	mov	ebx, 0
    14                              <1> 
    15 00000F84 89F7                <1> 	mov	edi, esi
    16 00000F86 037E04              <1> 	add	edi, [esi + 4]	; [esi + 4] is header length
    17 00000F89 83C624              <1> 	add	esi, 36
    18                              <1> 	
    19                              <1> 	; search from esi to edi
    20                              <1> .10L:
    21 00000F8C 39FE                <1> 	cmp	esi, edi
    22 00000F8E 7D07                <1> 	jge	.10E
    23                              <1> 
    24 00000F90 AD                  <1> 	lodsd			; eax = [esi]; esi++
    25                              <1> 
    26 00000F91 3908                <1> 	cmp	[eax], ecx
    27 00000F93 75F7                <1> 	jne	.10L
    28 00000F95 89C3                <1> 	mov	ebx, eax
    29                              <1> .10E:
    30 00000F97 89D8                <1> 	mov	eax, ebx	
    31                              <1> 
    32 00000F99 5F                  <1> 	pop	edi
    33 00000F9A 5E                  <1> 	pop	esi
    34 00000F9B 59                  <1> 	pop	ecx
    35 00000F9C 5B                  <1> 	pop	ebx
    36                              <1> 
    37 00000F9D 89EC                <1> 	mov	esp, ebp
    38 00000F9F 5D                  <1> 	pop	ebp
    39                              <1> 
    40 00000FA0 C3                  <1> 	ret
   187                                  %include	"../modules/protect/acpi_package_value.s"
     1                              <1> acpi_package_value:
     2 00000FA1 55                  <1> 	push	ebp
     3 00000FA2 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000FA4 56                  <1> 	push	esi
     6                              <1> 
     7 00000FA5 8B7508              <1> 	mov	esi, [ebp + 8]
     8                              <1> 
     9 00000FA8 46                  <1> 	inc	esi
    10 00000FA9 46                  <1> 	inc	esi
    11 00000FAA 46                  <1> 	inc	esi
    12                              <1> 
    13                              <1> 	; see 343p
    14 00000FAB 8A06                <1> 	mov	al, [esi]
    15 00000FAD 3C0B                <1> 	cmp	al, 0x0B
    16 00000FAF 740A                <1> 	je	.C0B
    17 00000FB1 3C0C                <1> 	cmp	al, 0x0C
    18 00000FB3 7406                <1> 	je	.C0C
    19 00000FB5 3C0E                <1> 	cmp	al, 0x0E
    20 00000FB7 7402                <1> 	je	.C0E
    21 00000FB9 EB08                <1> 	jmp	.C0A
    22                              <1> .C0B:
    23                              <1> .C0C:
    24                              <1> .C0E:
    25 00000FBB 8A4601              <1> 	mov	al, [esi + 1]
    26 00000FBE 8A6602              <1> 	mov	ah, [esi + 2]
    27 00000FC1 EB13                <1> 	jmp	.10E
    28                              <1> .C0A:
    29 00000FC3 3C0A                <1> 	cmp	al, 0x0A
    30 00000FC5 7504                <1> 	jne	.11E
    31 00000FC7 8A4601              <1> 	mov	al, [esi + 1]
    32 00000FCA 46                  <1> 	inc	esi
    33                              <1> .11E:
    34 00000FCB 46                  <1> 	inc	esi
    35                              <1> 
    36 00000FCC 8A26                <1> 	mov	ah, [esi]
    37 00000FCE 80FC0A              <1> 	cmp	ah, 0x0A
    38 00000FD1 7503                <1> 	jne	.12E
    39 00000FD3 8A6601              <1> 	mov	ah, [esi + 1]
    40                              <1> .12E:
    41                              <1> .10E:
    42 00000FD6 5E                  <1> 	pop	esi
    43                              <1> 
    44 00000FD7 89EC                <1> 	mov	esp, ebp
    45 00000FD9 5D                  <1> 	pop	ebp
    46                              <1> 
    47 00000FDA C3                  <1> 	ret
    48                              <1> 	
    49                              <1> 
   188                                  %include	"../modules/protect/draw_num.s"
     1                              <1> draw_num:	; draw_num(num, x, y)
     2 00000FDB 55                  <1> 	push	ebp
     3 00000FDC 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000FDE 6A046A106A1068-     <1> 	cdecl	itoa, dword [ebp + 8], .t1, 16, 16, 0b0100
     5 00000FE5 [14100000]FF7508E8- <1>
     5 00000FED 9AF7FFFF6683C414    <1>
     6 00000FF5 68[12100000]68010F- <1> 	cdecl	draw_str, dword [ebp +12], dword [ebp +16], 0x0F01, .t0
     6 00000FFD 0000FF7510FF750CE8- <1>
     6 00001006 F1F4FFFF6683C410    <1>
     7                              <1> 
     8 0000100E 89EC                <1> 	mov	esp, ebp
     9 00001010 5D                  <1> 	pop	ebp
    10                              <1> 	
    11 00001011 C3                  <1> 	ret
    12                              <1> 
    13 00001012 3078                <1> .t0:	db	"0x"
    14 00001014 2D2D2D2D2D2D2D2D2D- <1> .t1:	db	"----------------", 0
    14 0000101D 2D2D2D2D2D2D2D00    <1>
    15                              <1> 
    16                              <1> draw_num_pixel:	; draw_num_pixel(num, x, y)
    17 00001025 55                  <1> 	push	ebp
    18 00001026 89E5                <1> 	mov	ebp, esp
    19                              <1> 
    20 00001028 6A046A106A0168-     <1> 	cdecl	itoa, dword[ebp + 8], .t0, 1, 16, 0b0100
    20 0000102F [5C100000]FF7508E8- <1>
    20 00001037 50F7FFFF6683C414    <1>
    21 0000103F 68[5C100000]68010F- <1> 	cdecl	draw_str, dword[ebp +12], dword[ebp +16], 0x0F01, .t0
    21 00001047 0000FF7510FF750CE8- <1>
    21 00001050 A7F4FFFF6683C410    <1>
    22                              <1> 
    23 00001058 89EC                <1> 	mov	esp, ebp
    24 0000105A 5D                  <1> 	pop	ebp
    25                              <1> 
    26 0000105B C3                  <1> 	ret
    27                              <1> 
    28 0000105C 2D00                <1> .t0:	db	"-", 0
   189                                  ;%include	"../modules/protect/int_pf.s"
   190                                  %include	"modules/paging.s"
     1                              <1> page_set_4m:
     2 0000105E 55                  <1> 	push	ebp
     3 0000105F 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00001061 60                  <1> 	pusha
     6                              <1> 
     7 00001062 FC                  <1> 	cld
     8 00001063 8B7D08              <1> 	mov	edi, [ebp + 8]
     9 00001066 B800000000          <1> 	mov	eax, 0x00000000		; null page directory
    10 0000106B B900040000          <1> 	mov	ecx, 1024		; 1024 directories
    11 00001070 F3AB                <1> 	rep	stosd
    12                              <1> 
    13 00001072 89F8                <1> 	mov	eax, edi		; we use memory after page directory
    14 00001074 2500F0FFFF          <1> 	and	eax, ~0x0000_0FFF
    15 00001079 83C807              <1> 	or	eax, 0b0000_0111	; enable read write
    16                              <1> 
    17 0000107C 898700F0FFFF        <1> 	mov	[edi - (1024 * 4)], eax
    18                              <1> 	
    19 00001082 B807000000          <1> 	mov	eax, 0x0000_0007
    20 00001087 B900040000          <1> 	mov	ecx, 1024		; 1024 pages
    21                              <1> .10L:
    22 0000108C AB                  <1> 	stosd
    23 0000108D 0500100000          <1> 	add	eax, 0x0000_1000
    24 00001092 E2F8                <1> 	loop	.10L
    25                              <1> 
    26 00001094 61                  <1> 	popa
    27                              <1> 
    28 00001095 89EC                <1> 	mov	esp, ebp
    29 00001097 5D                  <1> 	pop	ebp
    30                              <1> 
    31 00001098 C3                  <1> 	ret
    32                              <1> 
    33 00001099 2D2D2D2D2D2D2D2D2D- <1> .t0:	db	"----------------", 0
    33 000010A2 2D2D2D2D2D2D2D00    <1>
    34                              <1> 
    35                              <1> init_page:
    36 000010AA 60                  <1> 	pusha
    37 000010AB 6800501000E8A9FFFF- <1> 	cdecl	page_set_4m, CR3_BASE
    37 000010B4 FF6683C404          <1>
    38 000010B9 6800002000E89BFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_4
    38 000010C2 FF6683C404          <1>
    39 000010C7 6800202000E88DFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_5
    39 000010D0 FF6683C404          <1>
    40 000010D5 6800402000E87FFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_6
    40 000010DE FF6683C404          <1>
    41 000010E3 C7051C641000000000- <1> 	mov [CR3_BASE + 0x1000 + 0x107 * 4], dword 0
    41 000010EC 00                  <1>
    42 000010ED C7051C142000078010- <1> 	mov [CR3_TASK_4 + 0x1000 + 0x107 * 4], dword PARAM_TASK_4 + 7
    42 000010F6 00                  <1>
    43 000010F7 C7051C342000079010- <1> 	mov [CR3_TASK_5 + 0x1000 + 0x107 * 4], dword PARAM_TASK_5 + 7
    43 00001100 00                  <1>
    44 00001101 C7051C54200007A010- <1> 	mov [CR3_TASK_6 + 0x1000 + 0x107 * 4], dword PARAM_TASK_6 + 7
    44 0000110A 00                  <1>
    45                              <1> 
    46 0000110B 6A4068[941B0000]68- <1> 	cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size
    46 00001113 00801000E8C7F2FFFF- <1>
    46 0000111C 6683C40C            <1>
    47 00001120 6A4068[D41B0000]68- <1> 	cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size
    47 00001128 00901000E8B2F2FFFF- <1>
    47 00001131 6683C40C            <1>
    48 00001135 6A4068[141C0000]68- <1> 	cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size
    48 0000113D 00A01000E89DF2FFFF- <1>
    48 00001146 6683C40C            <1>
    49                              <1> 
    50                              <1> 	; [0x00000000] = 0x0
    51 0000114A 61                  <1> 	popa
    52                              <1> 
    53 0000114B C3                  <1> 	ret
    54                              <1> 
   191                                  %include	"modules/int_pf.s"
     1                              <1> int_pf:
     2 0000114C 55                  <1> 	push	ebp
     3 0000114D 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 0000114F 60                  <1> 	pusha
     6 00001150 06                  <1> 	push	es
     7 00001151 1E                  <1> 	push	ds
     8                              <1> 
     9                              <1> 	; mov	ax, DS_KERNEL
    10                              <1> 	; mov	es, ax
    11                              <1> 	; mov	ds, ax
    12                              <1> 
    13 00001152 0F20D0              <1> 	mov	eax, cr2	; interrupt address
    14 00001155 2500F0FFFF          <1> 	and	eax, ~0x0FFF
    15 0000115A 3D00701000          <1> 	cmp	eax, 0x0010_7000
    16 0000115F 7521                <1> 	jne	.10F
    17                              <1> 	
    18 00001161 C7051C641000077010- <1> 	mov	[0x00106000 + 0x107 * 4], dword 0x0010_7007
    18 0000116A 00                  <1>
    19                              <1> 	; 0x00107007 means 0x00107000 can use as read and write
    20 0000116B 6A4068[541B0000]68- <1> 	cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    20 00001173 00701000E867F2FFFF- <1>
    20 0000117C 6683C40C            <1>
    21                              <1> 
    22 00001180 EB15                <1> 	jmp	.10E
    23                              <1> .10F:
    24 00001182 83C404              <1> 	add	esp, 4
    25 00001185 83C404              <1> 	add	esp, 4
    26 00001188 61                  <1> 	popa
    27 00001189 5D                  <1> 	pop	ebp
    28                              <1> 
    29 0000118A 9C                  <1> 	pushf
    30 0000118B 0E                  <1> 	push	cs
    31 0000118C 68[34090000]        <1> 	push	int_stop
    32                              <1> 
    33 00001191 B8[A1110000]        <1> 	mov	eax, .s0
    34 00001196 CF                  <1> 	iret			; kernel stop
    35                              <1> .10E:
    36 00001197 1F                  <1> 	pop	ds
    37 00001198 07                  <1> 	pop	es
    38 00001199 61                  <1> 	popa
    39                              <1> 
    40 0000119A 89EC                <1> 	mov	esp, ebp
    41 0000119C 5D                  <1> 	pop	ebp
    42                              <1> 	
    43 0000119D 83C404              <1> 	add	esp, 4	; error code clear
    44 000011A0 CF                  <1> 	iret
    45                              <1> 	
    46 000011A1 203C20504147452046- <1> .s0	db	" < PAGE FAULT > ", 0
    46 000011AA 41554C54203E2000    <1>
    47                              <1> 
   192                                  ;%include	"../modules/protect/int_timer.s"
   193                                  %include	"modules/my_int_timer.s"
     1                              <1> int_timer:
     2 000011B2 60                  <1> 	pushad
     3 000011B3 06                  <1> 	push	es
     4 000011B4 1E                  <1> 	push	ds
     5                              <1> 
     6 000011B5 66B81000            <1> 	mov	ax, 0x10
     7 000011B9 8ED8                <1> 	mov	ds, ax
     8 000011BB 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 000011BD FF05[34120000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 000011C3 B020                <2>  mov al, %2
    12 000011C5 E620                <2>  out %1, al
    13                              <1> 	
    14 000011C7 660F00C8            <1> 	str	ax
    15 000011CB 6683F830            <1> 	cmp	ax, SS_TASK_0
    16 000011CF 7427                <1> 	je	.11L
    17 000011D1 6683F838            <1> 	cmp	ax, SS_TASK_1
    18 000011D5 742A                <1> 	je	.12L
    19 000011D7 6683F840            <1> 	cmp	ax, SS_TASK_2
    20 000011DB 742D                <1> 	je	.13L
    21 000011DD 6683F848            <1> 	cmp	ax, SS_TASK_3
    22 000011E1 7430                <1> 	je	.14L
    23 000011E3 6683F850            <1> 	cmp	ax, SS_TASK_4
    24 000011E7 7433                <1> 	je	.15L
    25 000011E9 6683F858            <1> 	cmp	ax, SS_TASK_5
    26 000011ED 7436                <1> 	je	.16L
    27                              <1> 
    28 000011EF EA000000003000      <1> 	jmp	SS_TASK_0:0
    29 000011F6 EB36                <1> 	jmp	.10E
    30                              <1> .11L:
    31 000011F8 EA000000003800      <1> 	jmp	SS_TASK_1:0
    32 000011FF EB2D                <1> 	jmp	.10E
    33                              <1> .12L:
    34 00001201 EA000000004000      <1> 	jmp	SS_TASK_2:0
    35 00001208 EB24                <1> 	jmp	.10E
    36                              <1> .13L:
    37 0000120A EA000000004800      <1> 	jmp	SS_TASK_3:0
    38 00001211 EB1B                <1> 	jmp	.10E
    39                              <1> .14L:
    40 00001213 EA000000005000      <1> 	jmp	SS_TASK_4:0
    41 0000121A EB12                <1> 	jmp	.10E
    42                              <1> .15L:
    43 0000121C EA000000005800      <1> 	jmp	SS_TASK_5:0
    44 00001223 EB09                <1> 	jmp	.10E
    45                              <1> .16L:
    46 00001225 EA000000006000      <1> 	jmp	SS_TASK_6:0
    47 0000122C EB00                <1> 	jmp	.10E
    48                              <1> .10E:
    49                              <1> 
    50 0000122E 1F                  <1> 	pop	ds
    51 0000122F 07                  <1> 	pop	es
    52 00001230 61                  <1> 	popad
    53                              <1> 	
    54 00001231 CF                  <1> 	iret
    55                              <1> 
    56 00001232 00<rept>            <1> ALIGN	4,	db	0
    57 00001234 0000000000000000    <1> TIMER_COUNT:	dq	0
    58                              <1> 
    59                              <1> 
    60                              <1> int_en_timer:
    61 0000123C 55                  <1> 	push	ebp
    62 0000123D 89E5                <1> 	mov	ebp, esp
    63                              <1> 	
    64 0000123F 50                  <1> 	push	eax
    65                              <1> 
    66                              <1> 	outp	0x43, 0b00_11_010_0
    66 00001240 B034                <2>  mov al, %2
    66 00001242 E643                <2>  out %1, al
    67                              <1> 	; counter 0
    68                              <1> 	; access mode, bottom -> top
    69                              <1> 	; mode, 2
    70                              <1> 	; bcd
    71                              <1> 
    72                              <1> 	outp	0x40, 0x9C
    72 00001244 B09C                <2>  mov al, %2
    72 00001246 E640                <2>  out %1, al
    73                              <1> 	outp	0x40, 0x2E
    73 00001248 B02E                <2>  mov al, %2
    73 0000124A E640                <2>  out %1, al
    74                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    75                              <1> 
    76 0000124C 58                  <1> 	pop	eax
    77                              <1> 
    78 0000124D 89EC                <1> 	mov 	esp, ebp
    79 0000124F 5D                  <1> 	pop	ebp
    80                              <1> 
    81 00001250 C3                  <1> 	ret
    82                              <1> 
    83                              <1> 
   194                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00001251 55                  <1> 	push	ebp
     3 00001252 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00001254 50                  <1> 	push	eax
     6                              <1> 
     7 00001255 A1[34120000]        <1> 	mov	eax, [TIMER_COUNT]
     8 0000125A C1E808              <1> 	shr	eax, 8
     9 0000125D 3B05[88120000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 00001263 741E                <1> 	je	.10E
    11                              <1> 
    12 00001265 A3[88120000]        <1> 	mov	[.index], eax
    13 0000126A 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 0000126D 8A80[8C120000]      <1> 	mov	al, [.table + eax]
    16 00001273 506A0F6A1D6A00E87D- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 0000127C F1FFFF6683C410      <1>
    17                              <1> .10E:
    18 00001283 58                  <1> 	pop	eax
    19                              <1> 
    20 00001284 89EC                <1> 	mov	esp, ebp
    21 00001286 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00001287 C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00001288 00000000            <1> .index:		dd	0
    27 0000128C 7C2F2D5C            <1> .table:		dd	"|/-\"
   195                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 00001290 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 00001298 FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 000012A0 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 000012A8 FFFF000000FACF00    <1> .cs_task_1:	dq	0x00CF_FA00_0000_FFFF
     6 000012B0 FFFF000000F2CF00    <1> .ds_task_1:	dq	0x00CF_F200_0000_FFFF
     7 000012B8 FFFF000000FACF00    <1> .cs_task_2:	dq	0x00CF_FA00_0000_FFFF
     8 000012C0 FFFF000000F2CF00    <1> .ds_task_2:	dq	0x00CF_F200_0000_FFFF
     9 000012C8 FFFF000000FACF00    <1> .cs_task_3:	dq	0x00CF_FA00_0000_FFFF
    10 000012D0 FFFF000000F2CF00    <1> .ds_task_3:	dq	0x00CF_F200_0000_FFFF
    11 000012D8 FFFF000000F2CF00    <1> .ds_task_4:	dq	0x00CF_F200_0000_FFFF
    12 000012E0 FFFF000000F2CF00    <1> .ds_task_5:	dq	0x00CF_F200_0000_FFFF
    13 000012E8 FFFF000000F2CF00    <1> .ds_task_6:	dq	0x00CF_F200_0000_FFFF
    14                              <1> .end:
    15                              <1> 
    16                              <1> ; ldt indexes
    17                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    18                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    19                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4 | 3	; offset | (use LDT bit) | (level = 3)
    20                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4 | 3	
    21                              <1> CS_TASK_2:	equ	(.cs_task_2 - LDT) | 4 | 3
    22                              <1> DS_TASK_2:	equ	(.ds_task_2 - LDT) | 4 | 3	
    23                              <1> CS_TASK_3:	equ	(.cs_task_3 - LDT) | 4 | 3
    24                              <1> DS_TASK_3:	equ	(.ds_task_3 - LDT) | 4 | 3
    25                              <1> DS_TASK_4:	equ	(.ds_task_4 - LDT) | 4 | 3
    26                              <1> DS_TASK_5:	equ	(.ds_task_5 - LDT) | 4 | 3
    27                              <1> DS_TASK_6:	equ	(.ds_task_6 - LDT) | 4 | 3
    28                              <1> 
    29                              <1> LDT_LIMIT	equ	.end - LDT - 1
    30                              <1> 
    31                              <1> 
    32 000012F0 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    33 000012F8 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    34 00001300 FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    35 00001308 FFFF0000009A0F00    <1> .cs_bit16:	dq	0x000F_9A00_0000_FFFF
    36 00001310 FFFF000000920F00    <1> .ds_bit16:	dq	0x000F_9200_0000_FFFF
    37 00001318 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    38 00001320 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    39 00001328 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    40 00001330 6700000000890000    <1> .tss_2:		dq	0x0000_8900_0000_0067
    41 00001338 6700000000890000    <1> .tss_3:		dq	0x0000_8900_0000_0067
    42 00001340 6700000000890000    <1> .tss_4:		dq	0x0000_8900_0000_0067
    43 00001348 6700000000890000    <1> .tss_5:		dq	0x0000_8900_0000_0067
    44 00001350 6700000000890000    <1> .tss_6:		dq	0x0000_8900_0000_0067
    45 00001358 0000080004EC0000    <1> .call_gate:	dq	0x0000_EC04_0008_0000
    46                              <1> .end:
    47                              <1> 
    48                              <1> ; gdt indexes
    49                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    50                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    51                              <1> SS_LDT		equ	.ldt - GDT
    52                              <1> SS_TASK_0	equ	.tss_0 - GDT		; jump point
    53                              <1> SS_TASK_1	equ	.tss_1 - GDT
    54                              <1> SS_TASK_2	equ	.tss_2 - GDT
    55                              <1> SS_TASK_3	equ	.tss_3 - GDT
    56                              <1> SS_TASK_4	equ	.tss_4 - GDT
    57                              <1> SS_TASK_5	equ	.tss_5 - GDT
    58                              <1> SS_TASK_6	equ	.tss_6 - GDT
    59                              <1> SS_GATE_0	equ	.call_gate - GDT
    60                              <1> 
    61 00001360 6F00                <1> GDTR:		dw	GDT.end - GDT - 1
    62 00001362 [F0120000]          <1> 		dd	GDT
    63                              <1> 
    64                              <1> TSS_0:
    65 00001366 00000000            <1> .link:    dd 0
    66 0000136A 00321000            <1> .esp0:    dd SP_TASK_0 - STACK_SIZE / 2
    67 0000136E 10000000            <1> .ss0:     dd DS_KERNEL
    68 00001372 00000000            <1> .esp1:    dd 0
    69 00001376 00000000            <1> .ss1:     dd 0
    70 0000137A 00000000            <1> .esp2:    dd 0
    71 0000137E 00000000            <1> .ss2:     dd 0
    72 00001382 00501000            <1> .cr3:     dd CR3_BASE
    73 00001386 00000000            <1> .eip:     dd 0
    74 0000138A 00000000            <1> .eflags:  dd 0
    75 0000138E 00000000            <1> .eax:     dd 0
    76 00001392 00000000            <1> .ecx:     dd 0
    77 00001396 00000000            <1> .edx:     dd 0
    78 0000139A 00000000            <1> .ebx:     dd 0
    79 0000139E 00000000            <1> .esp:     dd 0
    80 000013A2 00000000            <1> .ebp:     dd 0
    81 000013A6 00000000            <1> .esi:     dd 0
    82 000013AA 00000000            <1> .edi:     dd 0
    83 000013AE 00000000            <1> .es:      dd 0
    84 000013B2 00000000            <1> .cs:      dd 0
    85 000013B6 00000000            <1> .ss:      dd 0
    86 000013BA 00000000            <1> .ds:      dd 0
    87 000013BE 00000000            <1> .fs:      dd 0
    88 000013C2 00000000            <1> .gs:      dd 0
    89 000013C6 00000000            <1> .ldt:     dd 0
    90 000013CA 00000000            <1> .io:      dd 0
    91 000013CE 00<rept>            <1> .fp_save: times 108 + 4 db 0
    92                              <1> 
    93                              <1> TSS_1:
    94 0000143E 00000000            <1> .link:    dd 0
    95 00001442 00361000            <1> .esp0:    dd SP_TASK_1 - STACK_SIZE / 2
    96 00001446 10000000            <1> .ss0:     dd DS_KERNEL
    97 0000144A 00000000            <1> .esp1:    dd 0
    98 0000144E 00000000            <1> .ss1:     dd 0
    99 00001452 00000000            <1> .esp2:    dd 0
   100 00001456 00000000            <1> .ss2:     dd 0
   101 0000145A 00501000            <1> .cr3:     dd CR3_BASE
   102 0000145E [4E190000]          <1> .eip:     dd task_1	; start at task_1
   103 00001462 02020000            <1> .eflags:  dd 0x0202
   104 00001466 00000000            <1> .eax:     dd 0
   105 0000146A 00000000            <1> .ecx:     dd 0
   106 0000146E 00000000            <1> .edx:     dd 0
   107 00001472 00000000            <1> .ebx:     dd 0
   108 00001476 00381000            <1> .esp:     dd SP_TASK_1
   109 0000147A 00000000            <1> .ebp:     dd 0
   110 0000147E 00000000            <1> .esi:     dd 0
   111 00001482 00000000            <1> .edi:     dd 0
   112 00001486 27000000            <1> .es:      dd DS_TASK_1
   113 0000148A 1F000000            <1> .cs:      dd CS_TASK_1
   114 0000148E 27000000            <1> .ss:      dd DS_TASK_1
   115 00001492 27000000            <1> .ds:      dd DS_TASK_1
   116 00001496 27000000            <1> .fs:      dd DS_TASK_1
   117 0000149A 27000000            <1> .gs:      dd DS_TASK_1
   118 0000149E 28000000            <1> .ldt:     dd SS_LDT
   119 000014A2 00000000            <1> .io:      dd 0
   120 000014A6 00<rept>            <1> .fp_save: times 108 + 4 db 0
   121                              <1> 
   122                              <1> TSS_2:
   123 00001516 00000000            <1> .link:    dd 0
   124 0000151A 003A1000            <1> .esp0:    dd SP_TASK_2 - STACK_SIZE / 2
   125 0000151E 10000000            <1> .ss0:     dd DS_KERNEL
   126 00001522 00000000            <1> .esp1:    dd 0
   127 00001526 00000000            <1> .ss1:	    dd 0
   128 0000152A 00000000            <1> .esp2:    dd 0
   129 0000152E 00000000            <1> .ss2:     dd 0
   130 00001532 00501000            <1> .cr3:     dd CR3_BASE
   131 00001536 [83190000]          <1> .eip:     dd task_2	; start at task_2
   132 0000153A 02020000            <1> .eflags:  dd 0x0202
   133 0000153E 00000000            <1> .eax:     dd 0
   134 00001542 00000000            <1> .ecx:     dd 0
   135 00001546 00000000            <1> .edx:     dd 0
   136 0000154A 00000000            <1> .ebx:			dd 0
   137 0000154E 003C1000            <1> .esp:			dd SP_TASK_2
   138 00001552 00000000            <1> .ebp:			dd 0
   139 00001556 00000000            <1> .esi:			dd 0
   140 0000155A 00000000            <1> .edi:			dd 0
   141 0000155E 37000000            <1> .es:			dd DS_TASK_2
   142 00001562 2F000000            <1> .cs:			dd CS_TASK_2
   143 00001566 37000000            <1> .ss:			dd DS_TASK_2
   144 0000156A 37000000            <1> .ds:			dd DS_TASK_2
   145 0000156E 37000000            <1> .fs:			dd DS_TASK_2
   146 00001572 37000000            <1> .gs:			dd DS_TASK_2
   147 00001576 28000000            <1> .ldt:			dd SS_LDT
   148 0000157A 00000000            <1> .io:			dd 0
   149 0000157E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   150                              <1> 
   151                              <1> TSS_3:
   152 000015EE 00000000            <1> .link:    dd 0
   153 000015F2 003E1000            <1> .esp0:    dd SP_TASK_3 - 512
   154 000015F6 10000000            <1> .ss0:     dd DS_KERNEL
   155 000015FA 00000000            <1> .esp1:    dd 0
   156 000015FE 00000000            <1> .ss1:     dd 0
   157 00001602 00000000            <1> .esp2:    dd 0
   158 00001606 00000000            <1> .ss2:     dd 0
   159 0000160A 00501000            <1> .cr3:     dd CR3_BASE
   160 0000160E [541A0000]          <1> .eip:     dd task_3
   161 00001612 02020000            <1> .eflags:  dd 0x0202
   162 00001616 00000000            <1> .eax:     dd 0
   163 0000161A 00000000            <1> .ecx:     dd 0
   164 0000161E 00000000            <1> .edx:     dd 0
   165 00001622 00000000            <1> .ebx:     dd 0
   166 00001626 00401000            <1> .esp:     dd SP_TASK_3
   167 0000162A 00000000            <1> .ebp:     dd 0
   168 0000162E 00000000            <1> .esi:     dd 0
   169 00001632 00000000            <1> .edi:     dd 0
   170 00001636 47000000            <1> .es:      dd DS_TASK_3
   171 0000163A 3F000000            <1> .cs:      dd CS_TASK_3
   172 0000163E 47000000            <1> .ss:      dd DS_TASK_3
   173 00001642 47000000            <1> .ds:      dd DS_TASK_3
   174 00001646 47000000            <1> .fs:      dd DS_TASK_3
   175 0000164A 47000000            <1> .gs:      dd DS_TASK_3
   176 0000164E 28000000            <1> .ldt:     dd SS_LDT
   177 00001652 00000000            <1> .io:      dd 0
   178 00001656 00<rept>            <1> .fp_save: times 108 + 4 db 0
   179                              <1> 
   180                              <1> TSS_4:
   181 000016C6 00000000            <1> .link:    dd 0
   182 000016CA 00421000            <1> .esp0:    dd SP_TASK_4 - 512
   183 000016CE 10000000            <1> .ss0:     dd DS_KERNEL
   184 000016D2 00000000            <1> .esp1:    dd 0
   185 000016D6 00000000            <1> .ss1:     dd 0
   186 000016DA 00000000            <1> .esp2:    dd 0
   187 000016DE 00000000            <1> .ss2:     dd 0
   188 000016E2 00002000            <1> .cr3:     dd CR3_TASK_4
   189 000016E6 [541A0000]          <1> .eip:     dd task_3
   190 000016EA 02020000            <1> .eflags:  dd 0x0202
   191 000016EE 00000000            <1> .eax:     dd 0
   192 000016F2 00000000            <1> .ecx:     dd 0
   193 000016F6 00000000            <1> .edx:     dd 0
   194 000016FA 00000000            <1> .ebx:     dd 0
   195 000016FE 00441000            <1> .esp:     dd SP_TASK_4
   196 00001702 00000000            <1> .ebp:     dd 0
   197 00001706 00000000            <1> .esi:     dd 0
   198 0000170A 00000000            <1> .edi:     dd 0
   199 0000170E 4F000000            <1> .es:      dd DS_TASK_4
   200 00001712 3F000000            <1> .cs:      dd CS_TASK_3
   201 00001716 4F000000            <1> .ss:      dd DS_TASK_4
   202 0000171A 4F000000            <1> .ds:      dd DS_TASK_4
   203 0000171E 4F000000            <1> .fs:      dd DS_TASK_4
   204 00001722 4F000000            <1> .gs:      dd DS_TASK_4
   205 00001726 28000000            <1> .ldt:     dd SS_LDT
   206 0000172A 00000000            <1> .io:      dd 0
   207 0000172E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   208                              <1> 
   209                              <1> TSS_5:
   210 0000179E 00000000            <1> .link:    dd 0
   211 000017A2 00461000            <1> .esp0:    dd SP_TASK_5 - 512
   212 000017A6 10000000            <1> .ss0:     dd DS_KERNEL
   213 000017AA 00000000            <1> .esp1:    dd 0
   214 000017AE 00000000            <1> .ss1:     dd 0
   215 000017B2 00000000            <1> .esp2:    dd 0
   216 000017B6 00000000            <1> .ss2:     dd 0
   217 000017BA 00202000            <1> .cr3:     dd CR3_TASK_5
   218 000017BE [541A0000]          <1> .eip:     dd task_3
   219 000017C2 02020000            <1> .eflags:  dd 0x0202
   220 000017C6 00000000            <1> .eax:     dd 0
   221 000017CA 00000000            <1> .ecx:     dd 0
   222 000017CE 00000000            <1> .edx:     dd 0
   223 000017D2 00000000            <1> .ebx:     dd 0
   224 000017D6 00481000            <1> .esp:     dd SP_TASK_5
   225 000017DA 00000000            <1> .ebp:     dd 0
   226 000017DE 00000000            <1> .esi:     dd 0
   227 000017E2 00000000            <1> .edi:     dd 0
   228 000017E6 57000000            <1> .es:      dd DS_TASK_5
   229 000017EA 3F000000            <1> .cs:      dd CS_TASK_3
   230 000017EE 57000000            <1> .ss:      dd DS_TASK_5
   231 000017F2 57000000            <1> .ds:      dd DS_TASK_5
   232 000017F6 57000000            <1> .fs:      dd DS_TASK_5
   233 000017FA 57000000            <1> .gs:      dd DS_TASK_5
   234 000017FE 28000000            <1> .ldt:     dd SS_LDT
   235 00001802 00000000            <1> .io:      dd 0
   236 00001806 00<rept>            <1> .fp_save: times 108 + 4 db 0
   237                              <1> 
   238                              <1> TSS_6:
   239 00001876 00000000            <1> .link:    dd 0
   240 0000187A 004A1000            <1> .esp0:    dd SP_TASK_6 - 512
   241 0000187E 10000000            <1> .ss0:     dd DS_KERNEL
   242 00001882 00000000            <1> .esp1:    dd 0
   243 00001886 00000000            <1> .ss1:     dd 0
   244 0000188A 00000000            <1> .esp2:    dd 0
   245 0000188E 00000000            <1> .ss2:     dd 0
   246 00001892 00402000            <1> .cr3:     dd CR3_TASK_6
   247 00001896 [541A0000]          <1> .eip:     dd task_3
   248 0000189A 02020000            <1> .eflags:  dd 0x0202
   249 0000189E 00000000            <1> .eax:     dd 0
   250 000018A2 00000000            <1> .ecx:     dd 0
   251 000018A6 00000000            <1> .edx:     dd 0
   252 000018AA 00000000            <1> .ebx:     dd 0
   253 000018AE 004C1000            <1> .esp:     dd SP_TASK_6
   254 000018B2 00000000            <1> .ebp:     dd 0
   255 000018B6 00000000            <1> .esi:     dd 0
   256 000018BA 00000000            <1> .edi:     dd 0
   257 000018BE 5F000000            <1> .es:      dd DS_TASK_6
   258 000018C2 3F000000            <1> .cs:      dd CS_TASK_3
   259 000018C6 5F000000            <1> .ss:      dd DS_TASK_6
   260 000018CA 5F000000            <1> .ds:      dd DS_TASK_6
   261 000018CE 5F000000            <1> .fs:      dd DS_TASK_6
   262 000018D2 5F000000            <1> .gs:      dd DS_TASK_6
   263 000018D6 28000000            <1> .ldt:     dd SS_LDT
   264 000018DA 00000000            <1> .io:      dd 0
   265 000018DE 00<rept>            <1> .fp_save:	times 108 + 4 db 0
   266                              <1> 
   196                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 0000194E 68[7C190000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 00001956 006A3FE89DEBFFFF66- <1>
     2 0000195F 83C410              <1>
     3                              <1> 	; cdecl	itoa, esp, .t0, 8, 16, 0b0100
     4                              <1> 	; cdecl	draw_str, 0, 2, 0x010F, .s0
     5                              <1> 	;mov	[ESP_COUNTER], esp
     6                              <1> 	; task_1 dose not have level 0
     7                              <1> 	; cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
     8                              <1> .10L:
     9                              <1> 	;cdecl	itoa, esp, .t0, 8, 16, 0b0100	
    10                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .t0
    11                              <1> 	;mov	[ESP_COUNTER], esp
    12                              <1> 	
    13                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
    14                              <1> 	
    15 00001962 A1[18030000]        <1> 	mov	eax, [RTC_TIME]
    16 00001967 5068000700006A006A- <1> 	cdecl	draw_time, 72, 0, 0x0700, eax
    16 00001970 48E8A0EEFFFF6683C4- <1>
    16 00001979 10                  <1>
    17                              <1> 
    18                              <1> 	; jmp	SS_TASK_0:0	
    19                              <1> 
    20 0000197A EBE6                <1> 	jmp	.10L
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24 0000197C 5461736B2D3100      <1> .s0	db	"Task-1", 0
   197                                  %include	"task/task_2.s"
     1                              <1> task_2:
     2 00001983 68[461A0000]6A076A- <1> 	cdecl	draw_str, 63, 1, 0x07, .s0
     2 0000198B 016A3FE868EBFFFF66- <1>
     2 00001994 83C410              <1>
     3                              <1> 	
     4 00001997 DB05[341A0000]      <1> 	fild	dword [.c1000]
     5 0000199D D9EB                <1> 	fldpi
     6 0000199F DA35[381A0000]      <1> 	fidiv	dword [.c180]
     7 000019A5 D9EB                <1> 	fldpi
     8 000019A7 DCC0                <1> 	fadd	st0, st0
     9 000019A9 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 000019AB D8C2                <1> 	fadd	st0, st2
    14 000019AD D9F8                <1> 	fprem
    15 000019AF D9C0                <1> 	fld	st0	; copy st0
    16 000019B1 D9FE                <1> 	fsin
    17 000019B3 D8CC                <1> 	fmul	st0, st4
    18 000019B5 DF35[3C1A0000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 000019BB A1[3C1A0000]        <1> 	mov	eax, [.bcd]
    21 000019C0 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 000019C2 250F0F0000          <1> 	and	eax, 0x0F0F
    24 000019C7 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 000019CC C1EB04              <1> 	shr	ebx, 4
    27 000019CF 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 000019D5 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 000019DB 883D[4E1A0000]      <1> 	mov	[.s2 + 0], bh
    31 000019E1 8825[501A0000]      <1> 	mov	[.s3 + 0], ah
    32 000019E7 881D[511A0000]      <1> 	mov	[.s3 + 1], bl
    33 000019ED A2[521A0000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 000019F2 B807000000          <1> 	mov	eax, 7		; sign bit
    36 000019F7 0FA305[451A0000]    <1> 	bt	[.bcd + 9], eax
    37 000019FE 7209                <1> 	jc	.10F
    38                              <1> 	
    39 00001A00 C605[4D1A0000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 00001A07 EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 00001A09 C605[4D1A0000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 00001A10 68[4D1A0000]6A076A- <1> 	cdecl	draw_str, 72, 1, 0x07, .s1
    44 00001A18 016A48E8DBEAFFFF66- <1>
    44 00001A21 83C410              <1>
    45                              <1> 	
    46 00001A24 6A0AE8D5F2FFFF6683- <1> 	cdecl	wait_tick, 10
    46 00001A2D C404                <1>
    47                              <1> 
    48 00001A2F E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 00001A34 E8030000            <1> .c1000	dd	1000
    53 00001A38 B4000000            <1> .c180	dd	180
    54 00001A3C 00<rept>            <1> .bcd:	times	10	db	0x00
    55 00001A46 5461736B2D3200      <1> .s0	db	"Task-2", 0
    56 00001A4D 2D                  <1> .s1:	db	"-"
    57 00001A4E 302E                <1> .s2:	db	"0."
    58 00001A50 30303000            <1> .s3:	db	"000", 0
   198                                  %include	"task/task_3.s"
     1                              <1> task_3:
     2                              <1> 	; push	ebp
     3 00001A54 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00001A56 6A00                <1> 	push	dword 0	; origin x
     6 00001A58 6A00                <1> 	push	dword 0	; origin y
     7 00001A5A 6A00                <1> 	push	dword 0	; 
     8 00001A5C 6A00                <1> 	push	dword 0
     9 00001A5E 6A00                <1> 	push	dword 0
    10                              <1> 
    11                              <1> 
    12 00001A60 BE00701000          <1> 	mov	esi, 0x0010_7000
    13                              <1> 
    14 00001A65 8B06                <1> 	mov	eax, [esi + rose.x0]
    15 00001A67 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    16                              <1> 
    17 00001A6A C1E803              <1> 	shr	eax, 3		; eax is x
    18 00001A6D C1EB04              <1> 	shr	ebx, 4		; ebx is y
    19 00001A70 4B                  <1> 	dec	ebx
    20 00001A71 8B4E24              <1> 	mov	ecx, [esi + rose.color_s]
    21 00001A74 8D5630              <1> 	lea	edx, [esi + rose.title]
    22                              <1> 
    23 00001A77 52515350E87BEAFFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx	; draw title
    23 00001A80 6683C410            <1>
    24                              <1> 
    25 00001A84 8B06                <1> 	mov	eax, [esi + rose.x0]
    26 00001A86 8B5E08              <1> 	mov	ebx, [esi + rose.x1]
    27 00001A89 29C3                <1> 	sub	ebx, eax
    28 00001A8B D1EB                <1> 	shr	ebx, 1			; half of size
    29 00001A8D 01C3                <1> 	add	ebx, eax		; origin x
    30 00001A8F 895DFC              <1> 	mov	[ebp - 4], ebx
    31                              <1> 
    32 00001A92 8B4604              <1> 	mov	eax, [esi + rose.y0]
    33 00001A95 8B5E0C              <1> 	mov	ebx, [esi + rose.y1]
    34 00001A98 29C3                <1> 	sub	ebx, eax
    35 00001A9A D1EB                <1> 	shr	ebx, 1
    36 00001A9C 01C3                <1> 	add	ebx, eax
    37 00001A9E 895DF8              <1> 	mov	[ebp - 8], ebx
    38                              <1> 
    39 00001AA1 8B06                <1> 	mov	eax, [esi + rose.x0]	; x start
    40 00001AA3 8B5DF8              <1> 	mov	ebx, [ebp - 8]		; y
    41 00001AA6 8B4E08              <1> 	mov	ecx, [esi + rose.x1]	; x end
    42                              <1> 
    43 00001AA9 FF761853515350E8BF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; x axis
    43 00001AB2 EBFFFF6683C414      <1>
    44                              <1> 
    45 00001AB9 8B4604              <1> 	mov	eax, [esi + rose.y0]	; y start
    46 00001ABC 8B5DFC              <1> 	mov	ebx, [ebp - 4]		; x
    47 00001ABF 8B4E0C              <1> 	mov	ecx, [esi + rose.y1]	; y end
    48                              <1> 
    49 00001AC2 FF761C51535053E8A6- <1> 	cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
    49 00001ACB EBFFFF6683C414      <1>
    50                              <1> 
    51 00001AD2 8B06                <1> 	mov	eax, [esi + rose.x0]
    52 00001AD4 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    53 00001AD7 8B4E08              <1> 	mov	ecx, [esi + rose.x1]
    54 00001ADA 8B560C              <1> 	mov	edx, [esi + rose.y1]
    55                              <1> 
    56 00001ADD FF762052515350E83C- <1> 	cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
    56 00001AE6 ECFFFF6683C414      <1>
    57                              <1> 
    58 00001AED 8B4608              <1> 	mov	eax, [esi + rose.x1]
    59 00001AF0 2B06                <1> 	sub	eax, [esi + rose.x0]
    60 00001AF2 D1E8                <1> 	shr	eax, 1
    61 00001AF4 89C3                <1> 	mov	ebx, eax
    62 00001AF6 C1EB04              <1> 	shr	ebx, 4
    63 00001AF9 29D8                <1> 	sub	eax, ebx
    64                              <1> 	; eax -= eax / 16
    65                              <1> 
    66 00001AFB FF7614FF761050E84D- <1> 	cdecl	fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
    66 00001B04 0100006683C40C      <1>
    67                              <1> .10L:
    68                              <1> 
    69 00001B0B 8D5DF4              <1> 	lea	ebx, [ebp - 12]	; x position address
    70 00001B0E 8D4DF0              <1> 	lea	ecx, [ebp - 16]	; y position address
    71 00001B11 8B45EC              <1> 	mov	eax, [ebp - 20]	; t
    72                              <1> 
    73 00001B14 505153E85201000066- <1> 	cdecl	fpu_rose_update, ebx, ecx, eax
    73 00001B1D 83C40C              <1>
    74                              <1> 
    75 00001B20 BA00000000          <1> 	mov	edx, 0
    76 00001B25 40                  <1> 	inc	eax
    77 00001B26 BBA08C0000          <1> 	mov	ebx, 360 * 100
    78 00001B2B F7F3                <1> 	div	ebx
    79                              <1> 	; EDX:EAX div ebx. EAX : /, EDX : %.
    80 00001B2D 8955EC              <1> 	mov	[ebp -20], edx
    81                              <1> 
    82 00001B30 8B4DF4              <1> 	mov	ecx, [ebp -12]	; x = 0
    83 00001B33 8B55F0              <1> 	mov	edx, [ebp -16]	; y = 0
    84                              <1> 
    85 00001B36 034DFC              <1> 	add	ecx, [ebp - 4]	; x += X
    86 00001B39 0355F8              <1> 	add	edx, [ebp - 8]	; t += Y
    87                              <1> 
    88 00001B3C 8B5E28              <1> 	mov	ebx, [esi + rose.color_f]
    89 00001B3F CD82                <1> 	int	0x82		; draw_pixel at (ecx, edx). color is ebx
    90                              <1> 
    91 00001B41 6A02E8B8F1FFFF6683- <1> 	cdecl	wait_tick, 2
    91 00001B4A C404                <1>
    92                              <1> 
    93 00001B4C 8B5E2C              <1> 	mov	ebx, [esi + rose.color_b]
    94 00001B4F CD82                <1> 	int	0x82
    95                              <1> 	
    96 00001B51 EBB8                <1> 	jmp	.10L
    97                              <1> 
    98 00001B53 00                  <1> ALIGN	4,	db	0
    99                              <1> 
   100                              <1> ALIGN 4, db 0
   101                              <1> DRAW_PARAM:
   102                              <1> .t3:
   103                              <1>     istruc rose
   104 00001B54 20000000            <1>         at rose.x0, dd 32
   105 00001B58 20000000            <1>         at rose.y0, dd 32
   106 00001B5C D0000000            <1>         at rose.x1, dd 208
   107 00001B60 D0000000            <1>         at rose.y1, dd 208
   108                              <1> 
   109 00001B64 02000000            <1>         at rose.n, dd 2
   110 00001B68 01000000            <1>         at rose.d, dd 1
   111                              <1> 
   112 00001B6C 07000000            <1>         at rose.color_x, dd 0x0007
   113 00001B70 07000000            <1>         at rose.color_y, dd 0x0007
   114 00001B74 0F000000            <1>         at rose.color_z, dd 0x000F
   115 00001B78 0F030000            <1>         at rose.color_s, dd 0x030F
   116 00001B7C 0F000000            <1>         at rose.color_f, dd 0x000F
   117 00001B80 03000000            <1>         at rose.color_b, dd 0x0003
   118                              <1> 
   119 00001B84 5461736B2D3300      <1>         at rose.title, db "Task-3", 0
   120 00001B8B 00<rept>            <1>     iend
   121                              <1> 
   122                              <1> .t4:
   123                              <1>     istruc rose
   124 00001B94 F8000000            <1>         at rose.x0, dd 248
   125 00001B98 20000000            <1>         at rose.y0, dd 32
   126 00001B9C A8010000            <1>         at rose.x1, dd 424
   127 00001BA0 D0000000            <1>         at rose.y1, dd 208
   128                              <1> 
   129 00001BA4 03000000            <1>         at rose.n, dd 3
   130 00001BA8 01000000            <1>         at rose.d, dd 1
   131                              <1> 
   132 00001BAC 07000000            <1>         at rose.color_x, dd 0x0007
   133 00001BB0 07000000            <1>         at rose.color_y, dd 0x0007
   134 00001BB4 0F000000            <1>         at rose.color_z, dd 0x000F
   135 00001BB8 0F040000            <1>         at rose.color_s, dd 0x040F
   136 00001BBC 0F000000            <1>         at rose.color_f, dd 0x000F
   137 00001BC0 04000000            <1>         at rose.color_b, dd 0x0004
   138                              <1> 
   139 00001BC4 5461736B2D3400      <1>         at rose.title, db "Task-4", 0
   140 00001BCB 00<rept>            <1>     iend
   141                              <1> 
   142                              <1> .t5:
   143                              <1>     istruc rose
   144 00001BD4 20000000            <1>         at rose.x0, dd 32
   145 00001BD8 10010000            <1>         at rose.y0, dd 272
   146 00001BDC D0000000            <1>         at rose.x1, dd 208
   147 00001BE0 C0010000            <1>         at rose.y1, dd 448
   148                              <1> 
   149 00001BE4 02000000            <1>         at rose.n, dd 2
   150 00001BE8 06000000            <1>         at rose.d, dd 6
   151                              <1> 
   152 00001BEC 07000000            <1>         at rose.color_x, dd 0x0007
   153 00001BF0 07000000            <1>         at rose.color_y, dd 0x0007
   154 00001BF4 0F000000            <1>         at rose.color_z, dd 0x000F
   155 00001BF8 0F050000            <1>         at rose.color_s, dd 0x050F
   156 00001BFC 0F000000            <1>         at rose.color_f, dd 0x000F
   157 00001C00 05000000            <1>         at rose.color_b, dd 0x0005
   158                              <1> 
   159 00001C04 5461736B2D3500      <1>         at rose.title, db "Task-5", 0
   160 00001C0B 00<rept>            <1>     iend
   161                              <1> 
   162                              <1> .t6:
   163                              <1>     istruc rose
   164 00001C14 F8000000            <1>         at rose.x0, dd 248
   165 00001C18 10010000            <1>         at rose.y0, dd 272
   166 00001C1C A8010000            <1>         at rose.x1, dd 424
   167 00001C20 C0010000            <1>         at rose.y1, dd 448
   168                              <1> 
   169 00001C24 04000000            <1>         at rose.n, dd 4
   170 00001C28 06000000            <1>         at rose.d, dd 6
   171                              <1> 
   172 00001C2C 07000000            <1>         at rose.color_x, dd 0x0007
   173 00001C30 07000000            <1>         at rose.color_y, dd 0x0007
   174 00001C34 0F000000            <1>         at rose.color_z, dd 0x000F
   175 00001C38 0F060000            <1>         at rose.color_s, dd 0x060F
   176 00001C3C 0F000000            <1>         at rose.color_f, dd 0x000F
   177 00001C40 06000000            <1>         at rose.color_b, dd 0x0006
   178                              <1> 
   179 00001C44 5461736B2D3600      <1>         at rose.title, db "Task-6", 0
   180 00001C4B 00<rept>            <1>     iend
   181                              <1> 
   182                              <1> 
   183                              <1> 
   184                              <1> fpu_rose_init:	;	fpu_rose_init(A,n,d)
   185 00001C54 55                  <1> 	push	ebp
   186 00001C55 89E5                <1> 	mov	ebp, esp
   187                              <1> 
   188 00001C57 68B4000000          <1> 	push	dword 180
   189                              <1> 
   190 00001C5C D9EB                <1> 	fldpi
   191 00001C5E DA75FC              <1> 	fidiv	dword [ebp - 4]	; 180
   192 00001C61 DB450C              <1> 	fild	dword [ebp +12]	; n
   193 00001C64 DA7510              <1> 	fidiv	dword [ebp +16]	; n / d
   194 00001C67 DB4508              <1> 	fild	dword [ebp + 8]	; A
   195                              <1> 
   196 00001C6A 89EC                <1> 	mov	esp, ebp
   197 00001C6C 5D                  <1> 	pop	ebp
   198                              <1> 
   199 00001C6D C3                  <1> 	ret
   200                              <1> 
   201                              <1> fpu_rose_update:	;	fpu_rose_update(px, py, t)
   202                              <1> ; px,py is address. t is angle
   203 00001C6E 55                  <1> 	push	ebp
   204 00001C6F 89E5                <1> 	mov	ebp, esp
   205                              <1> 
   206 00001C71 50                  <1> 	push	eax
   207 00001C72 53                  <1> 	push	ebx
   208                              <1> 
   209 00001C73 8B4508              <1> 	mov	eax, [ebp + 8]
   210 00001C76 8B5D0C              <1> 	mov	ebx, [ebp +12]
   211                              <1> 
   212 00001C79 DB4510              <1> 	fild	dword [ebp +16]
   213 00001C7C D8CB                <1> 	fmul	st0, st3		; st0 is degree, st3 is radian / degree. st0 is radian
   214 00001C7E D9C0                <1> 	fld	st0
   215                              <1> 
   216 00001C80 D9FB                <1> 	fsincos
   217 00001C82 D9CA                <1> 	fxch	st2			; change st0, st2
   218 00001C84 D8CC                <1> 	fmul	st0, st4		; st0 = kθ
   219 00001C86 D9FE                <1> 	fsin				; st0 = sin(kθ)
   220 00001C88 D8CB                <1> 	fmul	st0, st3		; st0 = Asin(kθ)
   221                              <1> 
   222 00001C8A D9CA                <1> 	fxch	st2
   223 00001C8C D8CA                <1> 	fmul	st0, st2
   224 00001C8E DB18                <1> 	fistp	dword [eax]		; store x pos
   225                              <1> 
   226 00001C90 DEC9                <1> 	fmulp	st1, st0
   227 00001C92 D9E0                <1> 	fchs				; convert to display coordinate
   228 00001C94 DB1B                <1> 	fistp	dword [ebx]		; store y pos
   229                              <1> 
   230 00001C96 5B                  <1> 	pop	ebx
   231 00001C97 58                  <1> 	pop	eax
   232                              <1> 
   233 00001C98 89EC                <1> 	mov	esp, ebp
   234 00001C9A 5D                  <1> 	pop	ebp
   235                              <1> 
   236 00001C9B C3                  <1> 	ret
   237                              <1> 
   238                              <1> 
   239                              <1> 	
   240                              <1> 
   241                              <1> 
   199                                  ;%include	"../../../../testOS/src/39_rose/tasks/task_3.s"
   200                                  
   201                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   202                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   203                                  test_func:
   204 00001C9C 68[B41C0000]680F01-     	cdecl	draw_str, 0, 20, 0x010F, .t0
   204 00001CA4 00006A146A00E84CE8-
   204 00001CAD FFFF6683C410       
   205 00001CB3 C3                      	ret
   206                                  
   207 00001CB4 54657374206D657373-     .t0:	db	"Test message", 0
   207 00001CBD 61676500           
   208                                  
   209                                  debug:
   210 00001CC1 55                      	push	ebp
   211 00001CC2 89E5                    	mov	ebp, esp
   212 00001CC4 68[DF1C0000]680F01-     	cdecl	draw_str, 0, 1, 0x010F, .t0
   212 00001CCC 00006A016A00E824E8-
   212 00001CD5 FFFF6683C410       
   213 00001CDB 89EC                    	mov	esp, ebp
   214 00001CDD 5D                      	pop	ebp
   215                                  
   216 00001CDE C3                      	ret
   217 00001CDF 74657374                .t0:	db	"test"
   218                                  
   219 00001CE3 01<rept>                	times	KERNEL_SIZE - ($ - $$) - 0x100	db	1
   220                                  
   221 00001F00 [DB0F0000]              func:	dd	draw_num
   222 00001F04 [9C1C0000]              	dd	test_func
   223                                  	; dd	draw_str
   224 00001F08 [FB040000]              	dd	draw_str
   225                                  
   226                                  
   227                                  
   228                                  
   229                                  
   230 00001F0C 01<rept>                	times	KERNEL_SIZE - ($ - $$)	db	1
   231                                  
   232                                  ; KERNEL_END:
   233                                  
