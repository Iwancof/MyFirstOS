     1                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD		equ	0x7c00
     2                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     3                              <1> 
     4                              <1> BOOT_SIZE		equ	(1024 * 8)
     5                              <1> SECT_SIZE		equ	(512)
     6                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
     7                              <1> 
     8                              <1> E820_RECORD_SIZE	equ	20
     9                              <1> 
    10                              <1> KERNEL_LOAD		equ	0x0010_1000
    11                              <1> KERNEL_SIZE		equ	(1024 * 8)
    12                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
     2                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     3                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     4                                  
     5                                  ORG	KERNEL_LOAD
     6                                  
     7                                  [BITS 32]
     8                                  
     9                                  kernel:
    10                                  	
    11 00000000 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    12 00000005 0FB706                  	movzx	eax, word [esi + 0]
    13 00000008 0FB75E02                	movzx	ebx, word [esi + 2]
    14 0000000C C1E004                  	shl	eax, 4
    15 0000000F 01D8                    	add	eax, ebx		; Emulate real mode addressing
    16 00000011 A3[B0000000]            	mov	[FONT_ADR], eax
    17                                  
    18                                  
    19 00000016 6A0D6A3FE80C020000-     	cdecl	draw_font, 63, 13
    19 0000001F 6683C408           
    20 00000023 6A046A3FE883020000-     	cdecl	draw_color_bar, 63, 4
    20 0000002C 6683C408           
    21                                  
    22 00000030 68[9D000000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    22 00000038 00006A0E6A19E82302-
    22 00000041 00006683C410       
    23                                  
    24 00000047 6A0368C800000068C8-     	cdecl	draw_rect, 100, 100, 200, 200, 0x03
    24 00000050 0000006A646A64E840-
    24 00000059 0400006683C414     
    25 00000060 6A0568960000006896-     	cdecl	draw_rect, 400, 250, 150, 150, 0x05
    25 00000069 00000068FA00000068-
    25 00000072 90010000E821040000-
    25 0000007B 6683C414           
    26 0000007F 6A066A64682C010000-     	cdecl	draw_rect, 350, 400, 300, 100, 0x06
    26 00000088 6890010000685E0100-
    26 00000091 00E8050400006683C4-
    26 0000009A 14                 
    27                                  
    28 0000009B EBFE                    	jmp	$
    29                                  	
    30 0000009D 77656C636F6D652074-     .s0:	db	"welcome to kernel!", 0
    30 000000A6 6F206B65726E656C21-
    30 000000AF 00                 
    31                                  
    32                                  ALIGN	4,	db	0
    33 000000B0 00000000                FONT_ADR:	dd	0
    34                                  
    35                                  
    36                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 000000B4 55                  <1> 	push	ebp
     4 000000B5 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 000000B7 50                  <1> 	push	eax
     7 000000B8 52                  <1> 	push	edx
     8                              <1> 
     9 000000B9 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 000000BC 80E403              <1> 	and	ah, 0x03
    11 000000BF B004                <1> 	mov	al, 0x04	; read map
    12 000000C1 66BACE03            <1> 	mov	dx, 0x03CE
    13 000000C5 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 000000C7 5A                  <1> 	pop	edx
    16 000000C8 58                  <1> 	pop	eax
    17                              <1> 
    18 000000C9 89EC                <1> 	mov	esp,ebp
    19 000000CB 5D                  <1> 	pop	ebp
    20                              <1> 
    21 000000CC C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 000000CD 55                  <1> 	push	ebp
    25 000000CE 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 000000D0 50                  <1> 	push	eax
    28 000000D1 52                  <1> 	push	edx
    29                              <1> 
    30 000000D2 8A6508              <1> 	mov	ah, [ebp + 8]
    31 000000D5 80E40F              <1> 	and	ah, 0x0F
    32 000000D8 B002                <1> 	mov	al, 0x02		; write select
    33 000000DA 66BAC403            <1> 	mov	dx, 0x03C4
    34 000000DE 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 000000E0 5A                  <1> 	pop	edx
    37 000000E1 58                  <1> 	pop	eax
    38                              <1> 
    39 000000E2 89EC                <1> 	mov	esp, ebp
    40 000000E4 5D                  <1> 	pop	ebp
    41                              <1> 
    42 000000E5 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 000000E6 55                  <1> 	push	ebp
    51 000000E7 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 000000E9 50                  <1> 	push	eax
    54 000000EA 53                  <1> 	push	ebx
    55 000000EB 51                  <1> 	push	ecx
    56 000000EC 52                  <1> 	push	edx
    57 000000ED 56                  <1> 	push	esi
    58 000000EE 57                  <1> 	push	edi
    59                              <1> 
    60 000000EF 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 000000F2 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 000000F5 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 000000F9 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 000000FD 84C7                <1> 	test	bh, al			; BACK
    67 000000FF 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 00000102 FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 00000104 84C3                <1> 	test	bl, al			; FORWARD
    71 00000106 0F94C2              <1> 	setz	dl
    72 00000109 FECA                <1> 	dec	dl
    73                              <1> 
    74 0000010B FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 0000010C B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 00000111 AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 00000112 88C4                <1> 	mov	ah, al			; AL is font data
    80 00000114 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 00000116 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 00000118 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 0000011E 7404                <1> 	jz	.11F
    86 00000120 2227                <1> 	and	ah, [edi]
    87 00000122 EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 00000124 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 00000126 08E0                <1> 	or	al,ah
    92 00000128 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 0000012A 83C750              <1> 	add	edi,80			; next
    95 0000012D E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 0000012F 5F                  <1> 	pop	edi
    99 00000130 5E                  <1> 	pop	esi
   100 00000131 5A                  <1> 	pop	edx
   101 00000132 59                  <1> 	pop	ecx
   102 00000133 5B                  <1> 	pop	ebx
   103 00000134 58                  <1> 	pop	eax
   104                              <1> 
   105 00000135 89EC                <1> 	mov	esp, ebp
   106 00000137 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000138 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 00000139 55                  <1> 	push	ebp
   113 0000013A 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 0000013C 57                  <1> 	push	edi
   116 0000013D 50                  <1> 	push	eax
   117 0000013E 53                  <1> 	push	ebx
   118                              <1> 
   119 0000013F 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 00000142 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 00000146 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 0000014A 84C3                <1> 	test	bl, al
   124 0000014C 0F94C3              <1> 	setz	bl
   125 0000014F FECB                <1> 	dec	bl
   126                              <1> 
   127 00000151 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 00000154 88C4                <1> 	mov	ah, al
   129 00000156 F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 00000158 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 0000015A 20D8                <1> 	and	al, bl
   134 0000015C 08E0                <1> 	or	al, ah
   135 0000015E 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 00000160 5B                  <1> 	pop	ebx
   138 00000161 58                  <1> 	pop	eax
   139 00000162 5F                  <1> 	pop	edi
   140                              <1> 
   141 00000163 89EC                <1> 	mov	esp, ebp
   142 00000165 5D                  <1> 	pop	ebp
   143                              <1> 
   144 00000166 C3                  <1> 	ret
   145                              <1> 
    37                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 00000167 55                  <1> 	push	ebp
     4 00000168 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 0000016A 56                  <1> 	push	esi
     7 0000016B 57                  <1> 	push	edi
     8 0000016C 50                  <1> 	push	eax
     9 0000016D 53                  <1> 	push	ebx
    10 0000016E 51                  <1> 	push	ecx
    11 0000016F 52                  <1> 	push	edx
    12                              <1> 
    13 00000170 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 00000174 C1E604              <1> 	shl	esi, 4
    15 00000177 0335[B0000000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 0000017D 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 00000180 C1E708              <1> 	shl	edi, 8
    19 00000183 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 0000018A 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 0000018D 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 00000191 6A03E81CFFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 0000019A C404                <1>
    25 0000019C 6A08E82AFFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 000001A5 C404                <1>
    26 000001A7 536A085756E835FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 000001B0 FF6683C410          <1>
    27                              <1> 
    28 000001B5 6A02E8F8FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 000001BE C404                <1>
    29 000001C0 6A04E806FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 000001C9 C404                <1>
    30 000001CB 536A045756E811FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 000001D4 FF6683C410          <1>
    31                              <1> 
    32 000001D9 6A01E8D4FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 000001E2 C404                <1>
    33 000001E4 6A02E8E2FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 000001ED C404                <1>
    34 000001EF 536A025756E8EDFEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 000001F8 FF6683C410          <1>
    35                              <1> 	
    36 000001FD 6A00E8B0FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 00000206 C404                <1>
    37 00000208 6A01E8BEFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 00000211 C404                <1>
    38 00000213 536A015756E8C9FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 0000021C FF6683C410          <1>
    39                              <1> 
    40 00000221 5A                  <1> 	pop	edx
    41 00000222 59                  <1> 	pop	ecx
    42 00000223 5B                  <1> 	pop	ebx
    43 00000224 58                  <1> 	pop	eax
    44 00000225 5F                  <1> 	pop	edi
    45 00000226 5E                  <1> 	pop	esi
    46                              <1> 
    47 00000227 89EC                <1> 	mov	esp, ebp
    48 00000229 5D                  <1> 	pop	ebp
    49                              <1> 
    50 0000022A C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
    38                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 0000022B 55                  <1> 	push	ebp
     3 0000022C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000022E 50                  <1> 	push	eax
     6 0000022F 53                  <1> 	push	ebx
     7 00000230 51                  <1> 	push	ecx
     8                              <1> 
     9 00000231 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 00000236 81F900010000        <1> 	cmp	ecx,256
    12 0000023C 7321                <1> 	jae	.10E
    13                              <1> 
    14 0000023E 89C8                <1> 	mov	eax, ecx
    15 00000240 83E00F              <1> 	and	eax, 0b00001111
    16 00000243 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 00000246 89CB                <1> 	mov	ebx, ecx
    19 00000248 C1EB04              <1> 	shr	ebx, 4
    20 0000024B 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 0000024E 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 00000257 FF6683C410          <1>
    23                              <1> 	
    24 0000025C 41                  <1> 	inc	ecx
    25 0000025D EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 0000025F 59                  <1> 	pop	ecx
    30 00000260 5B                  <1> 	pop	ebx
    31 00000261 58                  <1> 	pop	eax
    32                              <1> 
    33 00000262 89EC                <1> 	mov	esp, ebp
    34 00000264 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000265 C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
    39                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 00000266 55                  <1> 	push	ebp
     3 00000267 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000269 50                  <1> 	push	eax
     6 0000026A 53                  <1> 	push	ebx
     7 0000026B 51                  <1> 	push	ecx
     8 0000026C 52                  <1> 	push	edx
     9 0000026D 56                  <1> 	push	esi
    10                              <1> 
    11 0000026E 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 00000271 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 00000274 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 00000278 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 0000027B FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 0000027C AC                  <1> 	lodsb
    20 0000027D 3C00                <1> 	cmp	al, 0
    21 0000027F 7425                <1> 	je	.10E
    22 00000281 50525153E8DDFEFFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    22 0000028A 6683C410            <1>
    23 0000028E 43                  <1> 	inc	ebx
    24 0000028F 83FB50              <1> 	cmp	ebx, 80
    25 00000292 7CE8                <1> 	jl	.10L
    26 00000294 BB00000000          <1> 	mov	ebx, 0
    27 00000299 41                  <1> 	inc	ecx
    28 0000029A 83F91E              <1> 	cmp	ecx, 30
    29 0000029D 7CDD                <1> 	jl	.10L
    30 0000029F B900000000          <1> 	mov	ecx, 0
    31                              <1> 	
    32 000002A4 EBD6                <1> 	jmp	.10L
    33                              <1> .10E:
    34                              <1> 
    35 000002A6 5E                  <1> 	pop	esi
    36 000002A7 5A                  <1> 	pop	edx
    37 000002A8 59                  <1> 	pop	ecx
    38 000002A9 5B                  <1> 	pop	ebx
    39 000002AA 58                  <1> 	pop	eax
    40                              <1> 
    41 000002AB 89EC                <1> 	mov	esp, ebp
    42 000002AD 5D                  <1> 	pop	ebp
    43                              <1> 
    44 000002AE C3                  <1> 	ret
    40                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 000002AF 55                  <1> 	push	ebp
     3 000002B0 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000002B2 56                  <1> 	push	esi
     6 000002B3 57                  <1> 	push	edi
     7 000002B4 50                  <1> 	push	eax
     8 000002B5 53                  <1> 	push	ebx
     9 000002B6 51                  <1> 	push	ecx
    10 000002B7 52                  <1> 	push	edx
    11                              <1> 
    12 000002B8 8B7508              <1> 	mov	esi, [ebp + 8]
    13 000002BB 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 000002BE B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 000002C3 83F910              <1> 	cmp	ecx, 16
    18 000002C6 732E                <1> 	jae	.10E
    19                              <1> 
    20 000002C8 89C8                <1> 	mov	eax, ecx
    21 000002CA 83E001              <1> 	and	eax, 0x01	; % 2
    22 000002CD C1E003              <1> 	shl	eax, 3		; *= 8
    23 000002D0 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 000002D2 89CB                <1> 	mov	ebx, ecx
    26 000002D4 D1EB                <1> 	shr	ebx, 1		; / 2
    27 000002D6 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 000002D8 89CA                <1> 	mov	edx, ecx
    32 000002DA D1E2                <1> 	shl	edx, 1
    33 000002DC 8B92[09030000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 000002E2 68[00030000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 000002EA E877FFFFFF6683C410  <1>
    36                              <1> 
    37 000002F3 41                  <1> 	inc	ecx
    38 000002F4 EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 000002F6 52                  <1> 	push	edx	
    42 000002F7 51                  <1> 	push	ecx	
    43 000002F8 53                  <1> 	push	ebx	
    44 000002F9 50                  <1> 	push	eax	
    45 000002FA 57                  <1> 	push	edi	
    46 000002FB 56                  <1> 	push	esi	
    47                              <1> 
    48 000002FC 89EC                <1> 	mov	esp, ebp
    49 000002FE 5D                  <1> 	pop	ebp
    50                              <1> 
    51 000002FF C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 00000300 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 00000309 00000008            <1> .t0:	dw 0x0000,0x0800
    57 0000030D 00010009            <1> 	dw 0x0100,0x0900
    58 00000311 0002000A            <1> 	dw 0x0200,0x0A00
    59 00000315 0003000B            <1> 	dw 0x0300,0x0B00
    60 00000319 0004000C            <1> 	dw 0x0400,0x0C00
    61 0000031D 0005000D            <1> 	dw 0x0500,0x0D00
    62 00000321 0006000E            <1> 	dw 0x0600,0x0E00
    63 00000325 0007000F            <1> 	dw 0x0700,0x0F00
    41                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 00000329 55                  <1> 	push	ebp
     4 0000032A 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 0000032C 57                  <1> 	push	edi
     7 0000032D 53                  <1> 	push	ebx
     8 0000032E 51                  <1> 	push	ecx
     9                              <1> 
    10 0000032F 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 00000332 C1E704              <1> 	shl	edi, 4
    12 00000335 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 0000033C 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 0000033F 89D9                <1> 	mov	ecx, ebx
    16 00000341 C1EB03              <1> 	shr	ebx, 3
    17 00000344 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 00000346 83E107              <1> 	and	ecx, 0x07
    20 00000349 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 0000034E D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 00000350 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 00000353 6A03E85AFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 0000035C C404                <1>
    28 0000035E 6A08E868FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 00000367 C404                <1>
    29 00000369 516A085753E8C6FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 00000372 FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 00000377 6A02E836FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 00000380 C404                <1>
    34 00000382 6A04E844FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 0000038B C404                <1>
    35 0000038D 516A045753E8A2FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 00000396 FF6683C410          <1>
    36                              <1> 	
    37 0000039B 6A01E812FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 000003A4 C404                <1>
    38 000003A6 6A02E820FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 000003AF C404                <1>
    39 000003B1 516A025753E87EFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 000003BA FF6683C410          <1>
    40                              <1> 	
    41 000003BF 6A00E8EEFCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 000003C8 C404                <1>
    42 000003CA 6A01E8FCFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 000003D3 C404                <1>
    43 000003D5 516A015753E85AFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 000003DE FF6683C410          <1>
    44                              <1> 
    45 000003E3 59                  <1> 	pop	ecx
    46 000003E4 5B                  <1> 	pop	ebx
    47 000003E5 5F                  <1> 	pop	edi
    48                              <1> 
    49 000003E6 89EC                <1> 	mov	esp, ebp
    50 000003E8 5D                  <1> 	pop	ebp
    51                              <1> 
    52 000003E9 C3                  <1> 	ret
    53                              <1> 
    42                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 000003EA 55                  <1> 	push	ebp
     3 000003EB 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000003ED 6A00                <1> 	push	dword 0	; SUM: - 4
     6 000003EF 6A00                <1> 	push	dword 0	; x0 : - 8
     7 000003F1 6A00                <1> 	push	dword 0	; wid: -12
     8 000003F3 6A00                <1> 	push	dword 0	; inx: -16
     9 000003F5 6A00                <1> 	push	dword 0	; y0 : -20
    10 000003F7 6A00                <1> 	push	dword 0	; hei: -24
    11 000003F9 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 000003FB 50                  <1> 	push	eax
    14 000003FC 53                  <1> 	push	ebx
    15 000003FD 51                  <1> 	push	ecx
    16 000003FE 52                  <1> 	push	edx
    17 000003FF 56                  <1> 	push	esi
    18 00000400 57                  <1> 	push	edi
    19                              <1> 
    20 00000401 8B4508              <1> 	mov	eax, [ebp + 8]
    21 00000404 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 00000407 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 00000409 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 0000040B F7DB                <1> 	neg	ebx
    26 0000040D BEFFFFFFFF          <1> 	mov	esi, -1
    27 00000412 EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 00000414 BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 00000419 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 0000041C 8B5514              <1> 	mov	edx, [ebp +20]
    34 0000041F 29CA                <1> 	sub	edx, ecx
    35 00000421 7D09                <1> 	jge	.20F
    36                              <1> 
    37 00000423 F7DA                <1> 	neg	edx
    38 00000425 BFFFFFFFFF          <1> 	mov	edi, -1
    39 0000042A EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 0000042C BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 00000431 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 00000434 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 00000437 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 0000043A 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 0000043D 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 00000440 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 00000443 39D3                <1> 	cmp	ebx, edx
    53 00000445 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 00000447 8D75EC              <1> 	lea	esi, [ebp -20]
    56 0000044A 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 0000044D EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 0000044F 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 00000452 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 00000455 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 00000458 83F900              <1> 	cmp	ecx, 0
    67 0000045B 7505                <1> 	jnz	.30E
    68 0000045D B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75 00000462 FF7518FF75ECFF75F8- <1>         cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    75 0000046B E8B9FEFFFF6683C40C  <1>
    76                              <1> 	
    77                              <1> 	; update coordinate
    78 00000474 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    79 00000477 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    80                              <1> 
    81 00000479 8B45FC              <1> 	mov	eax, [ebp - 4]
    82 0000047C 0347FC              <1> 	add	eax, [edi - 4]
    83 0000047F 8B5EFC              <1> 	mov	ebx, [esi - 4]
    84                              <1> 
    85 00000482 39D8                <1> 	cmp	eax, ebx
    86 00000484 7C07                <1> 	jl	.52E
    87 00000486 29D8                <1> 	sub	eax, ebx	; sum -= wid
    88                              <1> 	; sum can only add -1 or 1
    89                              <1> 	; so. not be  "dif * 2 < sum" 
    90                              <1> 
    91 00000488 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
    92 0000048B 011F                <1> 	add	[edi - 0], ebx
    93                              <1> .52E:
    94 0000048D 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
    95                              <1> 
    96 00000490 E2D0                <1> 	loop	.50L
    97                              <1> .50E:
    98                              <1> 
    99                              <1> 
   100 00000492 5F                  <1> 	pop	edi
   101 00000493 5E                  <1> 	pop	esi
   102 00000494 5A                  <1> 	pop	edx
   103 00000495 59                  <1> 	pop	ecx
   104 00000496 5B                  <1> 	pop	ebx
   105 00000497 58                  <1> 	pop	eax
   106                              <1> 
   107 00000498 89EC                <1> 	mov	esp, ebp
   108 0000049A 5D                  <1> 	pop	ebp
   109                              <1> 
   110 0000049B C3                  <1> 	ret
   111                              <1> 
   112                              <1> 
    43                                  ;%include	"../../../../testOS/src/modules/protect/draw_line.s"
    44                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 0000049C 55                  <1> 	push	ebp
     3 0000049D 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000049F 50                  <1> 	push	eax
     6 000004A0 53                  <1> 	push	ebx
     7 000004A1 51                  <1> 	push	ecx
     8 000004A2 52                  <1> 	push	edx
     9 000004A3 56                  <1> 	push	esi
    10                              <1> 
    11 000004A4 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 000004A7 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 000004AA 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 000004AD 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 000004B0 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 000004B3 39C8                <1> 	cmp	eax, ecx
    21 000004B5 7C01                <1> 	jl	.10E		; OK
    22 000004B7 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 000004B8 39D3                <1> 	cmp	ebx, edx
    25 000004BA 7C02                <1> 	jl	.20E		; OK
    26 000004BC 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 000004BE 5653515350E822FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 000004C7 FF6683C414          <1>
    36 000004CC 5652505350E814FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 000004D5 FF6683C414          <1>
    37                              <1> 
    38 000004DA 4A                  <1> 	dec	edx
    39 000004DB 5652515250E805FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 000004E4 FF6683C414          <1>
    40 000004E9 42                  <1> 	inc	edx
    41                              <1> 
    42 000004EA 49                  <1> 	dec	ecx
    43 000004EB 5652515351E8F5FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 000004F4 FF6683C414          <1>
    44                              <1> 
    45 000004F9 5E                  <1> 	pop	esi
    46 000004FA 5A                  <1> 	pop	edx
    47 000004FB 59                  <1> 	pop	ecx
    48 000004FC 5B                  <1> 	pop	ebx
    49 000004FD 58                  <1> 	pop	eax
    50                              <1> 
    51 000004FE 89EC                <1> 	mov	esp, ebp
    52 00000500 5D                  <1> 	pop	ebp
    53                              <1> 
    54 00000501 C3                  <1> 	ret
    55                              <1> 
    45                                  ;%include	"../../../../testOS/src/modules/protect/draw_rect.s"
    46                                  ;%include	"../../../../testOS/src/modules/protect/draw_color_bar.s"
    47                                  
    48 00000502 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
