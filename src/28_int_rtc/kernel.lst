     1                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD		equ	0x7c00
     2                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     3                              <1> 
     4                              <1> BOOT_SIZE		equ	(1024 * 8)
     5                              <1> SECT_SIZE		equ	(512)
     6                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
     7                              <1> 
     8                              <1> E820_RECORD_SIZE	equ	20
     9                              <1> 
    10                              <1> KERNEL_LOAD		equ	0x0010_1000
    11                              <1> KERNEL_SIZE		equ	(1024 * 8)
    12                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> VECT_BASE		equ	0x0010_0000
     2                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     3                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     4                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     5                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     6                                  
     7                                  ORG	KERNEL_LOAD
     8                                  
     9                                  ALIGN	4
    10 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    11 00000002 00001000                	dd	VECT_BASE
    12                                  
    13                                  
    14                                  [BITS 32]
    15                                  
    16                                  
    17                                  kernel:
    18 00000006 FA                      	cli
    19                                  
    20 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    21 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    22 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    23 00000013 C1E004                  	shl	eax, 4
    24 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    25 00000018 A3[D0000000]            	mov	[FONT_ADR], eax
    26                                  	
    27 0000001D E8E4070000              	cdecl	init_int
    28 00000022 E87D060000              	cdecl	init_pic
    29                                  
    30 00000027 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    30 0000002F [3D080000]668907C1-
    30 00000037 E810668947065F58   
    31 0000003F 5057BF40011000B8-       	set_vect	0x28, int_rtc
    31 00000047 [67060000]668907C1-
    31 0000004F E810668947065F58   
    32                                  	
    33 00000057 6A10E8320600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    33 00000060 C404               
    34                                  	
    35                                  	outp	0x21, 0b1111_1011	; slave
    35 00000062 B0FB                <1>  mov al, %2
    35 00000064 E621                <1>  out %1, al
    36                                  	outp	0xA1, 0b1111_1110	; rtc
    36 00000066 B0FE                <1>  mov al, %2
    36 00000068 E6A1                <1>  out %1, al
    37                                  
    38 0000006A FB                      	sti
    39                                  
    40 0000006B 6A0D6A3FE8DB010000-     	cdecl	draw_font, 63, 13
    40 00000074 6683C408           
    41 00000078 6A046A3FE852020000-     	cdecl	draw_color_bar, 63, 4
    41 00000081 6683C408           
    42                                  
    43 00000085 68[BA000000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    43 0000008D 00006A0E6A19E8F201-
    43 00000096 00006683C410       
    44                                  
    45 0000009C CD00                    	int	0
    46                                  
    47                                  .10L:
    48 0000009E A1[D4000000]            	mov	eax, [RTC_TIME]
    49 000000A3 5068000700006A006A-     	cdecl	draw_time, 72, 0, 0x0700, eax
    49 000000AC 48E8FF0400006683C4-
    49 000000B5 10                 
    50 000000B6 EBE6                    	jmp	.10L
    51                                  
    52 000000B8 EBFE                    	jmp	$
    53                                  	
    54                                  	
    55 000000BA 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    55 000000C3 65726E656C212000   
    56 000000CB 2D2D2D2D00              .t0:	db	"----",0
    57                                  
    58                                  ALIGN	4,	db	0
    59 000000D0 00000000                FONT_ADR:	dd	0
    60 000000D4 00000000                RTC_TIME:	dd	0
    61                                  
    62                                  
    63                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 000000D8 55                  <1> 	push	ebp
     4 000000D9 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 000000DB 50                  <1> 	push	eax
     7 000000DC 52                  <1> 	push	edx
     8                              <1> 
     9 000000DD 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 000000E0 80E403              <1> 	and	ah, 0x03
    11 000000E3 B004                <1> 	mov	al, 0x04	; read map
    12 000000E5 66BACE03            <1> 	mov	dx, 0x03CE
    13 000000E9 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 000000EB 5A                  <1> 	pop	edx
    16 000000EC 58                  <1> 	pop	eax
    17                              <1> 
    18 000000ED 89EC                <1> 	mov	esp,ebp
    19 000000EF 5D                  <1> 	pop	ebp
    20                              <1> 
    21 000000F0 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 000000F1 55                  <1> 	push	ebp
    25 000000F2 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 000000F4 50                  <1> 	push	eax
    28 000000F5 52                  <1> 	push	edx
    29                              <1> 
    30 000000F6 8A6508              <1> 	mov	ah, [ebp + 8]
    31 000000F9 80E40F              <1> 	and	ah, 0x0F
    32 000000FC B002                <1> 	mov	al, 0x02		; write select
    33 000000FE 66BAC403            <1> 	mov	dx, 0x03C4
    34 00000102 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 00000104 5A                  <1> 	pop	edx
    37 00000105 58                  <1> 	pop	eax
    38                              <1> 
    39 00000106 89EC                <1> 	mov	esp, ebp
    40 00000108 5D                  <1> 	pop	ebp
    41                              <1> 
    42 00000109 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 0000010A 55                  <1> 	push	ebp
    51 0000010B 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 0000010D 50                  <1> 	push	eax
    54 0000010E 53                  <1> 	push	ebx
    55 0000010F 51                  <1> 	push	ecx
    56 00000110 52                  <1> 	push	edx
    57 00000111 56                  <1> 	push	esi
    58 00000112 57                  <1> 	push	edi
    59                              <1> 
    60 00000113 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 00000116 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 00000119 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 0000011D 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 00000121 84C7                <1> 	test	bh, al			; BACK
    67 00000123 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 00000126 FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 00000128 84C3                <1> 	test	bl, al			; FORWARD
    71 0000012A 0F94C2              <1> 	setz	dl
    72 0000012D FECA                <1> 	dec	dl
    73                              <1> 
    74 0000012F FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 00000130 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 00000135 AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 00000136 88C4                <1> 	mov	ah, al			; AL is font data
    80 00000138 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 0000013A 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 0000013C F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 00000142 7404                <1> 	jz	.11F
    86 00000144 2227                <1> 	and	ah, [edi]
    87 00000146 EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 00000148 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 0000014A 08E0                <1> 	or	al,ah
    92 0000014C 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 0000014E 83C750              <1> 	add	edi,80			; next
    95 00000151 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 00000153 5F                  <1> 	pop	edi
    99 00000154 5E                  <1> 	pop	esi
   100 00000155 5A                  <1> 	pop	edx
   101 00000156 59                  <1> 	pop	ecx
   102 00000157 5B                  <1> 	pop	ebx
   103 00000158 58                  <1> 	pop	eax
   104                              <1> 
   105 00000159 89EC                <1> 	mov	esp, ebp
   106 0000015B 5D                  <1> 	pop	ebp
   107                              <1> 
   108 0000015C C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 0000015D 55                  <1> 	push	ebp
   113 0000015E 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 00000160 57                  <1> 	push	edi
   116 00000161 50                  <1> 	push	eax
   117 00000162 53                  <1> 	push	ebx
   118                              <1> 
   119 00000163 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 00000166 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 0000016A 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 0000016E 84C3                <1> 	test	bl, al
   124 00000170 0F94C3              <1> 	setz	bl
   125 00000173 FECB                <1> 	dec	bl
   126                              <1> 
   127 00000175 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 00000178 88C4                <1> 	mov	ah, al
   129 0000017A F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 0000017C 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 0000017E 20D8                <1> 	and	al, bl
   134 00000180 08E0                <1> 	or	al, ah
   135 00000182 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 00000184 5B                  <1> 	pop	ebx
   138 00000185 58                  <1> 	pop	eax
   139 00000186 5F                  <1> 	pop	edi
   140                              <1> 
   141 00000187 89EC                <1> 	mov	esp, ebp
   142 00000189 5D                  <1> 	pop	ebp
   143                              <1> 
   144 0000018A C3                  <1> 	ret
   145                              <1> 
    64                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 0000018B 55                  <1> 	push	ebp
     4 0000018C 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 0000018E 56                  <1> 	push	esi
     7 0000018F 57                  <1> 	push	edi
     8 00000190 50                  <1> 	push	eax
     9 00000191 53                  <1> 	push	ebx
    10 00000192 51                  <1> 	push	ecx
    11 00000193 52                  <1> 	push	edx
    12                              <1> 
    13 00000194 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 00000198 C1E604              <1> 	shl	esi, 4
    15 0000019B 0335[D0000000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 000001A1 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 000001A4 C1E708              <1> 	shl	edi, 8
    19 000001A7 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 000001AE 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 000001B1 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 000001B5 6A03E81CFFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 000001BE C404                <1>
    25 000001C0 6A08E82AFFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 000001C9 C404                <1>
    26 000001CB 536A085756E835FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 000001D4 FF6683C410          <1>
    27                              <1> 
    28 000001D9 6A02E8F8FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 000001E2 C404                <1>
    29 000001E4 6A04E806FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 000001ED C404                <1>
    30 000001EF 536A045756E811FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 000001F8 FF6683C410          <1>
    31                              <1> 
    32 000001FD 6A01E8D4FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 00000206 C404                <1>
    33 00000208 6A02E8E2FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 00000211 C404                <1>
    34 00000213 536A025756E8EDFEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 0000021C FF6683C410          <1>
    35                              <1> 	
    36 00000221 6A00E8B0FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 0000022A C404                <1>
    37 0000022C 6A01E8BEFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 00000235 C404                <1>
    38 00000237 536A015756E8C9FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 00000240 FF6683C410          <1>
    39                              <1> 
    40 00000245 5A                  <1> 	pop	edx
    41 00000246 59                  <1> 	pop	ecx
    42 00000247 5B                  <1> 	pop	ebx
    43 00000248 58                  <1> 	pop	eax
    44 00000249 5F                  <1> 	pop	edi
    45 0000024A 5E                  <1> 	pop	esi
    46                              <1> 
    47 0000024B 89EC                <1> 	mov	esp, ebp
    48 0000024D 5D                  <1> 	pop	ebp
    49                              <1> 
    50 0000024E C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
    65                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 0000024F 55                  <1> 	push	ebp
     3 00000250 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000252 50                  <1> 	push	eax
     6 00000253 53                  <1> 	push	ebx
     7 00000254 51                  <1> 	push	ecx
     8                              <1> 
     9 00000255 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 0000025A 81F900010000        <1> 	cmp	ecx,256
    12 00000260 7321                <1> 	jae	.10E
    13                              <1> 
    14 00000262 89C8                <1> 	mov	eax, ecx
    15 00000264 83E00F              <1> 	and	eax, 0b00001111
    16 00000267 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 0000026A 89CB                <1> 	mov	ebx, ecx
    19 0000026C C1EB04              <1> 	shr	ebx, 4
    20 0000026F 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 00000272 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 0000027B FF6683C410          <1>
    23                              <1> 	
    24 00000280 41                  <1> 	inc	ecx
    25 00000281 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 00000283 59                  <1> 	pop	ecx
    30 00000284 5B                  <1> 	pop	ebx
    31 00000285 58                  <1> 	pop	eax
    32                              <1> 
    33 00000286 89EC                <1> 	mov	esp, ebp
    34 00000288 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000289 C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
    66                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 0000028A 55                  <1> 	push	ebp
     3 0000028B 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 0000028D 50                  <1> 	push	eax
     6 0000028E 53                  <1> 	push	ebx
     7 0000028F 51                  <1> 	push	ecx
     8 00000290 52                  <1> 	push	edx
     9 00000291 56                  <1> 	push	esi
    10                              <1> 
    11 00000292 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 00000295 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 00000298 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 0000029C 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 0000029F FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 000002A0 AC                  <1> 	lodsb
    20 000002A1 3C00                <1> 	cmp	al, 0
    21 000002A3 7425                <1> 	je	.10E
    22 000002A5 50525153E8DDFEFFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    22 000002AE 6683C410            <1>
    23 000002B2 43                  <1> 	inc	ebx
    24 000002B3 83FB50              <1> 	cmp	ebx, 80
    25 000002B6 7CE8                <1> 	jl	.10L
    26 000002B8 BB00000000          <1> 	mov	ebx, 0
    27 000002BD 41                  <1> 	inc	ecx
    28 000002BE 83F91E              <1> 	cmp	ecx, 30
    29 000002C1 7CDD                <1> 	jl	.10L
    30 000002C3 B900000000          <1> 	mov	ecx, 0
    31                              <1> 	
    32 000002C8 EBD6                <1> 	jmp	.10L
    33                              <1> .10E:
    34                              <1> 
    35 000002CA 5E                  <1> 	pop	esi
    36 000002CB 5A                  <1> 	pop	edx
    37 000002CC 59                  <1> 	pop	ecx
    38 000002CD 5B                  <1> 	pop	ebx
    39 000002CE 58                  <1> 	pop	eax
    40                              <1> 
    41 000002CF 89EC                <1> 	mov	esp, ebp
    42 000002D1 5D                  <1> 	pop	ebp
    43                              <1> 
    44 000002D2 C3                  <1> 	ret
    67                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 000002D3 55                  <1> 	push	ebp
     3 000002D4 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000002D6 56                  <1> 	push	esi
     6 000002D7 57                  <1> 	push	edi
     7 000002D8 50                  <1> 	push	eax
     8 000002D9 53                  <1> 	push	ebx
     9 000002DA 51                  <1> 	push	ecx
    10 000002DB 52                  <1> 	push	edx
    11                              <1> 
    12 000002DC 8B7508              <1> 	mov	esi, [ebp + 8]
    13 000002DF 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 000002E2 B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 000002E7 83F910              <1> 	cmp	ecx, 16
    18 000002EA 732E                <1> 	jae	.10E
    19                              <1> 
    20 000002EC 89C8                <1> 	mov	eax, ecx
    21 000002EE 83E001              <1> 	and	eax, 0x01	; % 2
    22 000002F1 C1E003              <1> 	shl	eax, 3		; *= 8
    23 000002F4 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 000002F6 89CB                <1> 	mov	ebx, ecx
    26 000002F8 D1EB                <1> 	shr	ebx, 1		; / 2
    27 000002FA 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 000002FC 89CA                <1> 	mov	edx, ecx
    32 000002FE D1E2                <1> 	shl	edx, 1
    33 00000300 8B92[2D030000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 00000306 68[24030000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 0000030E E877FFFFFF6683C410  <1>
    36                              <1> 
    37 00000317 41                  <1> 	inc	ecx
    38 00000318 EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 0000031A 52                  <1> 	push	edx	
    42 0000031B 51                  <1> 	push	ecx	
    43 0000031C 53                  <1> 	push	ebx	
    44 0000031D 50                  <1> 	push	eax	
    45 0000031E 57                  <1> 	push	edi	
    46 0000031F 56                  <1> 	push	esi	
    47                              <1> 
    48 00000320 89EC                <1> 	mov	esp, ebp
    49 00000322 5D                  <1> 	pop	ebp
    50                              <1> 
    51 00000323 C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 00000324 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 0000032D 00000008            <1> .t0:	dw 0x0000,0x0800
    57 00000331 00010009            <1> 	dw 0x0100,0x0900
    58 00000335 0002000A            <1> 	dw 0x0200,0x0A00
    59 00000339 0003000B            <1> 	dw 0x0300,0x0B00
    60 0000033D 0004000C            <1> 	dw 0x0400,0x0C00
    61 00000341 0005000D            <1> 	dw 0x0500,0x0D00
    62 00000345 0006000E            <1> 	dw 0x0600,0x0E00
    63 00000349 0007000F            <1> 	dw 0x0700,0x0F00
    68                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 0000034D 55                  <1> 	push	ebp
     4 0000034E 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000350 57                  <1> 	push	edi
     7 00000351 53                  <1> 	push	ebx
     8 00000352 51                  <1> 	push	ecx
     9                              <1> 
    10 00000353 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 00000356 C1E704              <1> 	shl	edi, 4
    12 00000359 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 00000360 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 00000363 89D9                <1> 	mov	ecx, ebx
    16 00000365 C1EB03              <1> 	shr	ebx, 3
    17 00000368 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 0000036A 83E107              <1> 	and	ecx, 0x07
    20 0000036D BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 00000372 D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 00000374 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 00000377 6A03E85AFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 00000380 C404                <1>
    28 00000382 6A08E868FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 0000038B C404                <1>
    29 0000038D 516A085753E8C6FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 00000396 FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 0000039B 6A02E836FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 000003A4 C404                <1>
    34 000003A6 6A04E844FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 000003AF C404                <1>
    35 000003B1 516A045753E8A2FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 000003BA FF6683C410          <1>
    36                              <1> 	
    37 000003BF 6A01E812FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 000003C8 C404                <1>
    38 000003CA 6A02E820FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 000003D3 C404                <1>
    39 000003D5 516A025753E87EFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 000003DE FF6683C410          <1>
    40                              <1> 	
    41 000003E3 6A00E8EEFCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 000003EC C404                <1>
    42 000003EE 6A01E8FCFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 000003F7 C404                <1>
    43 000003F9 516A015753E85AFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 00000402 FF6683C410          <1>
    44                              <1> 
    45 00000407 59                  <1> 	pop	ecx
    46 00000408 5B                  <1> 	pop	ebx
    47 00000409 5F                  <1> 	pop	edi
    48                              <1> 
    49 0000040A 89EC                <1> 	mov	esp, ebp
    50 0000040C 5D                  <1> 	pop	ebp
    51                              <1> 
    52 0000040D C3                  <1> 	ret
    53                              <1> 
    69                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 0000040E 55                  <1> 	push	ebp
     3 0000040F 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000411 6A00                <1> 	push	dword 0	; SUM: - 4
     6 00000413 6A00                <1> 	push	dword 0	; x0 : - 8
     7 00000415 6A00                <1> 	push	dword 0	; wid: -12
     8 00000417 6A00                <1> 	push	dword 0	; inx: -16
     9 00000419 6A00                <1> 	push	dword 0	; y0 : -20
    10 0000041B 6A00                <1> 	push	dword 0	; hei: -24
    11 0000041D 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 0000041F 50                  <1> 	push	eax
    14 00000420 53                  <1> 	push	ebx
    15 00000421 51                  <1> 	push	ecx
    16 00000422 52                  <1> 	push	edx
    17 00000423 56                  <1> 	push	esi
    18 00000424 57                  <1> 	push	edi
    19                              <1> 
    20 00000425 8B4508              <1> 	mov	eax, [ebp + 8]
    21 00000428 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 0000042B 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 0000042D 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 0000042F F7DB                <1> 	neg	ebx
    26 00000431 BEFFFFFFFF          <1> 	mov	esi, -1
    27 00000436 EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 00000438 BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 0000043D 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 00000440 8B5514              <1> 	mov	edx, [ebp +20]
    34 00000443 29CA                <1> 	sub	edx, ecx
    35 00000445 7D09                <1> 	jge	.20F
    36                              <1> 
    37 00000447 F7DA                <1> 	neg	edx
    38 00000449 BFFFFFFFFF          <1> 	mov	edi, -1
    39 0000044E EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 00000450 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 00000455 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 00000458 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 0000045B 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 0000045E 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 00000461 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 00000464 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 00000467 39D3                <1> 	cmp	ebx, edx
    53 00000469 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 0000046B 8D75EC              <1> 	lea	esi, [ebp -20]
    56 0000046E 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 00000471 EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 00000473 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 00000476 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 00000479 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 0000047C 83F900              <1> 	cmp	ecx, 0
    67 0000047F 7505                <1> 	jnz	.30E
    68 00000481 B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75 00000486 FF7518FF75ECFF75F8- <1>         cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    75 0000048F E8B9FEFFFF6683C40C  <1>
    76                              <1> 	
    77                              <1> 	; update coordinate
    78 00000498 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    79 0000049B 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    80                              <1> 
    81 0000049D 8B45FC              <1> 	mov	eax, [ebp - 4]
    82 000004A0 0347FC              <1> 	add	eax, [edi - 4]
    83 000004A3 8B5EFC              <1> 	mov	ebx, [esi - 4]
    84                              <1> 
    85 000004A6 39D8                <1> 	cmp	eax, ebx
    86 000004A8 7C07                <1> 	jl	.52E
    87 000004AA 29D8                <1> 	sub	eax, ebx	; sum -= wid
    88                              <1> 	; sum can only add -1 or 1
    89                              <1> 	; so. not be  "dif * 2 < sum" 
    90                              <1> 
    91 000004AC 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
    92 000004AF 011F                <1> 	add	[edi - 0], ebx
    93                              <1> .52E:
    94 000004B1 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
    95                              <1> 
    96 000004B4 E2D0                <1> 	loop	.50L
    97                              <1> .50E:
    98                              <1> 
    99                              <1> 
   100 000004B6 5F                  <1> 	pop	edi
   101 000004B7 5E                  <1> 	pop	esi
   102 000004B8 5A                  <1> 	pop	edx
   103 000004B9 59                  <1> 	pop	ecx
   104 000004BA 5B                  <1> 	pop	ebx
   105 000004BB 58                  <1> 	pop	eax
   106                              <1> 
   107 000004BC 89EC                <1> 	mov	esp, ebp
   108 000004BE 5D                  <1> 	pop	ebp
   109                              <1> 
   110 000004BF C3                  <1> 	ret
   111                              <1> 
   112                              <1> 
    70                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 000004C0 55                  <1> 	push	ebp
     3 000004C1 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000004C3 50                  <1> 	push	eax
     6 000004C4 53                  <1> 	push	ebx
     7 000004C5 51                  <1> 	push	ecx
     8 000004C6 52                  <1> 	push	edx
     9 000004C7 56                  <1> 	push	esi
    10                              <1> 
    11 000004C8 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 000004CB 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 000004CE 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 000004D1 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 000004D4 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 000004D7 39C8                <1> 	cmp	eax, ecx
    21 000004D9 7C01                <1> 	jl	.10E		; OK
    22 000004DB 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 000004DC 39D3                <1> 	cmp	ebx, edx
    25 000004DE 7C02                <1> 	jl	.20E		; OK
    26 000004E0 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 000004E2 5653515350E822FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 000004EB FF6683C414          <1>
    36 000004F0 5652505350E814FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 000004F9 FF6683C414          <1>
    37                              <1> 
    38 000004FE 4A                  <1> 	dec	edx
    39 000004FF 5652515250E805FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 00000508 FF6683C414          <1>
    40 0000050D 42                  <1> 	inc	edx
    41                              <1> 
    42 0000050E 49                  <1> 	dec	ecx
    43 0000050F 5652515351E8F5FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 00000518 FF6683C414          <1>
    44                              <1> 
    45 0000051D 5E                  <1> 	pop	esi
    46 0000051E 5A                  <1> 	pop	edx
    47 0000051F 59                  <1> 	pop	ecx
    48 00000520 5B                  <1> 	pop	ebx
    49 00000521 58                  <1> 	pop	eax
    50                              <1> 
    51 00000522 89EC                <1> 	mov	esp, ebp
    52 00000524 5D                  <1> 	pop	ebp
    53                              <1> 
    54 00000525 C3                  <1> 	ret
    55                              <1> 
    71                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 00000526 55                  <1> 	push 	ebp
     3 00000527 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000529 50                  <1> 	push	eax
     6 0000052A 53                  <1> 	push	ebx
     7 0000052B 51                  <1> 	push	ecx
     8 0000052C 52                  <1> 	push	edx
     9 0000052D 56                  <1> 	push	esi
    10 0000052E 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 0000052F 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 00000533 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 00000536 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 00000539 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 0000053B B020                <1> 	mov	al,' '
    27 0000053D F7C304000000        <1> 	test	ebx, 0b0100
    28 00000543 7402                <1> 	je	.42E
    29 00000545 B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 00000547 FC                  <1> 	cld
    32 00000548 F3AA                <1> 	rep	stosb
    33                              <1> 
    34 0000054A 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 0000054D 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 00000550 89F7                <1> 	mov	edi, esi
    37 00000552 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 00000554 4F                  <1> 	dec	edi
    39                              <1> 
    40 00000555 F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 0000055B 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 0000055D 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 00000560 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 00000562 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 00000565 F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 0000056B 7410                <1> .20Q:	je	.20E		; not print sign
    51 0000056D 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 00000570 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 00000572 F7D8                <1> 	neg	eax		; ax *= -1
    54 00000574 C6062D              <1> 	mov	[esi], byte '-'
    55 00000577 EB03                <1> 	jmp	.22E
    56 00000579 C6062B              <1> .22F:	mov	[esi], byte '+'
    57 0000057C 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 0000057D 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 00000580 BA00000000          <1> 	mov	edx, 0
    64 00000585 F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 00000587 89D6                <1> 	mov	esi, edx
    68 00000589 8A96[A1050000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 0000058F 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 00000591 4F                  <1> 	dec	edi
    72                              <1> 
    73 00000592 83F800              <1> 	cmp	eax,0
    74 00000595 E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 00000597 5F                  <1> 	pop	edi
    79 00000598 5E                  <1> 	pop	esi
    80 00000599 5A                  <1> 	pop	edx
    81 0000059A 59                  <1> 	pop	ecx
    82 0000059B 5B                  <1> 	pop	ebx
    83 0000059C 58                  <1> 	pop	eax
    84                              <1> 
    85 0000059D 89EC                <1> 	mov	esp, ebp
    86 0000059F 5D                  <1> 	pop	ebp
    87                              <1> 
    88 000005A0 C3                  <1> 	ret
    89                              <1> 
    90 000005A1 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 000005AA 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
    72                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 000005B1 55                  <1> 	push	ebp
     3 000005B2 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000005B4 50                  <1> 	push	eax
     6 000005B5 53                  <1> 	push	ebx
     7                              <1> 
     8 000005B6 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 000005B9 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 000005BC 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 000005C3 [23060000]53E859FF- <1>
    10 000005CB FFFF6683C414        <1>
    11                              <1> 
    12 000005D1 88E3                <1> 	mov	bl, ah
    13 000005D3 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 000005DA [20060000]53E842FF- <1>
    13 000005E2 FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 000005E8 C1E810              <1> 	shr	eax, 16
    17 000005EB 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 000005F2 [1D060000]50E82AFF- <1>
    17 000005FA FFFF6683C414        <1>
    18                              <1> 
    19 00000600 68[1D060000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 00000608 FF750CFF7508E877FC- <1>
    19 00000611 FFFF6683C410        <1>
    20                              <1> 
    21 00000617 5B                  <1> 	pop	ebx
    22 00000618 58                  <1> 	pop	eax
    23                              <1> 
    24 00000619 89EC                <1> 	mov	esp, ebp
    25 0000061B 5D                  <1> 	pop	ebp
    26                              <1> 
    27 0000061C C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 0000061D 5A5A3A              <1> .hour:	db	"ZZ:"
    31 00000620 5A5A3A              <1> .min:	db	"ZZ:"
    32 00000623 5A5A00              <1> .sec:	db	"ZZ", 0
    73                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 00000626 55                  <1> 	push	ebp
     3 00000627 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000629 53                  <1> 	push	ebx
     6                              <1> 
     7 0000062A B00A                <1> 	mov	al, 0x0A
     8 0000062C E670                <1> 	out	0x70, al
     9 0000062E E471                <1> 	in	al, 0x71
    10                              <1> 
    11 00000630 A880                <1> 	test	al, 0x80
    12 00000632 7407                <1> 	je	.10F
    13 00000634 B801000000          <1> 	mov	eax, 1		; data updating. error
    14 00000639 EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 0000063B B004                <1> 	mov	al, 0x04	; Hour
    17 0000063D E670                <1> 	out	0x70, al
    18 0000063F E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 00000641 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 00000644 B002                <1> 	mov	al, 0x02
    23 00000646 E670                <1> 	out	0x70, al
    24 00000648 E471                <1> 	in	al, 0x71
    25                              <1> 
    26 0000064A C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 0000064D B000                <1> 	mov	al, 0x00
    29 0000064F E670                <1> 	out	0x70, al
    30 00000651 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 00000653 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 00000658 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 0000065B 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 0000065D B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 00000662 5B                  <1> 	pop	ebx
    45                              <1> 
    46 00000663 89EC                <1> 	mov	esp, ebp
    47 00000665 5D                  <1> 	pop	ebp
    48                              <1> 
    49 00000666 C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
    74                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 00000667 60                  <1> 	pusha		; all registers in stack
     3 00000668 1E                  <1> 	push	ds
     4 00000669 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 0000066A 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 0000066E 8ED8                <1> 	mov	ds, ax
     9 00000670 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 00000672 68[D4000000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 0000067A FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 00000680 B00C                <2>  mov al, %2
    13 00000682 E670                <2>  out %1, al
    14 00000684 E471                <1> 	in	al, 0x71
    15                              <1> 
    16 00000686 B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 00000688 E620                <1> 	out	0x20, al
    18 0000068A E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 0000068C 07                  <1> 	pop	es
    21 0000068D 1F                  <1> 	pop	ds
    22 0000068E 61                  <1> 	popa
    23                              <1> 
    24 0000068F CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 00000690 55                  <1> 	push	ebp
    28 00000691 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 00000693 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 00000694 B00B                <2>  mov al, %2
    32 00000696 E670                <2>  out %1, al
    33                              <1> 
    34 00000698 E471                <1> 	in	al, 0x71
    35 0000069A 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 0000069D E671                <1> 	out	0x71, al
    38                              <1> 
    39 0000069F 58                  <1> 	pop	eax
    40                              <1> 
    41 000006A0 89EC                <1> 	mov	esp, ebp
    42 000006A2 5D                  <1> 	pop	ebp
    43                              <1> 
    44 000006A3 C3                  <1> 	ret
    45                              <1> 
    75                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 000006A4 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 000006A5 B011                <2>  mov al, %2
     6 000006A7 E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 000006A9 B020                <2>  mov al, %2
     7 000006AB E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 000006AD B004                <2>  mov al, %2
     8 000006AF E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 000006B1 B005                <2>  mov al, %2
     9 000006B3 E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 000006B5 B0FF                <2>  mov al, %2
    10 000006B7 E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 000006B9 B011                <2>  mov al, %2
    12 000006BB E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 000006BD B028                <2>  mov al, %2
    13 000006BF E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 000006C1 B002                <2>  mov al, %2
    14 000006C3 E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 000006C5 B001                <2>  mov al, %2
    15 000006C7 E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 000006C9 B0FF                <2>  mov al, %2
    16 000006CB E6A1                <2>  out %1, al
    17                              <1> 
    18 000006CD 58                  <1> 	pop	eax
    19                              <1> 
    20 000006CE C3                  <1> 	ret
    76                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 000006CF FB                  <1> 	sti
     3                              <1> 
     4 000006D0 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 000006D9 19E8ABFBFFFF6683C4- <1>
     4 000006E2 10                  <1>
     5                              <1> 
     6 000006E3 8B0424              <1> 	mov	eax, [esp + 0]
     7 000006E6 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 000006ED [AB070000]50E82FFE- <1>
     7 000006F5 FFFF6683C414        <1>
     8                              <1> 	
     9 000006FB 8B442404            <1> 	mov	eax, [esp + 4]
    10 000006FF 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 00000706 [BC070000]50E816FE- <1>
    10 0000070E FFFF6683C414        <1>
    11                              <1> 	
    12 00000714 8B442408            <1> 	mov	eax, [esp + 8]
    13 00000718 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 0000071F [CD070000]50E8FDFD- <1>
    13 00000727 FFFF6683C414        <1>
    14                              <1> 	
    15 0000072D 8B44240C            <1> 	mov	eax, [esp +12]
    16 00000731 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 00000738 [DE070000]50E8E4FD- <1>
    16 00000740 FFFF6683C414        <1>
    17                              <1> 
    18 00000746 68[A4070000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 0000074E 00006A106A19E831FB- <1>
    18 00000757 FFFF6683C410        <1>
    19 0000075D 68[B5070000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 00000765 00006A116A19E81AFB- <1>
    19 0000076E FFFF6683C410        <1>
    20 00000774 68[C6070000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 0000077C 00006A126A19E803FB- <1>
    20 00000785 FFFF6683C410        <1>
    21 0000078B 68[D7070000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 00000793 00006A136A19E8ECFA- <1>
    21 0000079C FFFF6683C410        <1>
    22                              <1> 
    23 000007A2 EBFE                <1> 	jmp	$
    24                              <1> 
    25 000007A4 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 000007AB 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 000007B4 00                  <1>
    27 000007B5 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 000007BC 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 000007C5 00                  <1>
    29 000007C6 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 000007CD 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 000007D6 00                  <1>
    31 000007D7 2020202B31323A      <1> .s4:	db	"   +12:"
    32 000007DE 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 000007E7 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 000007E8 9C                  <1> 	pushf
    37 000007E9 0E                  <1> 	push	cs
    38 000007EA 68[CF060000]        <1> 	push	int_stop
    39                              <1> 
    40 000007EF B8[F5070000]        <1> 	mov	eax, .s0
    41 000007F4 CF                  <1> 	iret
    42                              <1> 
    43 000007F5 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 000007FE 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 00000806 55                  <1> 	push	ebp
    47 00000807 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 00000809 50                  <1> 	push	eax
    50 0000080A 53                  <1> 	push	ebx
    51 0000080B 51                  <1> 	push	ecx
    52 0000080C 57                  <1> 	push	edi
    53                              <1> 
    54 0000080D 8D05[E8070000]      <1> 	lea	eax, [int_default]
    55 00000813 BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000818 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 0000081A B900010000          <1> 	mov	ecx, 256
    65 0000081F BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000824 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 00000826 894704              <1> 	mov	[edi + 4], eax	; top
    69 00000829 83C708              <1> 	add	edi, 8
    70 0000082C E2F6                <1> 	loop	.10L
    71                              <1> 
    72 0000082E 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000835 5F                  <1> 	pop	edi
    75 00000836 59                  <1> 	pop	ecx
    76 00000837 5B                  <1> 	pop	ebx
    77 00000838 58                  <1> 	pop	eax
    78                              <1> 
    79 00000839 89EC                <1> 	mov	esp, ebp
    80 0000083B 5D                  <1> 	pop	ebp
    81                              <1> 
    82 0000083C C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 0000083D 9C                  <1> 	pushf
    86 0000083E 0E                  <1> 	push	cs
    87 0000083F 68[CF060000]        <1> 	push	int_stop
    88                              <1> 
    89 00000844 B8[4A080000]        <1> 	mov	eax, .s0
    90 00000849 CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 0000084A 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 00000853 44495620203E2000    <1>
    77                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
    78                                  
    79 0000085B 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
