     1                                  %define		USE_SYSTEM_CALL
     2                                  %define		USE_TEST_AND_SET
     3                                  
     4                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD		equ	0x7c00
     2                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     3                              <1> 
     4                              <1> BOOT_SIZE		equ	(1024 * 8)
     5                              <1> SECT_SIZE		equ	(512)
     6                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
     7                              <1> 
     8                              <1> E820_RECORD_SIZE	equ	20
     9                              <1> 
    10                              <1> KERNEL_LOAD		equ	0x0010_1000
    11                              <1> KERNEL_SIZE		equ	(1024 * 8)
    12                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> VECT_BASE		equ	0x0010_0000
    15                              <1> 
    16                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    17                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    18                              <1> 
    19                              <1> struc			ring_buff		; for keyboard
    20 00000000 <res 00000004>      <1> 				.rp	resd	1
    21 00000004 <res 00000004>      <1> 				.wp	resd	1
    22 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    23                              <1> endstruc
    24                              <1> ;struc ring_buff
    25                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    26                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    27                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    28                              <1> ;endstruc
    29                              <1> 
    30                              <1> STACK_BASE		equ	0x0010_3000
    31                              <1> STACK_SIZE		equ	1024
    32                              <1> 
    33                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    34                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    35                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    36                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
     5                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     6                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     7                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     8                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     9                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
    10                                  %include	"../include/set_gate.s"
     1                              <1> %macro	set_gate 2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	mov	[edi + 0], ax
     9                              <1> 	shr	eax, 16
    10                              <1> 	mov	[edi + 6], ax
    11                              <1> 	
    12                              <1> 	pop	edi
    13                              <1> 	pop	eax
    14                              <1> %endmacro
    11                                  ;%include	"../../../../testOS/src/include/macro.s"
    12                                  
    13                                  ORG	KERNEL_LOAD
    14                                  
    15                                  ALIGN	4
    16 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    17 00000002 00001000                	dd	VECT_BASE
    18                                  
    19                                  
    20                                  [BITS 32]
    21                                  
    22                                  
    23                                  kernel:
    24 00000006 FA                      	cli
    25                                  
    26 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    27 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    28 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    29 00000013 C1E004                  	shl	eax, 4
    30 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    31 00000018 A3[3C020000]            	mov	[FONT_ADR], eax
    32                                  	
    33                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    33 0000001D 50                  <1>  push eax
    33 0000001E 57                  <1>  push edi
    33                              <1> 
    33 0000001F BF[100D0000]        <1>  mov edi, %1
    33 00000024 B8[B00C0000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if %0 == 3
    33 00000029 66C7074700          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000002E 66894702            <1>  mov [edi + 2], ax
    33 00000032 C1E810              <1>  shr eax, 16
    33 00000035 884704              <1>  mov [edi + 4], al
    33 00000038 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000003B 5F                  <1>  pop edi
    33 0000003C 58                  <1>  pop eax
    34                                  	set_desc	GDT.tss_0, TSS_0
    34 0000003D 50                  <1>  push eax
    34 0000003E 57                  <1>  push edi
    34                              <1> 
    34 0000003F BF[180D0000]        <1>  mov edi, %1
    34 00000044 B8[460D0000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if %0 == 3
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 00000049 66894702            <1>  mov [edi + 2], ax
    34 0000004D C1E810              <1>  shr eax, 16
    34 00000050 884704              <1>  mov [edi + 4], al
    34 00000053 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 00000056 5F                  <1>  pop edi
    34 00000057 58                  <1>  pop eax
    35                                  	set_desc	GDT.tss_1, TSS_1
    35 00000058 50                  <1>  push eax
    35 00000059 57                  <1>  push edi
    35                              <1> 
    35 0000005A BF[200D0000]        <1>  mov edi, %1
    35 0000005F B8[1E0E0000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if %0 == 3
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 00000064 66894702            <1>  mov [edi + 2], ax
    35 00000068 C1E810              <1>  shr eax, 16
    35 0000006B 884704              <1>  mov [edi + 4], al
    35 0000006E 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 00000071 5F                  <1>  pop edi
    35 00000072 58                  <1>  pop eax
    36                                  	set_desc	GDT.tss_2, TSS_2
    36 00000073 50                  <1>  push eax
    36 00000074 57                  <1>  push edi
    36                              <1> 
    36 00000075 BF[280D0000]        <1>  mov edi, %1
    36 0000007A B8[F60E0000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if %0 == 3
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 0000007F 66894702            <1>  mov [edi + 2], ax
    36 00000083 C1E810              <1>  shr eax, 16
    36 00000086 884704              <1>  mov [edi + 4], al
    36 00000089 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000008C 5F                  <1>  pop edi
    36 0000008D 58                  <1>  pop eax
    37                                  	set_desc	GDT.tss_3, TSS_3
    37 0000008E 50                  <1>  push eax
    37 0000008F 57                  <1>  push edi
    37                              <1> 
    37 00000090 BF[300D0000]        <1>  mov edi, %1
    37 00000095 B8[CE0F0000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if %0 == 3
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000009A 66894702            <1>  mov [edi + 2], ax
    37 0000009E C1E810              <1>  shr eax, 16
    37 000000A1 884704              <1>  mov [edi + 4], al
    37 000000A4 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 000000A7 5F                  <1>  pop edi
    37 000000A8 58                  <1>  pop eax
    38 000000A9 0F0115[400D0000]        	lgdt		[GDTR]
    39                                  
    40 000000B0 BC00341000              	mov	esp, SP_TASK_0
    41 000000B5 66B82000                	mov	ax, SS_TASK_0	; set tss0
    42 000000B9 0F00D8                  	ltr	ax
    43                                  	; say "this process is task 0" to CPU
    44                                  
    45                                  
    46 000000BC E8A6080000              	cdecl	init_int
    47 000000C1 E83F070000              	cdecl	init_pic
    48                                  
    49 000000C6 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    49 000000CE [9E090000]668907C1-
    49 000000D6 E810668947065F58   
    50 000000DE 5057BF38001000B8-       	set_vect	0x07, int_nm
    50 000000E6 [830B0000]668907C1-
    50 000000EE E810668947065F58   
    51 000000F6 5057BF00011000B8-       	set_vect	0x20, int_timer
    51 000000FE [FE0B0000]668907C1-
    51 00000106 E810668947065F58   
    52 0000010E 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    52 00000116 [BC090000]668907C1-
    52 0000011E E810668947065F58   
    53 00000126 5057BF40011000B8-       	set_vect	0x28, int_rtc
    53 0000012E [C8070000]668907C1-
    53 00000136 E810668947065F58   
    54 0000013E 5057BF08041000B8-       	set_vect	0x81, trap_gate_81, word 0xEF00	; type = trap
    54 00000146 [F70A0000]66C74704-
    54 0000014E 00EF668907C1E81066-
    54 00000157 8947065F58         
    55 0000015C 5057BF10041000B8-       	set_vect	0x82, trap_gate_82, word 0xEF00
    55 00000164 [1D0B0000]66C74704-
    55 0000016C 00EF668907C1E81066-
    55 00000175 8947065F58         
    56                                  
    57                                  	set_gate	GDT.call_gate, call_gate
    57 0000017A 50                  <1>  push eax
    57 0000017B 57                  <1>  push edi
    57                              <1> 
    57 0000017C BF[380D0000]        <1>  mov edi, %1
    57 00000181 B8[A70A0000]        <1>  mov eax, %2
    57                              <1> 
    57 00000186 668907              <1>  mov [edi + 0], ax
    57 00000189 C1E810              <1>  shr eax, 16
    57 0000018C 66894706            <1>  mov [edi + 6], ax
    57                              <1> 
    57 00000190 5F                  <1>  pop edi
    57 00000191 58                  <1>  pop eax
    58                                  	
    59 00000192 6A10E8580600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    59 0000019B C404               
    60 0000019D E8BA0A0000              	cdecl	int_en_timer
    61                                  	
    62                                  	outp	0x21, 0b1111_1000	; slave
    62 000001A2 B0F8                <1>  mov al, %2
    62 000001A4 E621                <1>  out %1, al
    63                                  	outp	0xA1, 0b1111_1110	; rtc
    63 000001A6 B0FE                <1>  mov al, %2
    63 000001A8 E6A1                <1>  out %1, al
    64                                  	
    65 000001AA FB                      	sti
    66                                  	
    67 000001AB 6A0D6A3FE807020000-     	cdecl	draw_font, 63, 13
    67 000001B4 6683C408           
    68 000001B8 6A046A3FE873020000-     	cdecl	draw_color_bar, 63, 4
    68 000001C1 6683C408           
    69                                  
    70 000001C5 68[0F020000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    70 000001CD 00006A0E6A19E81E02-
    70 000001D6 00006683C410       
    71                                  	
    72                                  	;jmp	SS_TASK_1:10000
    73                                  .10L:
    74                                  
    75 000001DC E8900A0000              	cdecl	draw_rotation_bar
    76                                  
    77 000001E1 68[36020000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
    77 000001E7 [E0090000]E8080800-
    77 000001EF 006683C408         
    78 000001F4 83F800                  	cmp	eax, 0
    79 000001F7 74E3                    	je	.10L
    80                                  
    81 000001F9 68[E0090000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
    81 00000201 02E84D0800006683C4-
    81 0000020A 0C                 
    82                                  
    83 0000020B EBCF                    	jmp	.10L
    84                                  
    85 0000020D EBFE                    	jmp	$
    86                                  	
    87                                  	
    88 0000020F 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    88 00000218 65726E656C212000   
    89 00000220 2D2D2D2D00              .t0:	db	"----",0
    90 00000225 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
    90 0000022E 2D2D2D2D2D2D2D00   
    91 00000236 00000000                .int_key:	dd	0
    92                                  
    93 0000023A 00<rept>                ALIGN	4,	db	0
    94 0000023C 00000000                FONT_ADR:	dd	0
    95 00000240 00000000                RTC_TIME:	dd	0
    96                                  
    97                                  
    98                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 00000244 55                  <1> 	push	ebp
     4 00000245 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 00000247 50                  <1> 	push	eax
     7 00000248 52                  <1> 	push	edx
     8                              <1> 
     9 00000249 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 0000024C 80E403              <1> 	and	ah, 0x03
    11 0000024F B004                <1> 	mov	al, 0x04	; read map
    12 00000251 66BACE03            <1> 	mov	dx, 0x03CE
    13 00000255 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 00000257 5A                  <1> 	pop	edx
    16 00000258 58                  <1> 	pop	eax
    17                              <1> 
    18 00000259 89EC                <1> 	mov	esp,ebp
    19 0000025B 5D                  <1> 	pop	ebp
    20                              <1> 
    21 0000025C C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 0000025D 55                  <1> 	push	ebp
    25 0000025E 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 00000260 50                  <1> 	push	eax
    28 00000261 52                  <1> 	push	edx
    29                              <1> 
    30 00000262 8A6508              <1> 	mov	ah, [ebp + 8]
    31 00000265 80E40F              <1> 	and	ah, 0x0F
    32 00000268 B002                <1> 	mov	al, 0x02		; write select
    33 0000026A 66BAC403            <1> 	mov	dx, 0x03C4
    34 0000026E 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 00000270 5A                  <1> 	pop	edx
    37 00000271 58                  <1> 	pop	eax
    38                              <1> 
    39 00000272 89EC                <1> 	mov	esp, ebp
    40 00000274 5D                  <1> 	pop	ebp
    41                              <1> 
    42 00000275 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 00000276 55                  <1> 	push	ebp
    51 00000277 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 00000279 50                  <1> 	push	eax
    54 0000027A 53                  <1> 	push	ebx
    55 0000027B 51                  <1> 	push	ecx
    56 0000027C 52                  <1> 	push	edx
    57 0000027D 56                  <1> 	push	esi
    58 0000027E 57                  <1> 	push	edi
    59                              <1> 
    60 0000027F 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 00000282 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 00000285 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 00000289 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 0000028D 84C7                <1> 	test	bh, al			; BACK
    67 0000028F 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 00000292 FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 00000294 84C3                <1> 	test	bl, al			; FORWARD
    71 00000296 0F94C2              <1> 	setz	dl
    72 00000299 FECA                <1> 	dec	dl
    73                              <1> 
    74 0000029B FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 0000029C B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 000002A1 AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 000002A2 88C4                <1> 	mov	ah, al			; AL is font data
    80 000002A4 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 000002A6 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 000002A8 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 000002AE 7404                <1> 	jz	.11F
    86 000002B0 2227                <1> 	and	ah, [edi]
    87 000002B2 EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 000002B4 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 000002B6 08E0                <1> 	or	al,ah
    92 000002B8 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 000002BA 83C750              <1> 	add	edi,80			; next
    95 000002BD E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 000002BF 5F                  <1> 	pop	edi
    99 000002C0 5E                  <1> 	pop	esi
   100 000002C1 5A                  <1> 	pop	edx
   101 000002C2 59                  <1> 	pop	ecx
   102 000002C3 5B                  <1> 	pop	ebx
   103 000002C4 58                  <1> 	pop	eax
   104                              <1> 
   105 000002C5 89EC                <1> 	mov	esp, ebp
   106 000002C7 5D                  <1> 	pop	ebp
   107                              <1> 
   108 000002C8 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 000002C9 55                  <1> 	push	ebp
   113 000002CA 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 000002CC 57                  <1> 	push	edi
   116 000002CD 50                  <1> 	push	eax
   117 000002CE 53                  <1> 	push	ebx
   118                              <1> 
   119 000002CF 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 000002D2 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 000002D6 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 000002DA 84C3                <1> 	test	bl, al
   124 000002DC 0F94C3              <1> 	setz	bl
   125 000002DF FECB                <1> 	dec	bl
   126                              <1> 
   127 000002E1 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 000002E4 88C4                <1> 	mov	ah, al
   129 000002E6 F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 000002E8 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 000002EA 20D8                <1> 	and	al, bl
   134 000002EC 08E0                <1> 	or	al, ah
   135 000002EE 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 000002F0 5B                  <1> 	pop	ebx
   138 000002F1 58                  <1> 	pop	eax
   139 000002F2 5F                  <1> 	pop	edi
   140                              <1> 
   141 000002F3 89EC                <1> 	mov	esp, ebp
   142 000002F5 5D                  <1> 	pop	ebp
   143                              <1> 
   144 000002F6 C3                  <1> 	ret
   145                              <1> 
    99                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 000002F7 55                  <1> 	push	ebp
     4 000002F8 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000002FA 56                  <1> 	push	esi
     7 000002FB 57                  <1> 	push	edi
     8 000002FC 50                  <1> 	push	eax
     9 000002FD 53                  <1> 	push	ebx
    10 000002FE 51                  <1> 	push	ecx
    11 000002FF 52                  <1> 	push	edx
    12                              <1> 
    13 00000300 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 00000304 C1E604              <1> 	shl	esi, 4
    15 00000307 0335[3C020000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 0000030D 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 00000310 C1E708              <1> 	shl	edi, 8
    19 00000313 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 0000031A 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 0000031D 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 00000321 6A03E81CFFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 0000032A C404                <1>
    25 0000032C 6A08E82AFFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 00000335 C404                <1>
    26 00000337 536A085756E835FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 00000340 FF6683C410          <1>
    27                              <1> 
    28 00000345 6A02E8F8FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 0000034E C404                <1>
    29 00000350 6A04E806FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 00000359 C404                <1>
    30 0000035B 536A045756E811FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 00000364 FF6683C410          <1>
    31                              <1> 
    32 00000369 6A01E8D4FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 00000372 C404                <1>
    33 00000374 6A02E8E2FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 0000037D C404                <1>
    34 0000037F 536A025756E8EDFEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 00000388 FF6683C410          <1>
    35                              <1> 	
    36 0000038D 6A00E8B0FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 00000396 C404                <1>
    37 00000398 6A01E8BEFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 000003A1 C404                <1>
    38 000003A3 536A015756E8C9FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 000003AC FF6683C410          <1>
    39                              <1> 
    40 000003B1 5A                  <1> 	pop	edx
    41 000003B2 59                  <1> 	pop	ecx
    42 000003B3 5B                  <1> 	pop	ebx
    43 000003B4 58                  <1> 	pop	eax
    44 000003B5 5F                  <1> 	pop	edi
    45 000003B6 5E                  <1> 	pop	esi
    46                              <1> 
    47 000003B7 89EC                <1> 	mov	esp, ebp
    48 000003B9 5D                  <1> 	pop	ebp
    49                              <1> 
    50 000003BA C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
   100                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 000003BB 55                  <1> 	push	ebp
     3 000003BC 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000003BE 50                  <1> 	push	eax
     6 000003BF 53                  <1> 	push	ebx
     7 000003C0 51                  <1> 	push	ecx
     8                              <1> 
     9 000003C1 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 000003C6 81F900010000        <1> 	cmp	ecx,256
    12 000003CC 7321                <1> 	jae	.10E
    13                              <1> 
    14 000003CE 89C8                <1> 	mov	eax, ecx
    15 000003D0 83E00F              <1> 	and	eax, 0b00001111
    16 000003D3 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 000003D6 89CB                <1> 	mov	ebx, ecx
    19 000003D8 C1EB04              <1> 	shr	ebx, 4
    20 000003DB 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 000003DE 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 000003E7 FF6683C410          <1>
    23                              <1> 	
    24 000003EC 41                  <1> 	inc	ecx
    25 000003ED EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 000003EF 59                  <1> 	pop	ecx
    30 000003F0 5B                  <1> 	pop	ebx
    31 000003F1 58                  <1> 	pop	eax
    32                              <1> 
    33 000003F2 89EC                <1> 	mov	esp, ebp
    34 000003F4 5D                  <1> 	pop	ebp
    35                              <1> 
    36 000003F5 C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
   101                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 000003F6 55                  <1> 	push	ebp
     3 000003F7 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 000003F9 50                  <1> 	push	eax
     6 000003FA 53                  <1> 	push	ebx
     7 000003FB 51                  <1> 	push	ecx
     8 000003FC 52                  <1> 	push	edx
     9 000003FD 56                  <1> 	push	esi
    10                              <1> 
    11 000003FE 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 00000401 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 00000404 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 00000408 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 0000040B FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 0000040C AC                  <1> 	lodsb
    20 0000040D 3C00                <1> 	cmp	al, 0
    21 0000040F 741A                <1> 	je	.10E
    22                              <1> %ifdef	USE_SYSTEM_CALL
    23 00000411 CD81                <1> 	int 0x81
    24                              <1> %else
    25                              <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    26                              <1> %endif
    27 00000413 43                  <1> 	inc	ebx
    28 00000414 83FB50              <1> 	cmp	ebx, 80
    29 00000417 7CF3                <1> 	jl	.10L
    30 00000419 BB00000000          <1> 	mov	ebx, 0
    31 0000041E 41                  <1> 	inc	ecx
    32 0000041F 83F91E              <1> 	cmp	ecx, 30
    33 00000422 7CE8                <1> 	jl	.10L
    34 00000424 B900000000          <1> 	mov	ecx, 0
    35                              <1> 	
    36 00000429 EBE1                <1> 	jmp	.10L
    37                              <1> .10E:
    38                              <1> 
    39 0000042B 5E                  <1> 	pop	esi
    40 0000042C 5A                  <1> 	pop	edx
    41 0000042D 59                  <1> 	pop	ecx
    42 0000042E 5B                  <1> 	pop	ebx
    43 0000042F 58                  <1> 	pop	eax
    44                              <1> 
    45 00000430 89EC                <1> 	mov	esp, ebp
    46 00000432 5D                  <1> 	pop	ebp
    47                              <1> 
    48 00000433 C3                  <1> 	ret
   102                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 00000434 55                  <1> 	push	ebp
     3 00000435 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000437 56                  <1> 	push	esi
     6 00000438 57                  <1> 	push	edi
     7 00000439 50                  <1> 	push	eax
     8 0000043A 53                  <1> 	push	ebx
     9 0000043B 51                  <1> 	push	ecx
    10 0000043C 52                  <1> 	push	edx
    11                              <1> 
    12 0000043D 8B7508              <1> 	mov	esi, [ebp + 8]
    13 00000440 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 00000443 B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 00000448 83F910              <1> 	cmp	ecx, 16
    18 0000044B 732E                <1> 	jae	.10E
    19                              <1> 
    20 0000044D 89C8                <1> 	mov	eax, ecx
    21 0000044F 83E001              <1> 	and	eax, 0x01	; % 2
    22 00000452 C1E003              <1> 	shl	eax, 3		; *= 8
    23 00000455 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 00000457 89CB                <1> 	mov	ebx, ecx
    26 00000459 D1EB                <1> 	shr	ebx, 1		; / 2
    27 0000045B 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 0000045D 89CA                <1> 	mov	edx, ecx
    32 0000045F D1E2                <1> 	shl	edx, 1
    33 00000461 8B92[8E040000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 00000467 68[85040000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 0000046F E882FFFFFF6683C410  <1>
    36                              <1> 
    37 00000478 41                  <1> 	inc	ecx
    38 00000479 EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 0000047B 52                  <1> 	push	edx	
    42 0000047C 51                  <1> 	push	ecx	
    43 0000047D 53                  <1> 	push	ebx	
    44 0000047E 50                  <1> 	push	eax	
    45 0000047F 57                  <1> 	push	edi	
    46 00000480 56                  <1> 	push	esi	
    47                              <1> 
    48 00000481 89EC                <1> 	mov	esp, ebp
    49 00000483 5D                  <1> 	pop	ebp
    50                              <1> 
    51 00000484 C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 00000485 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 0000048E 00000008            <1> .t0:	dw 0x0000,0x0800
    57 00000492 00010009            <1> 	dw 0x0100,0x0900
    58 00000496 0002000A            <1> 	dw 0x0200,0x0A00
    59 0000049A 0003000B            <1> 	dw 0x0300,0x0B00
    60 0000049E 0004000C            <1> 	dw 0x0400,0x0C00
    61 000004A2 0005000D            <1> 	dw 0x0500,0x0D00
    62 000004A6 0006000E            <1> 	dw 0x0600,0x0E00
    63 000004AA 0007000F            <1> 	dw 0x0700,0x0F00
   103                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 000004AE 55                  <1> 	push	ebp
     4 000004AF 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000004B1 57                  <1> 	push	edi
     7 000004B2 53                  <1> 	push	ebx
     8 000004B3 51                  <1> 	push	ecx
     9                              <1> 
    10 000004B4 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 000004B7 C1E704              <1> 	shl	edi, 4
    12 000004BA 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 000004C1 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 000004C4 89D9                <1> 	mov	ecx, ebx
    16 000004C6 C1EB03              <1> 	shr	ebx, 3
    17 000004C9 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 000004CB 83E107              <1> 	and	ecx, 0x07
    20 000004CE BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 000004D3 D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 000004D5 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 000004D8 6A03E865FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 000004E1 C404                <1>
    28 000004E3 6A08E873FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 000004EC C404                <1>
    29 000004EE 516A085753E8D1FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 000004F7 FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 000004FC 6A02E841FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 00000505 C404                <1>
    34 00000507 6A04E84FFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 00000510 C404                <1>
    35 00000512 516A045753E8ADFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 0000051B FF6683C410          <1>
    36                              <1> 	
    37 00000520 6A01E81DFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 00000529 C404                <1>
    38 0000052B 6A02E82BFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 00000534 C404                <1>
    39 00000536 516A025753E889FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 0000053F FF6683C410          <1>
    40                              <1> 	
    41 00000544 6A00E8F9FCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 0000054D C404                <1>
    42 0000054F 6A01E807FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 00000558 C404                <1>
    43 0000055A 516A015753E865FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 00000563 FF6683C410          <1>
    44                              <1> 
    45 00000568 59                  <1> 	pop	ecx
    46 00000569 5B                  <1> 	pop	ebx
    47 0000056A 5F                  <1> 	pop	edi
    48                              <1> 
    49 0000056B 89EC                <1> 	mov	esp, ebp
    50 0000056D 5D                  <1> 	pop	ebp
    51                              <1> 
    52 0000056E C3                  <1> 	ret
    53                              <1> 
   104                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 0000056F 55                  <1> 	push	ebp
     3 00000570 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000572 6A00                <1> 	push	dword 0	; SUM: - 4
     6 00000574 6A00                <1> 	push	dword 0	; x0 : - 8
     7 00000576 6A00                <1> 	push	dword 0	; wid: -12
     8 00000578 6A00                <1> 	push	dword 0	; inx: -16
     9 0000057A 6A00                <1> 	push	dword 0	; y0 : -20
    10 0000057C 6A00                <1> 	push	dword 0	; hei: -24
    11 0000057E 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 00000580 50                  <1> 	push	eax
    14 00000581 53                  <1> 	push	ebx
    15 00000582 51                  <1> 	push	ecx
    16 00000583 52                  <1> 	push	edx
    17 00000584 56                  <1> 	push	esi
    18 00000585 57                  <1> 	push	edi
    19                              <1> 
    20 00000586 8B4508              <1> 	mov	eax, [ebp + 8]
    21 00000589 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 0000058C 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 0000058E 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 00000590 F7DB                <1> 	neg	ebx
    26 00000592 BEFFFFFFFF          <1> 	mov	esi, -1
    27 00000597 EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 00000599 BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 0000059E 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 000005A1 8B5514              <1> 	mov	edx, [ebp +20]
    34 000005A4 29CA                <1> 	sub	edx, ecx
    35 000005A6 7D09                <1> 	jge	.20F
    36                              <1> 
    37 000005A8 F7DA                <1> 	neg	edx
    38 000005AA BFFFFFFFFF          <1> 	mov	edi, -1
    39 000005AF EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 000005B1 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 000005B6 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 000005B9 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 000005BC 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 000005BF 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 000005C2 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 000005C5 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 000005C8 39D3                <1> 	cmp	ebx, edx
    53 000005CA 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 000005CC 8D75EC              <1> 	lea	esi, [ebp -20]
    56 000005CF 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 000005D2 EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 000005D4 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 000005D7 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 000005DA 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 000005DD 83F900              <1> 	cmp	ecx, 0
    67 000005E0 7505                <1> 	jnz	.30E
    68 000005E2 B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75 000005E7 FF7518FF75ECFF75F8- <1>         cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    75 000005F0 E8B9FEFFFF6683C40C  <1>
    76                              <1> 	
    77                              <1> 	; update coordinate
    78 000005F9 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    79 000005FC 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    80                              <1> 
    81 000005FE 8B45FC              <1> 	mov	eax, [ebp - 4]
    82 00000601 0347FC              <1> 	add	eax, [edi - 4]
    83 00000604 8B5EFC              <1> 	mov	ebx, [esi - 4]
    84                              <1> 
    85 00000607 39D8                <1> 	cmp	eax, ebx
    86 00000609 7C07                <1> 	jl	.52E
    87 0000060B 29D8                <1> 	sub	eax, ebx	; sum -= wid
    88                              <1> 	; sum can only add -1 or 1
    89                              <1> 	; so. not be  "dif * 2 < sum" 
    90                              <1> 
    91 0000060D 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
    92 00000610 011F                <1> 	add	[edi - 0], ebx
    93                              <1> .52E:
    94 00000612 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
    95                              <1> 
    96 00000615 E2D0                <1> 	loop	.50L
    97                              <1> .50E:
    98                              <1> 
    99                              <1> 
   100 00000617 5F                  <1> 	pop	edi
   101 00000618 5E                  <1> 	pop	esi
   102 00000619 5A                  <1> 	pop	edx
   103 0000061A 59                  <1> 	pop	ecx
   104 0000061B 5B                  <1> 	pop	ebx
   105 0000061C 58                  <1> 	pop	eax
   106                              <1> 
   107 0000061D 89EC                <1> 	mov	esp, ebp
   108 0000061F 5D                  <1> 	pop	ebp
   109                              <1> 
   110 00000620 C3                  <1> 	ret
   111                              <1> 
   112                              <1> 
   105                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 00000621 55                  <1> 	push	ebp
     3 00000622 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000624 50                  <1> 	push	eax
     6 00000625 53                  <1> 	push	ebx
     7 00000626 51                  <1> 	push	ecx
     8 00000627 52                  <1> 	push	edx
     9 00000628 56                  <1> 	push	esi
    10                              <1> 
    11 00000629 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 0000062C 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 0000062F 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 00000632 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 00000635 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 00000638 39C8                <1> 	cmp	eax, ecx
    21 0000063A 7C01                <1> 	jl	.10E		; OK
    22 0000063C 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 0000063D 39D3                <1> 	cmp	ebx, edx
    25 0000063F 7C02                <1> 	jl	.20E		; OK
    26 00000641 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 00000643 5653515350E822FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 0000064C FF6683C414          <1>
    36 00000651 5652505350E814FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 0000065A FF6683C414          <1>
    37                              <1> 
    38 0000065F 4A                  <1> 	dec	edx
    39 00000660 5652515250E805FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 00000669 FF6683C414          <1>
    40 0000066E 42                  <1> 	inc	edx
    41                              <1> 
    42 0000066F 49                  <1> 	dec	ecx
    43 00000670 5652515351E8F5FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 00000679 FF6683C414          <1>
    44                              <1> 
    45 0000067E 5E                  <1> 	pop	esi
    46 0000067F 5A                  <1> 	pop	edx
    47 00000680 59                  <1> 	pop	ecx
    48 00000681 5B                  <1> 	pop	ebx
    49 00000682 58                  <1> 	pop	eax
    50                              <1> 
    51 00000683 89EC                <1> 	mov	esp, ebp
    52 00000685 5D                  <1> 	pop	ebp
    53                              <1> 
    54 00000686 C3                  <1> 	ret
    55                              <1> 
   106                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 00000687 55                  <1> 	push 	ebp
     3 00000688 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000068A 50                  <1> 	push	eax
     6 0000068B 53                  <1> 	push	ebx
     7 0000068C 51                  <1> 	push	ecx
     8 0000068D 52                  <1> 	push	edx
     9 0000068E 56                  <1> 	push	esi
    10 0000068F 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 00000690 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 00000694 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 00000697 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 0000069A 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 0000069C B020                <1> 	mov	al,' '
    27 0000069E F7C304000000        <1> 	test	ebx, 0b0100
    28 000006A4 7402                <1> 	je	.42E
    29 000006A6 B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 000006A8 FC                  <1> 	cld
    32 000006A9 F3AA                <1> 	rep	stosb
    33                              <1> 
    34 000006AB 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 000006AE 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 000006B1 89F7                <1> 	mov	edi, esi
    37 000006B3 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 000006B5 4F                  <1> 	dec	edi
    39                              <1> 
    40 000006B6 F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 000006BC 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 000006BE 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 000006C1 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 000006C3 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 000006C6 F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 000006CC 7410                <1> .20Q:	je	.20E		; not print sign
    51 000006CE 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 000006D1 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 000006D3 F7D8                <1> 	neg	eax		; ax *= -1
    54 000006D5 C6062D              <1> 	mov	[esi], byte '-'
    55 000006D8 EB03                <1> 	jmp	.22E
    56 000006DA C6062B              <1> .22F:	mov	[esi], byte '+'
    57 000006DD 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 000006DE 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 000006E1 BA00000000          <1> 	mov	edx, 0
    64 000006E6 F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 000006E8 89D6                <1> 	mov	esi, edx
    68 000006EA 8A96[02070000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 000006F0 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 000006F2 4F                  <1> 	dec	edi
    72                              <1> 
    73 000006F3 83F800              <1> 	cmp	eax,0
    74 000006F6 E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 000006F8 5F                  <1> 	pop	edi
    79 000006F9 5E                  <1> 	pop	esi
    80 000006FA 5A                  <1> 	pop	edx
    81 000006FB 59                  <1> 	pop	ecx
    82 000006FC 5B                  <1> 	pop	ebx
    83 000006FD 58                  <1> 	pop	eax
    84                              <1> 
    85 000006FE 89EC                <1> 	mov	esp, ebp
    86 00000700 5D                  <1> 	pop	ebp
    87                              <1> 
    88 00000701 C3                  <1> 	ret
    89                              <1> 
    90 00000702 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 0000070B 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   107                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 00000712 55                  <1> 	push	ebp
     3 00000713 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000715 50                  <1> 	push	eax
     6 00000716 53                  <1> 	push	ebx
     7                              <1> 
     8 00000717 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 0000071A 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 0000071D 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 00000724 [84070000]53E859FF- <1>
    10 0000072C FFFF6683C414        <1>
    11                              <1> 
    12 00000732 88E3                <1> 	mov	bl, ah
    13 00000734 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 0000073B [81070000]53E842FF- <1>
    13 00000743 FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 00000749 C1E810              <1> 	shr	eax, 16
    17 0000074C 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 00000753 [7E070000]50E82AFF- <1>
    17 0000075B FFFF6683C414        <1>
    18                              <1> 
    19 00000761 68[7E070000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 00000769 FF750CFF7508E882FC- <1>
    19 00000772 FFFF6683C410        <1>
    20                              <1> 
    21 00000778 5B                  <1> 	pop	ebx
    22 00000779 58                  <1> 	pop	eax
    23                              <1> 
    24 0000077A 89EC                <1> 	mov	esp, ebp
    25 0000077C 5D                  <1> 	pop	ebp
    26                              <1> 
    27 0000077D C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 0000077E 5A5A3A              <1> .hour:	db	"ZZ:"
    31 00000781 5A5A3A              <1> .min:	db	"ZZ:"
    32 00000784 5A5A00              <1> .sec:	db	"ZZ", 0
   108                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 00000787 55                  <1> 	push	ebp
     3 00000788 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000078A 53                  <1> 	push	ebx
     6                              <1> 
     7 0000078B B00A                <1> 	mov	al, 0x0A
     8 0000078D E670                <1> 	out	0x70, al
     9 0000078F E471                <1> 	in	al, 0x71
    10                              <1> 
    11 00000791 A880                <1> 	test	al, 0x80
    12 00000793 7407                <1> 	je	.10F
    13 00000795 B801000000          <1> 	mov	eax, 1		; data updating. error
    14 0000079A EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 0000079C B004                <1> 	mov	al, 0x04	; Hour
    17 0000079E E670                <1> 	out	0x70, al
    18 000007A0 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 000007A2 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 000007A5 B002                <1> 	mov	al, 0x02
    23 000007A7 E670                <1> 	out	0x70, al
    24 000007A9 E471                <1> 	in	al, 0x71
    25                              <1> 
    26 000007AB C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 000007AE B000                <1> 	mov	al, 0x00
    29 000007B0 E670                <1> 	out	0x70, al
    30 000007B2 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 000007B4 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 000007B9 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 000007BC 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 000007BE B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 000007C3 5B                  <1> 	pop	ebx
    45                              <1> 
    46 000007C4 89EC                <1> 	mov	esp, ebp
    47 000007C6 5D                  <1> 	pop	ebp
    48                              <1> 
    49 000007C7 C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   109                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 000007C8 60                  <1> 	pusha		; all registers in stack
     3 000007C9 1E                  <1> 	push	ds
     4 000007CA 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 000007CB 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 000007CF 8ED8                <1> 	mov	ds, ax
     9 000007D1 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 000007D3 68[40020000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 000007DB FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 000007E1 B00C                <2>  mov al, %2
    13 000007E3 E670                <2>  out %1, al
    14 000007E5 E471                <1> 	in	al, 0x71
    15                              <1> 
    16 000007E7 B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 000007E9 E620                <1> 	out	0x20, al
    18 000007EB E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 000007ED 07                  <1> 	pop	es
    21 000007EE 1F                  <1> 	pop	ds
    22 000007EF 61                  <1> 	popa
    23                              <1> 
    24 000007F0 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 000007F1 55                  <1> 	push	ebp
    28 000007F2 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 000007F4 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 000007F5 B00B                <2>  mov al, %2
    32 000007F7 E670                <2>  out %1, al
    33                              <1> 
    34 000007F9 E471                <1> 	in	al, 0x71
    35 000007FB 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 000007FE E671                <1> 	out	0x71, al
    38                              <1> 
    39 00000800 58                  <1> 	pop	eax
    40                              <1> 
    41 00000801 89EC                <1> 	mov	esp, ebp
    42 00000803 5D                  <1> 	pop	ebp
    43                              <1> 
    44 00000804 C3                  <1> 	ret
    45                              <1> 
   110                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 00000805 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 00000806 B011                <2>  mov al, %2
     6 00000808 E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 0000080A B020                <2>  mov al, %2
     7 0000080C E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 0000080E B004                <2>  mov al, %2
     8 00000810 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 00000812 B005                <2>  mov al, %2
     9 00000814 E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 00000816 B0FF                <2>  mov al, %2
    10 00000818 E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 0000081A B011                <2>  mov al, %2
    12 0000081C E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 0000081E B028                <2>  mov al, %2
    13 00000820 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 00000822 B002                <2>  mov al, %2
    14 00000824 E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 00000826 B001                <2>  mov al, %2
    15 00000828 E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 0000082A B0FF                <2>  mov al, %2
    16 0000082C E6A1                <2>  out %1, al
    17                              <1> 
    18 0000082E 58                  <1> 	pop	eax
    19                              <1> 
    20 0000082F C3                  <1> 	ret
   111                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 00000830 FB                  <1> 	sti
     3                              <1> 
     4 00000831 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 0000083A 19E8B6FBFFFF6683C4- <1>
     4 00000843 10                  <1>
     5                              <1> 
     6 00000844 8B0424              <1> 	mov	eax, [esp + 0]
     7 00000847 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 0000084E [0C090000]50E82FFE- <1>
     7 00000856 FFFF6683C414        <1>
     8                              <1> 	
     9 0000085C 8B442404            <1> 	mov	eax, [esp + 4]
    10 00000860 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 00000867 [1D090000]50E816FE- <1>
    10 0000086F FFFF6683C414        <1>
    11                              <1> 	
    12 00000875 8B442408            <1> 	mov	eax, [esp + 8]
    13 00000879 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 00000880 [2E090000]50E8FDFD- <1>
    13 00000888 FFFF6683C414        <1>
    14                              <1> 	
    15 0000088E 8B44240C            <1> 	mov	eax, [esp +12]
    16 00000892 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 00000899 [3F090000]50E8E4FD- <1>
    16 000008A1 FFFF6683C414        <1>
    17                              <1> 
    18 000008A7 68[05090000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 000008AF 00006A106A19E83CFB- <1>
    18 000008B8 FFFF6683C410        <1>
    19 000008BE 68[16090000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 000008C6 00006A116A19E825FB- <1>
    19 000008CF FFFF6683C410        <1>
    20 000008D5 68[27090000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 000008DD 00006A126A19E80EFB- <1>
    20 000008E6 FFFF6683C410        <1>
    21 000008EC 68[38090000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 000008F4 00006A136A19E8F7FA- <1>
    21 000008FD FFFF6683C410        <1>
    22                              <1> 
    23 00000903 EBFE                <1> 	jmp	$
    24                              <1> 
    25 00000905 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 0000090C 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 00000915 00                  <1>
    27 00000916 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 0000091D 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 00000926 00                  <1>
    29 00000927 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 0000092E 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 00000937 00                  <1>
    31 00000938 2020202B31323A      <1> .s4:	db	"   +12:"
    32 0000093F 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 00000948 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 00000949 9C                  <1> 	pushf
    37 0000094A 0E                  <1> 	push	cs
    38 0000094B 68[30080000]        <1> 	push	int_stop
    39                              <1> 
    40 00000950 B8[56090000]        <1> 	mov	eax, .s0
    41 00000955 CF                  <1> 	iret
    42                              <1> 
    43 00000956 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 0000095F 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 00000967 55                  <1> 	push	ebp
    47 00000968 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 0000096A 50                  <1> 	push	eax
    50 0000096B 53                  <1> 	push	ebx
    51 0000096C 51                  <1> 	push	ecx
    52 0000096D 57                  <1> 	push	edi
    53                              <1> 
    54 0000096E 8D05[49090000]      <1> 	lea	eax, [int_default]
    55 00000974 BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000979 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 0000097B B900010000          <1> 	mov	ecx, 256
    65 00000980 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000985 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 00000987 894704              <1> 	mov	[edi + 4], eax	; top
    69 0000098A 83C708              <1> 	add	edi, 8
    70 0000098D E2F6                <1> 	loop	.10L
    71                              <1> 
    72 0000098F 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000996 5F                  <1> 	pop	edi
    75 00000997 59                  <1> 	pop	ecx
    76 00000998 5B                  <1> 	pop	ebx
    77 00000999 58                  <1> 	pop	eax
    78                              <1> 
    79 0000099A 89EC                <1> 	mov	esp, ebp
    80 0000099C 5D                  <1> 	pop	ebp
    81                              <1> 
    82 0000099D C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 0000099E 9C                  <1> 	pushf
    86 0000099F 0E                  <1> 	push	cs
    87 000009A0 68[30080000]        <1> 	push	int_stop
    88                              <1> 
    89 000009A5 B8[AB090000]        <1> 	mov	eax, .s0
    90 000009AA CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 000009AB 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 000009B4 44495620203E2000    <1>
   112                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 000009BC 60                  <1> 	pusha
     3 000009BD 1E                  <1> 	push	ds
     4 000009BE 06                  <1> 	push	es
     5                              <1> 
     6 000009BF 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 000009C3 8ED8                <1> 	mov	ds, ax
     8 000009C5 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 000009C7 E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 000009C9 5068[E0090000]E854- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 000009D1 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 000009D8 B020                <2>  mov al, %2
    16 000009DA E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 000009DC 07                  <1> 	pop	es
    20 000009DD 1F                  <1> 	pop	ds
    21 000009DE 61                  <1> 	popa
    22                              <1> 
    23 000009DF CF                  <1> 	iret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 000009E0 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   113                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   114                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 000009F8 55                  <1> 	push	ebp
     4 000009F9 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000009FB 56                  <1> 	push	esi
     7 000009FC 57                  <1> 	push	edi
     8 000009FD 53                  <1> 	push	ebx
     9                              <1> 
    10 000009FE 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000A01 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 00000A04 B800000000          <1> 	mov	eax, 0
    14 00000A09 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000A0B 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000A0E 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000A10 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 00000A14 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 00000A16 43                  <1> 	inc	ebx
    23 00000A17 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 00000A1A 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000A1C B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000A21 5B                  <1> 	pop	ebx
    30 00000A22 5F                  <1> 	pop	edi
    31 00000A23 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000A24 89EC                <1> 	mov	esp, ebp
    34 00000A26 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000A27 C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 00000A28 55                  <1> 	push	ebp
    40 00000A29 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 00000A2B 56                  <1> 	push	esi
    43 00000A2C 53                  <1> 	push	ebx
    44 00000A2D 51                  <1> 	push	ecx
    45                              <1> 
    46 00000A2E 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000A31 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000A34 89D9                <1> 	mov	ecx, ebx
    50 00000A36 41                  <1> 	inc	ecx
    51 00000A37 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 00000A3A 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000A3C 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000A3E 8A450C              <1> 	mov	al, [ebp +12]
    60 00000A41 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000A45 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 00000A48 B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000A4D 59                  <1> 	pop	ecx
    66 00000A4E 5B                  <1> 	pop	ebx
    67 00000A4F 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000A50 89EC                <1> 	mov	esp, ebp
    70 00000A52 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000A53 C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000A54 55                  <1> 	push	ebp
    77 00000A55 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 00000A57 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 00000A58 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 00000A5B 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000A5E 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000A61 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000A64 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 00000A67 B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000A6C 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000A6D 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000A70 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000A73 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000A7A [A40A0000]50E803FC- <1>
    95 00000A82 FFFF6683C414        <1>
    96 00000A88 68[A40A0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000A90 52E860F9FFFF6683C4- <1>
    96 00000A99 10                  <1>
    97                              <1> 
    98 00000A9A 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000A9D E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000A9F 61                  <1> 	popa
   104                              <1> 
   105 00000AA0 89EC                <1> 	mov	esp, ebp
   106 00000AA2 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000AA3 C3                  <1> 	ret
   109                              <1> 
   110 00000AA4 2D2D00              <1> .tmp:	db	"--",0
   115                                  %include	"../modules/protect/call_gate.s"
     1                              <1> call_gate:
     2                              <1> 	;retf	4 * 4
     3                              <1> ; if SS_GATE_0 called
     4 00000AA7 55                  <1> 	push	ebp
     5 00000AA8 89E5                <1> 	mov	ebp, esp
     6                              <1> 
     7 00000AAA 60                  <1> 	pusha
     8 00000AAB 1E                  <1> 	push	ds
     9 00000AAC 06                  <1> 	push	es
    10                              <1> 
    11 00000AAD 66B81000            <1> 	mov	ax, 0x0010
    12 00000AB1 8ED8                <1> 	mov	ds, ax
    13 00000AB3 8EC0                <1> 	mov	es, ax
    14                              <1> 
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_1
    17                              <1> 	;je	.11L
    18                              <1> 
    19                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t0
    20                              <1> 	;jmp	.10E
    21                              <1> .11L:
    22                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t1
    23                              <1> .10E:
    24                              <1> 		
    25                              <1> 	;cdecl	itoa, esp, .t2, 8, 16, 0b0100
    26                              <1> 	;cdecl	draw_str, 0, 1, 0x010F, .t2
    27                              <1> 
    28                              <1> 	;cdecl	itoa, dword [ESP_COUNTER], .t3, 8, 16, 0b0100
    29                              <1> 	;cdecl	draw_str, 0, 2, 0x010F, .t3
    30                              <1> 	
    31                              <1> 
    32                              <1> 
    33                              <1> 	; ebp + 0 -- EBP
    34                              <1> 	; ebp + 4 -- EIP
    35                              <1> 	; ebp + 8 -- CS
    36 00000AB5 8B450C              <1> 	mov	eax, dword[ebp +12]
    37 00000AB8 8B5D10              <1> 	mov	ebx, dword[ebp +16]
    38 00000ABB 8B4D14              <1> 	mov	ecx, dword[ebp +20]
    39 00000ABE 8B5518              <1> 	mov	edx, dword[ebp +24]
    40 00000AC1 52515350E82CF9FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx
    40 00000ACA 6683C410            <1>
    41                              <1> 	; wrapper
    42                              <1> 
    43 00000ACE 07                  <1> 	pop	es
    44 00000ACF 1F                  <1> 	pop	ds
    45 00000AD0 61                  <1> 	popa
    46                              <1> 
    47 00000AD1 89EC                <1> 	mov	esp, ebp
    48 00000AD3 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000AD4 CA1000              <1> 	retf	4 * 4	; 4 DWORDs
    51                              <1> 
    52                              <1> 
    53 00000AD7 7461736B5F3000      <1> .t0:	db	"task_0",0
    54 00000ADE 7461736B5F3100      <1> .t1:	db	"task_1",0
    55 00000AE5 2D2D2D2D2D2D2D2D00  <1> .t2:	db	"--------", 0
    56 00000AEE 2D2D2D2D2D2D2D2D00  <1> .t3:	db	"--------", 0
   116                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ; system calls
     2                              <1> trap_gate_81:	; system call 81, draw_char
     3                              <1> %ifdef	USE_TEST_AND_SET
     4 00000AF7 68[2C0B0000]E82F00- <1> 	cdecl	test_and_set, IN_USE
     4 00000AFF 00006683C404        <1>
     5                              <1> %endif
     6 00000B05 50525153E8E9F7FFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
     6 00000B0E 6683C410            <1>
     7                              <1> %ifdef	USE_TEST_AND_SET
     8 00000B12 C705[2C0B0000]0000- <1> 	mov	[IN_USE], dword 0
     8 00000B1A 0000                <1>
     9                              <1> %endif
    10 00000B1C CF                  <1> 	iret
    11                              <1> 
    12                              <1> trap_gate_82:
    13 00000B1D 535251E889F9FFFF66- <1> 	cdecl	draw_pixel, ecx, edx, ebx
    13 00000B26 83C40C              <1>
    14 00000B29 CF                  <1> 	iret
    15                              <1> 
    16 00000B2A 00<rept>            <1> ALIGN	4,	db	0
    17 00000B2C 00000000            <1> IN_USE:		dd	0
   117                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2 00000B30 55                  <1> 	push	ebp
     3 00000B31 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000B33 50                  <1> 	push	eax
     6 00000B34 53                  <1> 	push	ebx
     7                              <1> 
     8 00000B35 B800000000          <1> 	mov	eax, 0		; set bit
     9 00000B3A 8B5D08              <1> 	mov	ebx, [ebp + 8]	; global variable
    10                              <1> 
    11                              <1> .10L:
    12 00000B3D F00FAB03            <1> 	lock	bts [ebx], eax
    13 00000B41 7307                <1> 	jnc	.10E		; we can use registers
    14                              <1> .12L:
    15 00000B43 0FA303              <1> 	bt	[ebx], eax
    16 00000B46 72FB                <1> 	jc	.12L		; we can not use
    17                              <1> 
    18 00000B48 EBF3                <1> 	jmp	.10L
    19                              <1> .10E:
    20                              <1> 	
    21 00000B4A 5B                  <1> 	pop	ebx
    22 00000B4B 58                  <1> 	pop	eax
    23                              <1> 
    24 00000B4C 89EC                <1> 	mov	esp, ebp
    25 00000B4E 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000B4F C3                  <1> 	ret
    28                              <1> 
   118                                  %include	"../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 	; eax : return value
     3                              <1> 	; ebx : segment selector
     4                              <1> 
     5 00000B50 8B83[FA0C0000]      <1> 	mov	eax, [GDT + ebx + 2]
     6 00000B56 C1E008              <1> 	shl	eax, 8
     7 00000B59 8A83[FF0C0000]      <1> 	mov	al, [GDT + ebx + 7]
     8 00000B5F C1C808              <1> 	ror	eax, 8
     9                              <1> 
    10 00000B62 C3                  <1> 	ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 	; eax : tss address
    14 00000B63 DD7068              <1> 	fnsave	[eax + 104]
    15 00000B66 C780D4000000010000- <1> 	mov	[eax + 104 + 108], dword 1	; store flag or present flag(?)
    15 00000B6F 00                  <1>
    16                              <1> 	
    17 00000B70 C3                  <1> 	ret
    18                              <1> 
    19                              <1> load_fpu_context:
    20 00000B71 83B8D400000000      <1> 	cmp	[eax + 104 + 108], dword 0
    21 00000B78 7505                <1> 	jne	.10F
    22 00000B7A 9BDBE3              <1> 	finit					; not initialized yet
    23 00000B7D EB03                <1> 	jmp	.10E
    24                              <1> .10F:
    25 00000B7F DD6068              <1> 	frstor	[eax + 104]
    26                              <1> .10E:
    27 00000B82 C3                  <1> 	ret
    28                              <1> 
    29                              <1> int_nm:
    30 00000B83 60                  <1> 	pusha
    31 00000B84 06                  <1> 	push	es
    32 00000B85 1E                  <1> 	push	ds
    33                              <1> 
    34 00000B86 66B81000            <1> 	mov	ax, DS_KERNEL
    35 00000B8A 8EC0                <1> 	mov	es, ax
    36 00000B8C 8ED8                <1> 	mov	ds, ax
    37                              <1> 
    38 00000B8E 0F06                <1> 	clts
    39                              <1> 
    40 00000B90 8B3D[DC0B0000]      <1> 	mov	edi, [.last_tss]
    41 00000B96 0F00CE              <1> 	str	esi
    42 00000B99 83E6F8              <1> 	and	esi, ~0x0007	; exclude TI,RPL bits
    43                              <1> 
    44 00000B9C 83FF00              <1> 	cmp	edi, 0		; first use
    45 00000B9F 7420                <1> 	je	.10F
    46                              <1> 
    47 00000BA1 39FE                <1> 	cmp	esi, edi
    48 00000BA3 741A                <1> 	je	.12E
    49                              <1> 
    50 00000BA5 FA                  <1> 	cli
    51                              <1> 
    52 00000BA6 89FB                <1> 	mov	ebx, edi
    53 00000BA8 E8A3FFFFFF          <1> 	call	get_tss_base	; eax is address to tss
    54 00000BAD E8B1FFFFFF          <1> 	call	save_fpu_context; eax used here
    55                              <1> 
    56 00000BB2 89F3                <1> 	mov	ebx, esi
    57 00000BB4 E897FFFFFF          <1> 	call	get_tss_base
    58 00000BB9 E8B3FFFFFF          <1> 	call	load_fpu_context
    59                              <1> 
    60 00000BBE FB                  <1> 	sti
    61                              <1> .12E:
    62 00000BBF EB0E                <1> 	jmp	.10E
    63                              <1> .10F:
    64 00000BC1 FA                  <1> 	cli
    65                              <1> 
    66 00000BC2 89F3                <1> 	mov	ebx, esi
    67 00000BC4 E887FFFFFF          <1> 	call	get_tss_base
    68 00000BC9 E8A3FFFFFF          <1> 	call	load_fpu_context
    69                              <1> 
    70 00000BCE FB                  <1> 	sti
    71                              <1> .10E:
    72                              <1> 
    73 00000BCF 8935[DC0B0000]      <1> 	mov	[.last_tss], esi
    74                              <1> 
    75 00000BD5 1F                  <1> 	pop	ds
    76 00000BD6 07                  <1> 	pop	es
    77 00000BD7 61                  <1> 	popa
    78                              <1> 
    79 00000BD8 CF                  <1> 	iret
    80                              <1> 
    81 00000BD9 00<rept>            <1> ALIGN	4,	db	0
    82 00000BDC 00000000            <1> .last_tss:	dd	0
   119                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2 00000BE0 55                  <1> 	push	ebp
     3 00000BE1 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000BE3 50                  <1> 	push	eax
     6 00000BE4 51                  <1> 	push	ecx
     7                              <1> 
     8 00000BE5 8B4D08              <1> 	mov	ecx, [ebp + 8]
     9 00000BE8 A1[540C0000]        <1> 	mov	eax, [TIMER_COUNT]
    10                              <1> .10L:
    11 00000BED 3905[540C0000]      <1> 	cmp	[TIMER_COUNT], eax
    12 00000BF3 74F8                <1> 	je	.10L
    13 00000BF5 40                  <1> 	inc	eax		; per 10ms
    14 00000BF6 E2F5                <1> 	loop	.10L		; 10ms * ecx]
    15                              <1> 
    16 00000BF8 59                  <1> 	pop	ecx
    17 00000BF9 58                  <1> 	pop	eax
    18                              <1> 
    19 00000BFA 89EC                <1> 	mov	esp, ebp
    20 00000BFC 5D                  <1> 	pop	ebp
    21                              <1> 
    22 00000BFD C3                  <1> 	ret
    23                              <1> 
   120                                  ;%include	"../modules/protect/int_timer.s"
   121                                  %include	"modules/my_int_timer.s"
     1                              <1> int_timer:
     2 00000BFE 60                  <1> 	pushad
     3 00000BFF 06                  <1> 	push	es
     4 00000C00 1E                  <1> 	push	ds
     5                              <1> 
     6 00000C01 66B81000            <1> 	mov	ax, 0x10
     7 00000C05 8ED8                <1> 	mov	ds, ax
     8 00000C07 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000C09 FF05[540C0000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 00000C0F B020                <2>  mov al, %2
    12 00000C11 E620                <2>  out %1, al
    13                              <1> 	
    14 00000C13 660F00C8            <1> 	str	ax
    15 00000C17 6683F820            <1> 	cmp	ax, SS_TASK_0
    16 00000C1B 7415                <1> 	je	.11L
    17 00000C1D 6683F828            <1> 	cmp	ax, SS_TASK_1
    18 00000C21 7418                <1> 	je	.12L
    19 00000C23 6683F830            <1> 	cmp	ax, SS_TASK_2
    20 00000C27 741B                <1> 	je	.13L
    21                              <1> 
    22 00000C29 EA000000002000      <1> 	jmp	SS_TASK_0:0
    23 00000C30 EB1B                <1> 	jmp	.10E
    24                              <1> .11L:
    25 00000C32 EA000000002800      <1> 	jmp	SS_TASK_1:0
    26 00000C39 EB12                <1> 	jmp	.10E
    27                              <1> .12L:
    28 00000C3B EA000000003000      <1> 	jmp	SS_TASK_2:0
    29 00000C42 EB09                <1> 	jmp	.10E
    30                              <1> .13L:
    31 00000C44 EA000000003800      <1> 	jmp	SS_TASK_3:0
    32 00000C4B EB00                <1> 	jmp	.10E
    33                              <1> .10E:
    34                              <1> 
    35 00000C4D 1F                  <1> 	pop	ds
    36 00000C4E 07                  <1> 	pop	es
    37 00000C4F 61                  <1> 	popad
    38                              <1> 	
    39 00000C50 CF                  <1> 	iret
    40                              <1> 
    41 00000C51 00<rept>            <1> ALIGN	4,	db	0
    42 00000C54 0000000000000000    <1> TIMER_COUNT:	dq	0
    43                              <1> 
    44                              <1> 
    45                              <1> int_en_timer:
    46 00000C5C 55                  <1> 	push	ebp
    47 00000C5D 89E5                <1> 	mov	ebp, esp
    48                              <1> 	
    49 00000C5F 50                  <1> 	push	eax
    50                              <1> 
    51                              <1> 	outp	0x43, 0b00_11_010_0
    51 00000C60 B034                <2>  mov al, %2
    51 00000C62 E643                <2>  out %1, al
    52                              <1> 	; counter 0
    53                              <1> 	; access mode, bottom -> top
    54                              <1> 	; mode, 2
    55                              <1> 	; bcd
    56                              <1> 
    57                              <1> 	outp	0x40, 0x9C
    57 00000C64 B09C                <2>  mov al, %2
    57 00000C66 E640                <2>  out %1, al
    58                              <1> 	outp	0x40, 0x2E
    58 00000C68 B02E                <2>  mov al, %2
    58 00000C6A E640                <2>  out %1, al
    59                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    60                              <1> 
    61 00000C6C 58                  <1> 	pop	eax
    62                              <1> 
    63 00000C6D 89EC                <1> 	mov 	esp, ebp
    64 00000C6F 5D                  <1> 	pop	ebp
    65                              <1> 
    66 00000C70 C3                  <1> 	ret
    67                              <1> 
    68                              <1> 
   122                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00000C71 55                  <1> 	push	ebp
     3 00000C72 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000C74 50                  <1> 	push	eax
     6                              <1> 
     7 00000C75 A1[540C0000]        <1> 	mov	eax, [TIMER_COUNT]
     8 00000C7A C1E808              <1> 	shr	eax, 8
     9 00000C7D 3B05[A80C0000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 00000C83 741E                <1> 	je	.10E
    11                              <1> 
    12 00000C85 A3[A80C0000]        <1> 	mov	[.index], eax
    13 00000C8A 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 00000C8D 8A80[AC0C0000]      <1> 	mov	al, [.table + eax]
    16 00000C93 506A0F6A1D6A00E858- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 00000C9C F6FFFF6683C410      <1>
    17                              <1> .10E:
    18 00000CA3 58                  <1> 	pop	eax
    19                              <1> 
    20 00000CA4 89EC                <1> 	mov	esp, ebp
    21 00000CA6 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00000CA7 C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000CA8 00000000            <1> .index:		dd	0
    27 00000CAC 7C2F2D5C            <1> .table:		dd	"|/-\"
   123                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 00000CB0 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 00000CB8 FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 00000CC0 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 00000CC8 FFFF000000FACF00    <1> .cs_task_1:	dq	0x00CF_FA00_0000_FFFF
     6 00000CD0 FFFF000000F2CF00    <1> .ds_task_1:	dq	0x00CF_F200_0000_FFFF
     7 00000CD8 FFFF000000FACF00    <1> .cs_task_2:	dq	0x00CF_FA00_0000_FFFF
     8 00000CE0 FFFF000000F2CF00    <1> .ds_task_2:	dq	0x00CF_F200_0000_FFFF
     9 00000CE8 FFFF000000FACF00    <1> .cs_task_3:	dq	0x00CF_FA00_0000_FFFF
    10 00000CF0 FFFF000000F2CF00    <1> .ds_task_3:	dq	0x00CF_F200_0000_FFFF
    11                              <1> .end:
    12                              <1> 
    13                              <1> ; ldt indexes
    14                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    15                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    16                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4 | 3	; offset | (use LDT bit) | (level = 3)
    17                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4 | 3	
    18                              <1> CS_TASK_2:	equ	(.cs_task_2 - LDT) | 4 | 3
    19                              <1> DS_TASK_2:	equ	(.ds_task_2 - LDT) | 4 | 3	
    20                              <1> CS_TASK_3:	equ	(.cs_task_3 - LDT) | 4 | 3
    21                              <1> DS_TASK_3:	equ	(.ds_task_3 - LDT) | 4 | 3	
    22                              <1> 
    23                              <1> LDT_LIMIT	equ	.end - LDT - 1
    24                              <1> 
    25                              <1> 
    26 00000CF8 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    27 00000D00 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    28 00000D08 FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    29 00000D10 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    30 00000D18 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    31 00000D20 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    32 00000D28 6700000000890000    <1> .tss_2:		dq	0x0000_8900_0000_0067
    33 00000D30 6700000000890000    <1> .tss_3:		dq	0x0000_8900_0000_0067
    34 00000D38 0000080004EC0000    <1> .call_gate:	dq	0x0000_EC04_0008_0000
    35                              <1> .end:
    36                              <1> 
    37                              <1> ; gdt indexes
    38                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    39                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    40                              <1> SS_LDT		equ	.ldt - GDT
    41                              <1> SS_TASK_0	equ	.tss_0 - GDT		; jump point
    42                              <1> SS_TASK_1	equ	.tss_1 - GDT
    43                              <1> SS_TASK_2	equ	.tss_2 - GDT
    44                              <1> SS_TASK_3	equ	.tss_3 - GDT
    45                              <1> SS_GATE_0	equ	.call_gate - GDT
    46                              <1> 
    47 00000D40 4700                <1> GDTR:		dw	GDT.end - GDT - 1
    48 00000D42 [F80C0000]          <1> 		dd	GDT
    49                              <1> 
    50                              <1> TSS_0:
    51 00000D46 00000000            <1> .link:    dd 0
    52 00000D4A 00321000            <1> .esp0:    dd SP_TASK_0 - STACK_SIZE / 2
    53 00000D4E 10000000            <1> .ss0:     dd DS_KERNEL
    54 00000D52 00000000            <1> .esp1:    dd 0
    55 00000D56 00000000            <1> .ss1:     dd 0
    56 00000D5A 00000000            <1> .esp2:    dd 0
    57 00000D5E 00000000            <1> .ss2:     dd 0
    58 00000D62 00000000            <1> .cr3:     dd 0
    59 00000D66 00000000            <1> .eip:     dd 0
    60 00000D6A 00000000            <1> .eflags:  dd 0
    61 00000D6E 00000000            <1> .eax:     dd 0
    62 00000D72 00000000            <1> .ecx:     dd 0
    63 00000D76 00000000            <1> .edx:     dd 0
    64 00000D7A 00000000            <1> .ebx:     dd 0
    65 00000D7E 00000000            <1> .esp:     dd 0
    66 00000D82 00000000            <1> .ebp:     dd 0
    67 00000D86 00000000            <1> .esi:     dd 0
    68 00000D8A 00000000            <1> .edi:     dd 0
    69 00000D8E 00000000            <1> .es:      dd 0
    70 00000D92 00000000            <1> .cs:      dd 0
    71 00000D96 00000000            <1> .ss:      dd 0
    72 00000D9A 00000000            <1> .ds:      dd 0
    73 00000D9E 00000000            <1> .fs:      dd 0
    74 00000DA2 00000000            <1> .gs:      dd 0
    75 00000DA6 00000000            <1> .ldt:     dd 0
    76 00000DAA 00000000            <1> .io:      dd 0
    77 00000DAE 00<rept>            <1> .fp_save: times 108 + 4 db 0
    78                              <1> 
    79                              <1> TSS_1:
    80 00000E1E 00000000            <1> .link:    dd 0
    81 00000E22 00361000            <1> .esp0:    dd SP_TASK_1 - STACK_SIZE / 2
    82 00000E26 10000000            <1> .ss0:     dd DS_KERNEL
    83 00000E2A 00000000            <1> .esp1:    dd 0
    84 00000E2E 00000000            <1> .ss1:     dd 0
    85 00000E32 00000000            <1> .esp2:    dd 0
    86 00000E36 00000000            <1> .ss2:     dd 0
    87 00000E3A 00000000            <1> .cr3:     dd 0
    88 00000E3E [A6100000]          <1> .eip:     dd task_1	; start at task_1
    89 00000E42 02020000            <1> .eflags:  dd 0x0202
    90 00000E46 00000000            <1> .eax:     dd 0
    91 00000E4A 00000000            <1> .ecx:     dd 0
    92 00000E4E 00000000            <1> .edx:     dd 0
    93 00000E52 00000000            <1> .ebx:     dd 0
    94 00000E56 00381000            <1> .esp:     dd SP_TASK_1
    95 00000E5A 00000000            <1> .ebp:     dd 0
    96 00000E5E 00000000            <1> .esi:     dd 0
    97 00000E62 00000000            <1> .edi:     dd 0
    98 00000E66 27000000            <1> .es:      dd DS_TASK_1
    99 00000E6A 1F000000            <1> .cs:      dd CS_TASK_1
   100 00000E6E 27000000            <1> .ss:      dd DS_TASK_1
   101 00000E72 27000000            <1> .ds:      dd DS_TASK_1
   102 00000E76 27000000            <1> .fs:      dd DS_TASK_1
   103 00000E7A 27000000            <1> .gs:      dd DS_TASK_1
   104 00000E7E 18000000            <1> .ldt:     dd SS_LDT
   105 00000E82 00000000            <1> .io:      dd 0
   106 00000E86 00<rept>            <1> .fp_save: times 108 + 4 db 0
   107                              <1> 
   108                              <1> TSS_2:
   109 00000EF6 00000000            <1> .link:    dd 0
   110 00000EFA 003A1000            <1> .esp0:    dd SP_TASK_2 - STACK_SIZE / 2
   111 00000EFE 10000000            <1> .ss0:     dd DS_KERNEL
   112 00000F02 00000000            <1> .esp1:    dd 0
   113 00000F06 00000000            <1> .ss1:	    dd 0
   114 00000F0A 00000000            <1> .esp2:    dd 0
   115 00000F0E 00000000            <1> .ss2:     dd 0
   116 00000F12 00000000            <1> .cr3:     dd 0
   117 00000F16 [DB100000]          <1> .eip:     dd task_2	; start at task_2
   118 00000F1A 02020000            <1> .eflags:  dd 0x0202
   119 00000F1E 00000000            <1> .eax:     dd 0
   120 00000F22 00000000            <1> .ecx:     dd 0
   121 00000F26 00000000            <1> .edx:     dd 0
   122 00000F2A 00000000            <1> .ebx:			dd 0
   123 00000F2E 003C1000            <1> .esp:			dd SP_TASK_2
   124 00000F32 00000000            <1> .ebp:			dd 0
   125 00000F36 00000000            <1> .esi:			dd 0
   126 00000F3A 00000000            <1> .edi:			dd 0
   127 00000F3E 37000000            <1> .es:			dd DS_TASK_2
   128 00000F42 2F000000            <1> .cs:			dd CS_TASK_2
   129 00000F46 37000000            <1> .ss:			dd DS_TASK_2
   130 00000F4A 37000000            <1> .ds:			dd DS_TASK_2
   131 00000F4E 37000000            <1> .fs:			dd DS_TASK_2
   132 00000F52 37000000            <1> .gs:			dd DS_TASK_2
   133 00000F56 18000000            <1> .ldt:			dd SS_LDT
   134 00000F5A 00000000            <1> .io:			dd 0
   135 00000F5E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   136                              <1> 
   137                              <1> TSS_3:
   138 00000FCE 00000000            <1> .link:    dd 0
   139 00000FD2 003E1000            <1> .esp0:    dd SP_TASK_3 - 512
   140 00000FD6 10000000            <1> .ss0:     dd DS_KERNEL
   141 00000FDA 00000000            <1> .esp1:    dd 0
   142 00000FDE 00000000            <1> .ss1:     dd 0
   143 00000FE2 00000000            <1> .esp2:    dd 0
   144 00000FE6 00000000            <1> .ss2:     dd 0
   145 00000FEA 00000000            <1> .cr3:     dd 0
   146 00000FEE [AC110000]          <1> .eip:     dd task_3
   147 00000FF2 02020000            <1> .eflags:  dd 0x0202
   148 00000FF6 00000000            <1> .eax:     dd 0
   149 00000FFA 00000000            <1> .ecx:     dd 0
   150 00000FFE 00000000            <1> .edx:     dd 0
   151 00001002 00000000            <1> .ebx:     dd 0
   152 00001006 00401000            <1> .esp:     dd SP_TASK_3
   153 0000100A 00000000            <1> .ebp:     dd 0
   154 0000100E 00000000            <1> .esi:     dd 0
   155 00001012 00000000            <1> .edi:     dd 0
   156 00001016 47000000            <1> .es:      dd DS_TASK_3
   157 0000101A 3F000000            <1> .cs:      dd CS_TASK_3
   158 0000101E 47000000            <1> .ss:      dd DS_TASK_3
   159 00001022 47000000            <1> .ds:      dd DS_TASK_3
   160 00001026 47000000            <1> .fs:      dd DS_TASK_3
   161 0000102A 47000000            <1> .gs:      dd DS_TASK_3
   162 0000102E 18000000            <1> .ldt:     dd SS_LDT
   163 00001032 00000000            <1> .io:      dd 0
   164 00001036 00<rept>            <1> .fp_save: times 108 + 4 db 0
   165                              <1> 
   124                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 000010A6 68[D4100000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 000010AE 006A3FE840F3FFFF66- <1>
     2 000010B7 83C410              <1>
     3                              <1> 	; cdecl	itoa, esp, .t0, 8, 16, 0b0100
     4                              <1> 	; cdecl	draw_str, 0, 2, 0x010F, .s0
     5                              <1> 	;mov	[ESP_COUNTER], esp
     6                              <1> 	; task_1 dose not have level 0
     7                              <1> 	; cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
     8                              <1> .10L:
     9                              <1> 	;cdecl	itoa, esp, .t0, 8, 16, 0b0100	
    10                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .t0
    11                              <1> 	;mov	[ESP_COUNTER], esp
    12                              <1> 	
    13                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
    14                              <1> 	
    15 000010BA A1[40020000]        <1> 	mov	eax, [RTC_TIME]
    16 000010BF 5068000700006A006A- <1> 	cdecl	draw_time, 72, 0, 0x0700, eax
    16 000010C8 48E844F6FFFF6683C4- <1>
    16 000010D1 10                  <1>
    17                              <1> 
    18                              <1> 	; jmp	SS_TASK_0:0	
    19                              <1> 
    20 000010D2 EBE6                <1> 	jmp	.10L
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24 000010D4 5461736B2D3100      <1> .s0	db	"Task-1", 0
   125                                  %include	"task/task_2.s"
     1                              <1> task_2:
     2 000010DB 68[9E110000]6A076A- <1> 	cdecl	draw_str, 63, 1, 0x07, .s0
     2 000010E3 016A3FE80BF3FFFF66- <1>
     2 000010EC 83C410              <1>
     3                              <1> 	
     4 000010EF DB05[8C110000]      <1> 	fild	dword [.c1000]
     5 000010F5 D9EB                <1> 	fldpi
     6 000010F7 DA35[90110000]      <1> 	fidiv	dword [.c180]
     7 000010FD D9EB                <1> 	fldpi
     8 000010FF DCC0                <1> 	fadd	st0, st0
     9 00001101 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 00001103 D8C2                <1> 	fadd	st0, st2
    14 00001105 D9F8                <1> 	fprem
    15 00001107 D9C0                <1> 	fld	st0	; copy st0
    16 00001109 D9FE                <1> 	fsin
    17 0000110B D8CC                <1> 	fmul	st0, st4
    18 0000110D DF35[94110000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 00001113 A1[94110000]        <1> 	mov	eax, [.bcd]
    21 00001118 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 0000111A 250F0F0000          <1> 	and	eax, 0x0F0F
    24 0000111F 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 00001124 C1EB04              <1> 	shr	ebx, 4
    27 00001127 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 0000112D 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 00001133 883D[A6110000]      <1> 	mov	[.s2 + 0], bh
    31 00001139 8825[A8110000]      <1> 	mov	[.s3 + 0], ah
    32 0000113F 881D[A9110000]      <1> 	mov	[.s3 + 1], bl
    33 00001145 A2[AA110000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 0000114A B807000000          <1> 	mov	eax, 7		; sign bit
    36 0000114F 0FA305[9D110000]    <1> 	bt	[.bcd + 9], eax
    37 00001156 7209                <1> 	jc	.10F
    38                              <1> 	
    39 00001158 C605[A5110000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 0000115F EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 00001161 C605[A5110000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 00001168 68[A5110000]6A076A- <1> 	cdecl	draw_str, 72, 1, 0x07, .s1
    44 00001170 016A48E87EF2FFFF66- <1>
    44 00001179 83C410              <1>
    45                              <1> 	
    46 0000117C 6A0AE85DFAFFFF6683- <1> 	cdecl	wait_tick, 10
    46 00001185 C404                <1>
    47                              <1> 
    48 00001187 E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 0000118C E8030000            <1> .c1000	dd	1000
    53 00001190 B4000000            <1> .c180	dd	180
    54 00001194 00<rept>            <1> .bcd:	times	10	db	0x00
    55 0000119E 5461736B2D3200      <1> .s0	db	"Task-2", 0
    56 000011A5 2D                  <1> .s1:	db	"-"
    57 000011A6 302E                <1> .s2:	db	"0."
    58 000011A8 30303000            <1> .s3:	db	"000", 0
   126                                  %include	"task/task_3.s"
     1                              <1> task_3:
     2 000011AC 68[6F120000]6A076A- <1> 	cdecl	draw_str, 63, 2, 0x07, .s0
     2 000011B4 026A3FE83AF2FFFF66- <1>
     2 000011BD 83C410              <1>
     3                              <1> 	
     4 000011C0 DB05[5D120000]      <1> 	fild	dword [.c1000]
     5 000011C6 D9EB                <1> 	fldpi
     6 000011C8 DA35[61120000]      <1> 	fidiv	dword [.c180]
     7 000011CE D9EB                <1> 	fldpi
     8 000011D0 DCC0                <1> 	fadd	st0, st0
     9 000011D2 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 000011D4 D8C2                <1> 	fadd	st0, st2
    14 000011D6 D9F8                <1> 	fprem
    15 000011D8 D9C0                <1> 	fld	st0	; copy st0
    16 000011DA D9FF                <1> 	fcos
    17 000011DC D8CC                <1> 	fmul	st0, st4
    18 000011DE DF35[65120000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 000011E4 A1[65120000]        <1> 	mov	eax, [.bcd]
    21 000011E9 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 000011EB 250F0F0000          <1> 	and	eax, 0x0F0F
    24 000011F0 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 000011F5 C1EB04              <1> 	shr	ebx, 4
    27 000011F8 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 000011FE 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 00001204 883D[77120000]      <1> 	mov	[.s2 + 0], bh
    31 0000120A 8825[79120000]      <1> 	mov	[.s3 + 0], ah
    32 00001210 881D[7A120000]      <1> 	mov	[.s3 + 1], bl
    33 00001216 A2[7B120000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 0000121B B807000000          <1> 	mov	eax, 7		; sign bit
    36 00001220 0FA305[6E120000]    <1> 	bt	[.bcd + 9], eax
    37 00001227 7209                <1> 	jc	.10F
    38                              <1> 	
    39 00001229 C605[76120000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 00001230 EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 00001232 C605[76120000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 00001239 68[76120000]6A076A- <1> 	cdecl	draw_str, 72, 2, 0x07, .s1
    44 00001241 026A48E8ADF1FFFF66- <1>
    44 0000124A 83C410              <1>
    45                              <1> 	
    46 0000124D 6A0AE88CF9FFFF6683- <1> 	cdecl	wait_tick, 10
    46 00001256 C404                <1>
    47                              <1> 
    48 00001258 E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 0000125D E8030000            <1> .c1000	dd	1000
    53 00001261 B4000000            <1> .c180	dd	180
    54 00001265 00<rept>            <1> .bcd:	times	10	db	0x00
    55 0000126F 5461736B2D3300      <1> .s0	db	"Task-3", 0
    56 00001276 2D                  <1> .s1:	db	"-"
    57 00001277 302E                <1> .s2:	db	"0."
    58 00001279 30303000            <1> .s3:	db	"000", 0
   127                                  
   128                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   129                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   130                                  
   131                                  
   132                                  
   133 0000127D 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
