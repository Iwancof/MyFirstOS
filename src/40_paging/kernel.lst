     1                                  %define		USE_SYSTEM_CALL
     2                                  %define		USE_TEST_AND_SET
     3                                  
     4                                  %include	"../include/define.s"
     1                              <1> VECT_BASE		equ	0x0010_0000
     2                              <1> KERNEL_LOAD		equ	0x0010_1000
     3                              <1> STACK_BASE		equ	0x0010_3000
     4                              <1> CR3_BASE		equ	0x0010_5000
     5                              <1> 
     6                              <1> BOOT_LOAD		equ	0x7c00
     7                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     8                              <1> 
     9                              <1> BOOT_SIZE		equ	(1024 * 8)
    10                              <1> SECT_SIZE		equ	(512)
    11                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
    12                              <1> 
    13                              <1> E820_RECORD_SIZE	equ	20
    14                              <1> 
    15                              <1> KERNEL_SIZE		equ	(1024 * 8)
    16                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    17                              <1> 
    18                              <1> 
    19                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    20                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    21                              <1> 
    22                              <1> struc			ring_buff		; for keyboard
    23 00000000 <res 00000004>      <1> 				.rp	resd	1
    24 00000004 <res 00000004>      <1> 				.wp	resd	1
    25 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    26                              <1> endstruc
    27                              <1> 
    28                              <1> struc			rose
    29 00000000 <res 00000004>      <1> 				.x0		resd	1
    30 00000004 <res 00000004>      <1> 				.y0		resd	1
    31 00000008 <res 00000004>      <1> 				.x1		resd	1
    32 0000000C <res 00000004>      <1> 				.y1		resd	1
    33                              <1> 
    34 00000010 <res 00000004>      <1> 				.n		resd	1
    35 00000014 <res 00000004>      <1> 				.d		resd	1
    36                              <1> 
    37 00000018 <res 00000004>      <1> 				.color_x	resd	1
    38 0000001C <res 00000004>      <1> 				.color_y	resd	1
    39 00000020 <res 00000004>      <1> 				.color_z	resd	1
    40 00000024 <res 00000004>      <1> 				.color_s	resd	1
    41 00000028 <res 00000004>      <1> 				.color_f	resd	1
    42 0000002C <res 00000004>      <1> 				.color_b	resd	1
    43                              <1> 				
    44 00000030 <res 00000010>      <1> 				.title		resb	16
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;struc ring_buff
    48                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    49                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    50                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    51                              <1> ;endstruc
    52                              <1> 
    53                              <1> STACK_SIZE		equ	1024
    54                              <1> 
    55                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    56                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    57                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    58                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
    59                              <1> 
     5                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     6                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     7                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     8                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     9                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
    10                                  %include	"../include/set_gate.s"
     1                              <1> %macro	set_gate 2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	mov	[edi + 0], ax
     9                              <1> 	shr	eax, 16
    10                              <1> 	mov	[edi + 6], ax
    11                              <1> 	
    12                              <1> 	pop	edi
    13                              <1> 	pop	eax
    14                              <1> %endmacro
    11                                  ;%include	"../../../../testOS/src/include/macro.s"
    12                                  
    13                                  ORG	KERNEL_LOAD
    14                                  
    15                                  ALIGN	4
    16 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    17 00000002 00001000                	dd	VECT_BASE
    18                                  
    19                                  
    20                                  [BITS 32]
    21                                  
    22                                  
    23                                  kernel:
    24 00000006 FA                      	cli
    25                                  
    26 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    27 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    28 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    29 00000013 C1E004                  	shl	eax, 4
    30 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    31 00000018 A3[54020000]            	mov	[FONT_ADR], eax
    32                                  	
    33                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    33 0000001D 50                  <1>  push eax
    33 0000001E 57                  <1>  push edi
    33                              <1> 
    33 0000001F BF[900D0000]        <1>  mov edi, %1
    33 00000024 B8[300D0000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if %0 == 3
    33 00000029 66C7074700          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000002E 66894702            <1>  mov [edi + 2], ax
    33 00000032 C1E810              <1>  shr eax, 16
    33 00000035 884704              <1>  mov [edi + 4], al
    33 00000038 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000003B 5F                  <1>  pop edi
    33 0000003C 58                  <1>  pop eax
    34                                  	set_desc	GDT.tss_0, TSS_0
    34 0000003D 50                  <1>  push eax
    34 0000003E 57                  <1>  push edi
    34                              <1> 
    34 0000003F BF[980D0000]        <1>  mov edi, %1
    34 00000044 B8[C60D0000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if %0 == 3
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 00000049 66894702            <1>  mov [edi + 2], ax
    34 0000004D C1E810              <1>  shr eax, 16
    34 00000050 884704              <1>  mov [edi + 4], al
    34 00000053 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 00000056 5F                  <1>  pop edi
    34 00000057 58                  <1>  pop eax
    35                                  	set_desc	GDT.tss_1, TSS_1
    35 00000058 50                  <1>  push eax
    35 00000059 57                  <1>  push edi
    35                              <1> 
    35 0000005A BF[A00D0000]        <1>  mov edi, %1
    35 0000005F B8[9E0E0000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if %0 == 3
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 00000064 66894702            <1>  mov [edi + 2], ax
    35 00000068 C1E810              <1>  shr eax, 16
    35 0000006B 884704              <1>  mov [edi + 4], al
    35 0000006E 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 00000071 5F                  <1>  pop edi
    35 00000072 58                  <1>  pop eax
    36                                  	set_desc	GDT.tss_2, TSS_2
    36 00000073 50                  <1>  push eax
    36 00000074 57                  <1>  push edi
    36                              <1> 
    36 00000075 BF[A80D0000]        <1>  mov edi, %1
    36 0000007A B8[760F0000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if %0 == 3
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 0000007F 66894702            <1>  mov [edi + 2], ax
    36 00000083 C1E810              <1>  shr eax, 16
    36 00000086 884704              <1>  mov [edi + 4], al
    36 00000089 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000008C 5F                  <1>  pop edi
    36 0000008D 58                  <1>  pop eax
    37                                  	set_desc	GDT.tss_3, TSS_3
    37 0000008E 50                  <1>  push eax
    37 0000008F 57                  <1>  push edi
    37                              <1> 
    37 00000090 BF[B00D0000]        <1>  mov edi, %1
    37 00000095 B8[4E100000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if %0 == 3
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000009A 66894702            <1>  mov [edi + 2], ax
    37 0000009E C1E810              <1>  shr eax, 16
    37 000000A1 884704              <1>  mov [edi + 4], al
    37 000000A4 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 000000A7 5F                  <1>  pop edi
    37 000000A8 58                  <1>  pop eax
    38 000000A9 0F0115[C00D0000]        	lgdt		[GDTR]
    39                                  
    40 000000B0 BC00341000              	mov	esp, SP_TASK_0
    41 000000B5 66B82000                	mov	ax, SS_TASK_0	; set tss0
    42 000000B9 0F00D8                  	ltr	ax
    43                                  	; say "this process is task 0" to CPU
    44                                  
    45                                  
    46 000000BC E8BD080000              	cdecl	init_int
    47 000000C1 E856070000              	cdecl	init_pic
    48 000000C6 E8A20B0000              	cdecl	init_page
    49                                  
    50                                  	
    51                                  
    52 000000CB 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    52 000000D3 [B5090000]668907C1-
    52 000000DB E810668947065F58   
    53 000000E3 5057BF38001000B8-       	set_vect	0x07, int_nm
    53 000000EB [B70B0000]668907C1-
    53 000000F3 E810668947065F58   
    54 000000FB 5057BF00011000B8-       	set_vect	0x20, int_timer
    54 00000103 [7E0C0000]668907C1-
    54 0000010B E810668947065F58   
    55 00000113 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    55 0000011B [D3090000]668907C1-
    55 00000123 E810668947065F58   
    56 0000012B 5057BF40011000B8-       	set_vect	0x28, int_rtc
    56 00000133 [DF070000]668907C1-
    56 0000013B E810668947065F58   
    57 00000143 5057BF08041000B8-       	set_vect	0x81, trap_gate_81, word 0xEF00	; type = trap
    57 0000014B [0F0B0000]66C74704-
    57 00000153 00EF668907C1E81066-
    57 0000015C 8947065F58         
    58 00000161 5057BF10041000B8-       	set_vect	0x82, trap_gate_82, word 0xEF00
    58 00000169 [350B0000]66C74704-
    58 00000171 00EF668907C1E81066-
    58 0000017A 8947065F58         
    59 0000017F B800501000              	mov	eax, CR3_BASE
    60 00000184 0F22D8                  	mov	cr3, eax
    61                                  	
    62 00000187 0F20C0                  	mov	eax, cr0
    63 0000018A 0D00000080              	or	eax, (1 << 31)
    64 0000018F 0F22C0                  	mov	cr0, eax
    65                                  	; jmp	$ + 2
    66                                  
    67                                  	set_gate	GDT.call_gate, call_gate
    67 00000192 50                  <1>  push eax
    67 00000193 57                  <1>  push edi
    67                              <1> 
    67 00000194 BF[B80D0000]        <1>  mov edi, %1
    67 00000199 B8[BF0A0000]        <1>  mov eax, %2
    67                              <1> 
    67 0000019E 668907              <1>  mov [edi + 0], ax
    67 000001A1 C1E810              <1>  shr eax, 16
    67 000001A4 66894706            <1>  mov [edi + 6], ax
    67                              <1> 
    67 000001A8 5F                  <1>  pop edi
    67 000001A9 58                  <1>  pop eax
    68                                  	
    69 000001AA 6A10E8570600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    69 000001B3 C404               
    70 000001B5 E8220B0000              	cdecl	int_en_timer
    71                                  	
    72                                  	outp	0x21, 0b1111_1000	; slave
    72 000001BA B0F8                <1>  mov al, %2
    72 000001BC E621                <1>  out %1, al
    73                                  	outp	0xA1, 0b1111_1110	; rtc
    73 000001BE B0FE                <1>  mov al, %2
    73 000001C0 E6A1                <1>  out %1, al
    74                                  	
    75 000001C2 FB                      	sti
    76                                  	
    77 000001C3 6A0D6A3FE807020000-     	cdecl	draw_font, 63, 13
    77 000001CC 6683C408           
    78 000001D0 6A046A3FE873020000-     	cdecl	draw_color_bar, 63, 4
    78 000001D9 6683C408           
    79                                  
    80 000001DD 68[27020000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    80 000001E5 00006A0E6A19E81E02-
    80 000001EE 00006683C410       
    81                                  	
    82                                  	;jmp	SS_TASK_1:10000
    83                                  .10L:
    84                                  
    85 000001F4 E8F80A0000              	cdecl	draw_rotation_bar
    86                                  
    87 000001F9 68[4E020000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
    87 000001FF [F8090000]E8080800-
    87 00000207 006683C408         
    88 0000020C 83F800                  	cmp	eax, 0
    89 0000020F 74E3                    	je	.10L
    90                                  
    91 00000211 68[F8090000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
    91 00000219 02E84D0800006683C4-
    91 00000222 0C                 
    92                                  
    93 00000223 EBCF                    	jmp	.10L
    94                                  
    95 00000225 EBFE                    	jmp	$
    96                                  	
    97                                  	
    98 00000227 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    98 00000230 65726E656C212000   
    99 00000238 2D2D2D2D00              .t0:	db	"----",0
   100 0000023D 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
   100 00000246 2D2D2D2D2D2D2D00   
   101 0000024E 00000000                .int_key:	dd	0
   102                                  
   103 00000252 00<rept>                ALIGN	4,	db	0
   104 00000254 00000000                FONT_ADR:	dd	0
   105 00000258 00000000                RTC_TIME:	dd	0
   106                                  
   107                                  
   108                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 0000025C 55                  <1> 	push	ebp
     4 0000025D 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 0000025F 50                  <1> 	push	eax
     7 00000260 52                  <1> 	push	edx
     8                              <1> 
     9 00000261 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 00000264 80E403              <1> 	and	ah, 0x03
    11 00000267 B004                <1> 	mov	al, 0x04	; read map
    12 00000269 66BACE03            <1> 	mov	dx, 0x03CE
    13 0000026D 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 0000026F 5A                  <1> 	pop	edx
    16 00000270 58                  <1> 	pop	eax
    17                              <1> 
    18 00000271 89EC                <1> 	mov	esp,ebp
    19 00000273 5D                  <1> 	pop	ebp
    20                              <1> 
    21 00000274 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 00000275 55                  <1> 	push	ebp
    25 00000276 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 00000278 50                  <1> 	push	eax
    28 00000279 52                  <1> 	push	edx
    29                              <1> 
    30 0000027A 8A6508              <1> 	mov	ah, [ebp + 8]
    31 0000027D 80E40F              <1> 	and	ah, 0x0F
    32 00000280 B002                <1> 	mov	al, 0x02		; write select
    33 00000282 66BAC403            <1> 	mov	dx, 0x03C4
    34 00000286 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 00000288 5A                  <1> 	pop	edx
    37 00000289 58                  <1> 	pop	eax
    38                              <1> 
    39 0000028A 89EC                <1> 	mov	esp, ebp
    40 0000028C 5D                  <1> 	pop	ebp
    41                              <1> 
    42 0000028D C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 0000028E 55                  <1> 	push	ebp
    51 0000028F 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 00000291 50                  <1> 	push	eax
    54 00000292 53                  <1> 	push	ebx
    55 00000293 51                  <1> 	push	ecx
    56 00000294 52                  <1> 	push	edx
    57 00000295 56                  <1> 	push	esi
    58 00000296 57                  <1> 	push	edi
    59                              <1> 
    60 00000297 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 0000029A 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 0000029D 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 000002A1 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 000002A5 84C7                <1> 	test	bh, al			; BACK
    67 000002A7 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 000002AA FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 000002AC 84C3                <1> 	test	bl, al			; FORWARD
    71 000002AE 0F94C2              <1> 	setz	dl
    72 000002B1 FECA                <1> 	dec	dl
    73                              <1> 
    74 000002B3 FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 000002B4 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 000002B9 AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 000002BA 88C4                <1> 	mov	ah, al			; AL is font data
    80 000002BC F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 000002BE 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 000002C0 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 000002C6 7404                <1> 	jz	.11F
    86 000002C8 2227                <1> 	and	ah, [edi]
    87 000002CA EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 000002CC 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 000002CE 08E0                <1> 	or	al,ah
    92 000002D0 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 000002D2 83C750              <1> 	add	edi,80			; next
    95 000002D5 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 000002D7 5F                  <1> 	pop	edi
    99 000002D8 5E                  <1> 	pop	esi
   100 000002D9 5A                  <1> 	pop	edx
   101 000002DA 59                  <1> 	pop	ecx
   102 000002DB 5B                  <1> 	pop	ebx
   103 000002DC 58                  <1> 	pop	eax
   104                              <1> 
   105 000002DD 89EC                <1> 	mov	esp, ebp
   106 000002DF 5D                  <1> 	pop	ebp
   107                              <1> 
   108 000002E0 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 000002E1 55                  <1> 	push	ebp
   113 000002E2 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 000002E4 57                  <1> 	push	edi
   116 000002E5 50                  <1> 	push	eax
   117 000002E6 53                  <1> 	push	ebx
   118                              <1> 
   119 000002E7 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 000002EA 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 000002EE 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 000002F2 84C3                <1> 	test	bl, al
   124 000002F4 0F94C3              <1> 	setz	bl
   125 000002F7 FECB                <1> 	dec	bl
   126                              <1> 
   127 000002F9 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 000002FC 88C4                <1> 	mov	ah, al
   129 000002FE F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 00000300 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 00000302 20D8                <1> 	and	al, bl
   134 00000304 08E0                <1> 	or	al, ah
   135 00000306 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 00000308 5B                  <1> 	pop	ebx
   138 00000309 58                  <1> 	pop	eax
   139 0000030A 5F                  <1> 	pop	edi
   140                              <1> 
   141 0000030B 89EC                <1> 	mov	esp, ebp
   142 0000030D 5D                  <1> 	pop	ebp
   143                              <1> 
   144 0000030E C3                  <1> 	ret
   145                              <1> 
   109                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 0000030F 55                  <1> 	push	ebp
     4 00000310 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000312 56                  <1> 	push	esi
     7 00000313 57                  <1> 	push	edi
     8 00000314 50                  <1> 	push	eax
     9 00000315 53                  <1> 	push	ebx
    10 00000316 51                  <1> 	push	ecx
    11 00000317 52                  <1> 	push	edx
    12                              <1> 
    13 00000318 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 0000031C C1E604              <1> 	shl	esi, 4
    15 0000031F 0335[54020000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 00000325 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 00000328 C1E708              <1> 	shl	edi, 8
    19 0000032B 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 00000332 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 00000335 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 00000339 6A03E81CFFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 00000342 C404                <1>
    25 00000344 6A08E82AFFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 0000034D C404                <1>
    26 0000034F 536A085756E835FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 00000358 FF6683C410          <1>
    27                              <1> 
    28 0000035D 6A02E8F8FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 00000366 C404                <1>
    29 00000368 6A04E806FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 00000371 C404                <1>
    30 00000373 536A045756E811FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 0000037C FF6683C410          <1>
    31                              <1> 
    32 00000381 6A01E8D4FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 0000038A C404                <1>
    33 0000038C 6A02E8E2FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 00000395 C404                <1>
    34 00000397 536A025756E8EDFEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 000003A0 FF6683C410          <1>
    35                              <1> 	
    36 000003A5 6A00E8B0FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 000003AE C404                <1>
    37 000003B0 6A01E8BEFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 000003B9 C404                <1>
    38 000003BB 536A015756E8C9FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 000003C4 FF6683C410          <1>
    39                              <1> 
    40 000003C9 5A                  <1> 	pop	edx
    41 000003CA 59                  <1> 	pop	ecx
    42 000003CB 5B                  <1> 	pop	ebx
    43 000003CC 58                  <1> 	pop	eax
    44 000003CD 5F                  <1> 	pop	edi
    45 000003CE 5E                  <1> 	pop	esi
    46                              <1> 
    47 000003CF 89EC                <1> 	mov	esp, ebp
    48 000003D1 5D                  <1> 	pop	ebp
    49                              <1> 
    50 000003D2 C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
   110                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 000003D3 55                  <1> 	push	ebp
     3 000003D4 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000003D6 50                  <1> 	push	eax
     6 000003D7 53                  <1> 	push	ebx
     7 000003D8 51                  <1> 	push	ecx
     8                              <1> 
     9 000003D9 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 000003DE 81F900010000        <1> 	cmp	ecx,256
    12 000003E4 7321                <1> 	jae	.10E
    13                              <1> 
    14 000003E6 89C8                <1> 	mov	eax, ecx
    15 000003E8 83E00F              <1> 	and	eax, 0b00001111
    16 000003EB 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 000003EE 89CB                <1> 	mov	ebx, ecx
    19 000003F0 C1EB04              <1> 	shr	ebx, 4
    20 000003F3 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 000003F6 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 000003FF FF6683C410          <1>
    23                              <1> 	
    24 00000404 41                  <1> 	inc	ecx
    25 00000405 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 00000407 59                  <1> 	pop	ecx
    30 00000408 5B                  <1> 	pop	ebx
    31 00000409 58                  <1> 	pop	eax
    32                              <1> 
    33 0000040A 89EC                <1> 	mov	esp, ebp
    34 0000040C 5D                  <1> 	pop	ebp
    35                              <1> 
    36 0000040D C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
   111                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 0000040E 55                  <1> 	push	ebp
     3 0000040F 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000411 50                  <1> 	push	eax
     6 00000412 53                  <1> 	push	ebx
     7 00000413 51                  <1> 	push	ecx
     8 00000414 52                  <1> 	push	edx
     9 00000415 56                  <1> 	push	esi
    10                              <1> 
    11 00000416 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 00000419 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 0000041C 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 00000420 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 00000423 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 00000424 AC                  <1> 	lodsb
    20 00000425 3C00                <1> 	cmp	al, 0
    21 00000427 741A                <1> 	je	.10E
    22                              <1> %ifdef	USE_SYSTEM_CALL
    23 00000429 CD81                <1> 	int 0x81
    24                              <1> %else
    25                              <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    26                              <1> %endif
    27 0000042B 43                  <1> 	inc	ebx
    28 0000042C 83FB50              <1> 	cmp	ebx, 80
    29 0000042F 7CF3                <1> 	jl	.10L
    30 00000431 BB00000000          <1> 	mov	ebx, 0
    31 00000436 41                  <1> 	inc	ecx
    32 00000437 83F91E              <1> 	cmp	ecx, 30
    33 0000043A 7CE8                <1> 	jl	.10L
    34 0000043C B900000000          <1> 	mov	ecx, 0
    35                              <1> 	
    36 00000441 EBE1                <1> 	jmp	.10L
    37                              <1> .10E:
    38                              <1> 
    39 00000443 5E                  <1> 	pop	esi
    40 00000444 5A                  <1> 	pop	edx
    41 00000445 59                  <1> 	pop	ecx
    42 00000446 5B                  <1> 	pop	ebx
    43 00000447 58                  <1> 	pop	eax
    44                              <1> 
    45 00000448 89EC                <1> 	mov	esp, ebp
    46 0000044A 5D                  <1> 	pop	ebp
    47                              <1> 
    48 0000044B C3                  <1> 	ret
   112                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 0000044C 55                  <1> 	push	ebp
     3 0000044D 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000044F 56                  <1> 	push	esi
     6 00000450 57                  <1> 	push	edi
     7 00000451 50                  <1> 	push	eax
     8 00000452 53                  <1> 	push	ebx
     9 00000453 51                  <1> 	push	ecx
    10 00000454 52                  <1> 	push	edx
    11                              <1> 
    12 00000455 8B7508              <1> 	mov	esi, [ebp + 8]
    13 00000458 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 0000045B B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 00000460 83F910              <1> 	cmp	ecx, 16
    18 00000463 732E                <1> 	jae	.10E
    19                              <1> 
    20 00000465 89C8                <1> 	mov	eax, ecx
    21 00000467 83E001              <1> 	and	eax, 0x01	; % 2
    22 0000046A C1E003              <1> 	shl	eax, 3		; *= 8
    23 0000046D 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 0000046F 89CB                <1> 	mov	ebx, ecx
    26 00000471 D1EB                <1> 	shr	ebx, 1		; / 2
    27 00000473 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 00000475 89CA                <1> 	mov	edx, ecx
    32 00000477 D1E2                <1> 	shl	edx, 1
    33 00000479 8B92[A6040000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 0000047F 68[9D040000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 00000487 E882FFFFFF6683C410  <1>
    36                              <1> 
    37 00000490 41                  <1> 	inc	ecx
    38 00000491 EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 00000493 52                  <1> 	push	edx	
    42 00000494 51                  <1> 	push	ecx	
    43 00000495 53                  <1> 	push	ebx	
    44 00000496 50                  <1> 	push	eax	
    45 00000497 57                  <1> 	push	edi	
    46 00000498 56                  <1> 	push	esi	
    47                              <1> 
    48 00000499 89EC                <1> 	mov	esp, ebp
    49 0000049B 5D                  <1> 	pop	ebp
    50                              <1> 
    51 0000049C C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 0000049D 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 000004A6 00000008            <1> .t0:	dw 0x0000,0x0800
    57 000004AA 00010009            <1> 	dw 0x0100,0x0900
    58 000004AE 0002000A            <1> 	dw 0x0200,0x0A00
    59 000004B2 0003000B            <1> 	dw 0x0300,0x0B00
    60 000004B6 0004000C            <1> 	dw 0x0400,0x0C00
    61 000004BA 0005000D            <1> 	dw 0x0500,0x0D00
    62 000004BE 0006000E            <1> 	dw 0x0600,0x0E00
    63 000004C2 0007000F            <1> 	dw 0x0700,0x0F00
   113                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 000004C6 55                  <1> 	push	ebp
     4 000004C7 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000004C9 57                  <1> 	push	edi
     7 000004CA 53                  <1> 	push	ebx
     8 000004CB 51                  <1> 	push	ecx
     9                              <1> 
    10 000004CC 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 000004CF C1E704              <1> 	shl	edi, 4
    12 000004D2 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 000004D9 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 000004DC 89D9                <1> 	mov	ecx, ebx
    16 000004DE C1EB03              <1> 	shr	ebx, 3
    17 000004E1 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 000004E3 83E107              <1> 	and	ecx, 0x07
    20 000004E6 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 000004EB D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 000004ED 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 000004F0 6A03E865FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 000004F9 C404                <1>
    28 000004FB 6A08E873FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 00000504 C404                <1>
    29 00000506 516A085753E8D1FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 0000050F FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 00000514 6A02E841FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 0000051D C404                <1>
    34 0000051F 6A04E84FFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 00000528 C404                <1>
    35 0000052A 516A045753E8ADFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 00000533 FF6683C410          <1>
    36                              <1> 	
    37 00000538 6A01E81DFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 00000541 C404                <1>
    38 00000543 6A02E82BFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 0000054C C404                <1>
    39 0000054E 516A025753E889FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 00000557 FF6683C410          <1>
    40                              <1> 	
    41 0000055C 6A00E8F9FCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 00000565 C404                <1>
    42 00000567 6A01E807FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 00000570 C404                <1>
    43 00000572 516A015753E865FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 0000057B FF6683C410          <1>
    44                              <1> 
    45 00000580 59                  <1> 	pop	ecx
    46 00000581 5B                  <1> 	pop	ebx
    47 00000582 5F                  <1> 	pop	edi
    48                              <1> 
    49 00000583 89EC                <1> 	mov	esp, ebp
    50 00000585 5D                  <1> 	pop	ebp
    51                              <1> 
    52 00000586 C3                  <1> 	ret
    53                              <1> 
   114                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 00000587 55                  <1> 	push	ebp
     3 00000588 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000058A 6A00                <1> 	push	dword 0	; SUM: - 4
     6 0000058C 6A00                <1> 	push	dword 0	; x0 : - 8
     7 0000058E 6A00                <1> 	push	dword 0	; wid: -12
     8 00000590 6A00                <1> 	push	dword 0	; inx: -16
     9 00000592 6A00                <1> 	push	dword 0	; y0 : -20
    10 00000594 6A00                <1> 	push	dword 0	; hei: -24
    11 00000596 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 00000598 50                  <1> 	push	eax
    14 00000599 53                  <1> 	push	ebx
    15 0000059A 51                  <1> 	push	ecx
    16 0000059B 52                  <1> 	push	edx
    17 0000059C 56                  <1> 	push	esi
    18 0000059D 57                  <1> 	push	edi
    19                              <1> 
    20 0000059E 8B4508              <1> 	mov	eax, [ebp + 8]
    21 000005A1 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 000005A4 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 000005A6 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 000005A8 F7DB                <1> 	neg	ebx
    26 000005AA BEFFFFFFFF          <1> 	mov	esi, -1
    27 000005AF EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 000005B1 BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 000005B6 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 000005B9 8B5514              <1> 	mov	edx, [ebp +20]
    34 000005BC 29CA                <1> 	sub	edx, ecx
    35 000005BE 7D09                <1> 	jge	.20F
    36                              <1> 
    37 000005C0 F7DA                <1> 	neg	edx
    38 000005C2 BFFFFFFFFF          <1> 	mov	edi, -1
    39 000005C7 EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 000005C9 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 000005CE 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 000005D1 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 000005D4 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 000005D7 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 000005DA 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 000005DD 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 000005E0 39D3                <1> 	cmp	ebx, edx
    53 000005E2 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 000005E4 8D75EC              <1> 	lea	esi, [ebp -20]
    56 000005E7 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 000005EA EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 000005EC 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 000005EF 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 000005F2 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 000005F5 83F900              <1> 	cmp	ecx, 0
    67 000005F8 7505                <1> 	jnz	.30E
    68 000005FA B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75                              <1> %ifdef	USE_SYSTEM_CALL
    76 000005FF 51                  <1> 	push	ecx
    77 00000600 52                  <1> 	push	edx
    78 00000601 53                  <1> 	push	ebx
    79                              <1> 
    80 00000602 8B4DF8              <1> 	mov	ecx, [ebp - 8]
    81 00000605 8B55EC              <1> 	mov	edx, [ebp -20]
    82 00000608 8B5D18              <1> 	mov	ebx, [ebp +24]
    83                              <1> 
    84 0000060B CD82                <1> 	int	0x82
    85                              <1> 
    86 0000060D 5B                  <1> 	pop	ebx
    87 0000060E 5A                  <1> 	pop	edx
    88 0000060F 59                  <1> 	pop	ecx
    89                              <1> %else	
    90                              <1> 	cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    91                              <1> %endif
    92                              <1> 	
    93                              <1> 	; update coordinate
    94 00000610 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    95 00000613 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    96                              <1> 
    97 00000615 8B45FC              <1> 	mov	eax, [ebp - 4]
    98 00000618 0347FC              <1> 	add	eax, [edi - 4]
    99 0000061B 8B5EFC              <1> 	mov	ebx, [esi - 4]
   100                              <1> 
   101 0000061E 39D8                <1> 	cmp	eax, ebx
   102 00000620 7C07                <1> 	jl	.52E
   103 00000622 29D8                <1> 	sub	eax, ebx	; sum -= wid
   104                              <1> 	; sum can only add -1 or 1
   105                              <1> 	; so. not be  "dif * 2 < sum" 
   106                              <1> 
   107 00000624 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
   108 00000627 011F                <1> 	add	[edi - 0], ebx
   109                              <1> .52E:
   110 00000629 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
   111                              <1> 
   112 0000062C E2D1                <1> 	loop	.50L
   113                              <1> .50E:
   114                              <1> 
   115                              <1> 
   116 0000062E 5F                  <1> 	pop	edi
   117 0000062F 5E                  <1> 	pop	esi
   118 00000630 5A                  <1> 	pop	edx
   119 00000631 59                  <1> 	pop	ecx
   120 00000632 5B                  <1> 	pop	ebx
   121 00000633 58                  <1> 	pop	eax
   122                              <1> 
   123 00000634 89EC                <1> 	mov	esp, ebp
   124 00000636 5D                  <1> 	pop	ebp
   125                              <1> 
   126 00000637 C3                  <1> 	ret
   127                              <1> 
   128                              <1> 
   115                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 00000638 55                  <1> 	push	ebp
     3 00000639 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000063B 50                  <1> 	push	eax
     6 0000063C 53                  <1> 	push	ebx
     7 0000063D 51                  <1> 	push	ecx
     8 0000063E 52                  <1> 	push	edx
     9 0000063F 56                  <1> 	push	esi
    10                              <1> 
    11 00000640 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 00000643 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 00000646 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 00000649 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 0000064C 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 0000064F 39C8                <1> 	cmp	eax, ecx
    21 00000651 7C01                <1> 	jl	.10E		; OK
    22 00000653 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 00000654 39D3                <1> 	cmp	ebx, edx
    25 00000656 7C02                <1> 	jl	.20E		; OK
    26 00000658 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 0000065A 5653515350E823FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 00000663 FF6683C414          <1>
    36 00000668 5652505350E815FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 00000671 FF6683C414          <1>
    37                              <1> 
    38 00000676 4A                  <1> 	dec	edx
    39 00000677 5652515250E806FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 00000680 FF6683C414          <1>
    40 00000685 42                  <1> 	inc	edx
    41                              <1> 
    42 00000686 49                  <1> 	dec	ecx
    43 00000687 5652515351E8F6FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 00000690 FF6683C414          <1>
    44                              <1> 
    45 00000695 5E                  <1> 	pop	esi
    46 00000696 5A                  <1> 	pop	edx
    47 00000697 59                  <1> 	pop	ecx
    48 00000698 5B                  <1> 	pop	ebx
    49 00000699 58                  <1> 	pop	eax
    50                              <1> 
    51 0000069A 89EC                <1> 	mov	esp, ebp
    52 0000069C 5D                  <1> 	pop	ebp
    53                              <1> 
    54 0000069D C3                  <1> 	ret
    55                              <1> 
   116                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 0000069E 55                  <1> 	push 	ebp
     3 0000069F 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000006A1 50                  <1> 	push	eax
     6 000006A2 53                  <1> 	push	ebx
     7 000006A3 51                  <1> 	push	ecx
     8 000006A4 52                  <1> 	push	edx
     9 000006A5 56                  <1> 	push	esi
    10 000006A6 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 000006A7 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 000006AB 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 000006AE 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 000006B1 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 000006B3 B020                <1> 	mov	al,' '
    27 000006B5 F7C304000000        <1> 	test	ebx, 0b0100
    28 000006BB 7402                <1> 	je	.42E
    29 000006BD B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 000006BF FC                  <1> 	cld
    32 000006C0 F3AA                <1> 	rep	stosb
    33                              <1> 
    34 000006C2 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 000006C5 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 000006C8 89F7                <1> 	mov	edi, esi
    37 000006CA 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 000006CC 4F                  <1> 	dec	edi
    39                              <1> 
    40 000006CD F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 000006D3 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 000006D5 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 000006D8 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 000006DA 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 000006DD F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 000006E3 7410                <1> .20Q:	je	.20E		; not print sign
    51 000006E5 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 000006E8 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 000006EA F7D8                <1> 	neg	eax		; ax *= -1
    54 000006EC C6062D              <1> 	mov	[esi], byte '-'
    55 000006EF EB03                <1> 	jmp	.22E
    56 000006F1 C6062B              <1> .22F:	mov	[esi], byte '+'
    57 000006F4 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 000006F5 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 000006F8 BA00000000          <1> 	mov	edx, 0
    64 000006FD F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 000006FF 89D6                <1> 	mov	esi, edx
    68 00000701 8A96[19070000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 00000707 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 00000709 4F                  <1> 	dec	edi
    72                              <1> 
    73 0000070A 83F800              <1> 	cmp	eax,0
    74 0000070D E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 0000070F 5F                  <1> 	pop	edi
    79 00000710 5E                  <1> 	pop	esi
    80 00000711 5A                  <1> 	pop	edx
    81 00000712 59                  <1> 	pop	ecx
    82 00000713 5B                  <1> 	pop	ebx
    83 00000714 58                  <1> 	pop	eax
    84                              <1> 
    85 00000715 89EC                <1> 	mov	esp, ebp
    86 00000717 5D                  <1> 	pop	ebp
    87                              <1> 
    88 00000718 C3                  <1> 	ret
    89                              <1> 
    90 00000719 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 00000722 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   117                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 00000729 55                  <1> 	push	ebp
     3 0000072A 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000072C 50                  <1> 	push	eax
     6 0000072D 53                  <1> 	push	ebx
     7                              <1> 
     8 0000072E 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 00000731 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 00000734 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 0000073B [9B070000]53E859FF- <1>
    10 00000743 FFFF6683C414        <1>
    11                              <1> 
    12 00000749 88E3                <1> 	mov	bl, ah
    13 0000074B 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 00000752 [98070000]53E842FF- <1>
    13 0000075A FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 00000760 C1E810              <1> 	shr	eax, 16
    17 00000763 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 0000076A [95070000]50E82AFF- <1>
    17 00000772 FFFF6683C414        <1>
    18                              <1> 
    19 00000778 68[95070000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 00000780 FF750CFF7508E883FC- <1>
    19 00000789 FFFF6683C410        <1>
    20                              <1> 
    21 0000078F 5B                  <1> 	pop	ebx
    22 00000790 58                  <1> 	pop	eax
    23                              <1> 
    24 00000791 89EC                <1> 	mov	esp, ebp
    25 00000793 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000794 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 00000795 5A5A3A              <1> .hour:	db	"ZZ:"
    31 00000798 5A5A3A              <1> .min:	db	"ZZ:"
    32 0000079B 5A5A00              <1> .sec:	db	"ZZ", 0
   118                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 0000079E 55                  <1> 	push	ebp
     3 0000079F 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000007A1 53                  <1> 	push	ebx
     6                              <1> 
     7 000007A2 B00A                <1> 	mov	al, 0x0A
     8 000007A4 E670                <1> 	out	0x70, al
     9 000007A6 E471                <1> 	in	al, 0x71
    10                              <1> 
    11 000007A8 A880                <1> 	test	al, 0x80
    12 000007AA 7407                <1> 	je	.10F
    13 000007AC B801000000          <1> 	mov	eax, 1		; data updating. error
    14 000007B1 EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 000007B3 B004                <1> 	mov	al, 0x04	; Hour
    17 000007B5 E670                <1> 	out	0x70, al
    18 000007B7 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 000007B9 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 000007BC B002                <1> 	mov	al, 0x02
    23 000007BE E670                <1> 	out	0x70, al
    24 000007C0 E471                <1> 	in	al, 0x71
    25                              <1> 
    26 000007C2 C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 000007C5 B000                <1> 	mov	al, 0x00
    29 000007C7 E670                <1> 	out	0x70, al
    30 000007C9 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 000007CB 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 000007D0 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 000007D3 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 000007D5 B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 000007DA 5B                  <1> 	pop	ebx
    45                              <1> 
    46 000007DB 89EC                <1> 	mov	esp, ebp
    47 000007DD 5D                  <1> 	pop	ebp
    48                              <1> 
    49 000007DE C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   119                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 000007DF 60                  <1> 	pusha		; all registers in stack
     3 000007E0 1E                  <1> 	push	ds
     4 000007E1 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 000007E2 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 000007E6 8ED8                <1> 	mov	ds, ax
     9 000007E8 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 000007EA 68[58020000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 000007F2 FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 000007F8 B00C                <2>  mov al, %2
    13 000007FA E670                <2>  out %1, al
    14 000007FC E471                <1> 	in	al, 0x71
    15                              <1> 
    16 000007FE B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 00000800 E620                <1> 	out	0x20, al
    18 00000802 E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 00000804 07                  <1> 	pop	es
    21 00000805 1F                  <1> 	pop	ds
    22 00000806 61                  <1> 	popa
    23                              <1> 
    24 00000807 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 00000808 55                  <1> 	push	ebp
    28 00000809 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 0000080B 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 0000080C B00B                <2>  mov al, %2
    32 0000080E E670                <2>  out %1, al
    33                              <1> 
    34 00000810 E471                <1> 	in	al, 0x71
    35 00000812 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 00000815 E671                <1> 	out	0x71, al
    38                              <1> 
    39 00000817 58                  <1> 	pop	eax
    40                              <1> 
    41 00000818 89EC                <1> 	mov	esp, ebp
    42 0000081A 5D                  <1> 	pop	ebp
    43                              <1> 
    44 0000081B C3                  <1> 	ret
    45                              <1> 
   120                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 0000081C 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 0000081D B011                <2>  mov al, %2
     6 0000081F E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 00000821 B020                <2>  mov al, %2
     7 00000823 E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 00000825 B004                <2>  mov al, %2
     8 00000827 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 00000829 B005                <2>  mov al, %2
     9 0000082B E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 0000082D B0FF                <2>  mov al, %2
    10 0000082F E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 00000831 B011                <2>  mov al, %2
    12 00000833 E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 00000835 B028                <2>  mov al, %2
    13 00000837 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 00000839 B002                <2>  mov al, %2
    14 0000083B E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 0000083D B001                <2>  mov al, %2
    15 0000083F E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 00000841 B0FF                <2>  mov al, %2
    16 00000843 E6A1                <2>  out %1, al
    17                              <1> 
    18 00000845 58                  <1> 	pop	eax
    19                              <1> 
    20 00000846 C3                  <1> 	ret
   121                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 00000847 FB                  <1> 	sti
     3                              <1> 
     4 00000848 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 00000851 19E8B7FBFFFF6683C4- <1>
     4 0000085A 10                  <1>
     5                              <1> 
     6 0000085B 8B0424              <1> 	mov	eax, [esp + 0]
     7 0000085E 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 00000865 [23090000]50E82FFE- <1>
     7 0000086D FFFF6683C414        <1>
     8                              <1> 	
     9 00000873 8B442404            <1> 	mov	eax, [esp + 4]
    10 00000877 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 0000087E [34090000]50E816FE- <1>
    10 00000886 FFFF6683C414        <1>
    11                              <1> 	
    12 0000088C 8B442408            <1> 	mov	eax, [esp + 8]
    13 00000890 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 00000897 [45090000]50E8FDFD- <1>
    13 0000089F FFFF6683C414        <1>
    14                              <1> 	
    15 000008A5 8B44240C            <1> 	mov	eax, [esp +12]
    16 000008A9 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 000008B0 [56090000]50E8E4FD- <1>
    16 000008B8 FFFF6683C414        <1>
    17                              <1> 
    18 000008BE 68[1C090000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 000008C6 00006A106A19E83DFB- <1>
    18 000008CF FFFF6683C410        <1>
    19 000008D5 68[2D090000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 000008DD 00006A116A19E826FB- <1>
    19 000008E6 FFFF6683C410        <1>
    20 000008EC 68[3E090000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 000008F4 00006A126A19E80FFB- <1>
    20 000008FD FFFF6683C410        <1>
    21 00000903 68[4F090000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 0000090B 00006A136A19E8F8FA- <1>
    21 00000914 FFFF6683C410        <1>
    22                              <1> 
    23 0000091A EBFE                <1> 	jmp	$
    24                              <1> 
    25 0000091C 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 00000923 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 0000092C 00                  <1>
    27 0000092D 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 00000934 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 0000093D 00                  <1>
    29 0000093E 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 00000945 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 0000094E 00                  <1>
    31 0000094F 2020202B31323A      <1> .s4:	db	"   +12:"
    32 00000956 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 0000095F 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 00000960 9C                  <1> 	pushf
    37 00000961 0E                  <1> 	push	cs
    38 00000962 68[47080000]        <1> 	push	int_stop
    39                              <1> 
    40 00000967 B8[6D090000]        <1> 	mov	eax, .s0
    41 0000096C CF                  <1> 	iret
    42                              <1> 
    43 0000096D 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 00000976 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 0000097E 55                  <1> 	push	ebp
    47 0000097F 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 00000981 50                  <1> 	push	eax
    50 00000982 53                  <1> 	push	ebx
    51 00000983 51                  <1> 	push	ecx
    52 00000984 57                  <1> 	push	edi
    53                              <1> 
    54 00000985 8D05[60090000]      <1> 	lea	eax, [int_default]
    55 0000098B BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000990 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 00000992 B900010000          <1> 	mov	ecx, 256
    65 00000997 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 0000099C 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 0000099E 894704              <1> 	mov	[edi + 4], eax	; top
    69 000009A1 83C708              <1> 	add	edi, 8
    70 000009A4 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 000009A6 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 000009AD 5F                  <1> 	pop	edi
    75 000009AE 59                  <1> 	pop	ecx
    76 000009AF 5B                  <1> 	pop	ebx
    77 000009B0 58                  <1> 	pop	eax
    78                              <1> 
    79 000009B1 89EC                <1> 	mov	esp, ebp
    80 000009B3 5D                  <1> 	pop	ebp
    81                              <1> 
    82 000009B4 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 000009B5 9C                  <1> 	pushf
    86 000009B6 0E                  <1> 	push	cs
    87 000009B7 68[47080000]        <1> 	push	int_stop
    88                              <1> 
    89 000009BC B8[C2090000]        <1> 	mov	eax, .s0
    90 000009C1 CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 000009C2 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 000009CB 44495620203E2000    <1>
   122                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 000009D3 60                  <1> 	pusha
     3 000009D4 1E                  <1> 	push	ds
     4 000009D5 06                  <1> 	push	es
     5                              <1> 
     6 000009D6 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 000009DA 8ED8                <1> 	mov	ds, ax
     8 000009DC 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 000009DE E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 000009E0 5068[F8090000]E855- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 000009E8 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 000009EF B020                <2>  mov al, %2
    16 000009F1 E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 000009F3 07                  <1> 	pop	es
    20 000009F4 1F                  <1> 	pop	ds
    21 000009F5 61                  <1> 	popa
    22                              <1> 
    23 000009F6 CF                  <1> 	iret
    24                              <1> 
    25 000009F7 00                  <1> ALIGN	4,	db	0
    26 000009F8 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   123                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   124                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 00000A10 55                  <1> 	push	ebp
     4 00000A11 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000A13 56                  <1> 	push	esi
     7 00000A14 57                  <1> 	push	edi
     8 00000A15 53                  <1> 	push	ebx
     9                              <1> 
    10 00000A16 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000A19 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 00000A1C B800000000          <1> 	mov	eax, 0
    14 00000A21 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000A23 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000A26 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000A28 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 00000A2C 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 00000A2E 43                  <1> 	inc	ebx
    23 00000A2F 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 00000A32 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000A34 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000A39 5B                  <1> 	pop	ebx
    30 00000A3A 5F                  <1> 	pop	edi
    31 00000A3B 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000A3C 89EC                <1> 	mov	esp, ebp
    34 00000A3E 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000A3F C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 00000A40 55                  <1> 	push	ebp
    40 00000A41 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 00000A43 56                  <1> 	push	esi
    43 00000A44 53                  <1> 	push	ebx
    44 00000A45 51                  <1> 	push	ecx
    45                              <1> 
    46 00000A46 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000A49 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000A4C 89D9                <1> 	mov	ecx, ebx
    50 00000A4E 41                  <1> 	inc	ecx
    51 00000A4F 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 00000A52 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000A54 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000A56 8A450C              <1> 	mov	al, [ebp +12]
    60 00000A59 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000A5D 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 00000A60 B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000A65 59                  <1> 	pop	ecx
    66 00000A66 5B                  <1> 	pop	ebx
    67 00000A67 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000A68 89EC                <1> 	mov	esp, ebp
    70 00000A6A 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000A6B C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000A6C 55                  <1> 	push	ebp
    77 00000A6D 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 00000A6F 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 00000A70 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 00000A73 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000A76 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000A79 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000A7C 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 00000A7F B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000A84 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000A85 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000A88 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000A8B 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000A92 [BC0A0000]50E802FC- <1>
    95 00000A9A FFFF6683C414        <1>
    96 00000AA0 68[BC0A0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000AA8 52E860F9FFFF6683C4- <1>
    96 00000AB1 10                  <1>
    97                              <1> 
    98 00000AB2 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000AB5 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000AB7 61                  <1> 	popa
   104                              <1> 
   105 00000AB8 89EC                <1> 	mov	esp, ebp
   106 00000ABA 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000ABB C3                  <1> 	ret
   109                              <1> 
   110 00000ABC 2D2D00              <1> .tmp:	db	"--",0
   125                                  %include	"../modules/protect/call_gate.s"
     1                              <1> call_gate:
     2                              <1> 	;retf	4 * 4
     3                              <1> ; if SS_GATE_0 called
     4 00000ABF 55                  <1> 	push	ebp
     5 00000AC0 89E5                <1> 	mov	ebp, esp
     6                              <1> 
     7 00000AC2 60                  <1> 	pusha
     8 00000AC3 1E                  <1> 	push	ds
     9 00000AC4 06                  <1> 	push	es
    10                              <1> 
    11 00000AC5 66B81000            <1> 	mov	ax, 0x0010
    12 00000AC9 8ED8                <1> 	mov	ds, ax
    13 00000ACB 8EC0                <1> 	mov	es, ax
    14                              <1> 
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_1
    17                              <1> 	;je	.11L
    18                              <1> 
    19                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t0
    20                              <1> 	;jmp	.10E
    21                              <1> .11L:
    22                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t1
    23                              <1> .10E:
    24                              <1> 		
    25                              <1> 	;cdecl	itoa, esp, .t2, 8, 16, 0b0100
    26                              <1> 	;cdecl	draw_str, 0, 1, 0x010F, .t2
    27                              <1> 
    28                              <1> 	;cdecl	itoa, dword [ESP_COUNTER], .t3, 8, 16, 0b0100
    29                              <1> 	;cdecl	draw_str, 0, 2, 0x010F, .t3
    30                              <1> 	
    31                              <1> 
    32                              <1> 
    33                              <1> 	; ebp + 0 -- EBP
    34                              <1> 	; ebp + 4 -- EIP
    35                              <1> 	; ebp + 8 -- CS
    36 00000ACD 8B450C              <1> 	mov	eax, dword[ebp +12]
    37 00000AD0 8B5D10              <1> 	mov	ebx, dword[ebp +16]
    38 00000AD3 8B4D14              <1> 	mov	ecx, dword[ebp +20]
    39 00000AD6 8B5518              <1> 	mov	edx, dword[ebp +24]
    40 00000AD9 52515350E82CF9FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx
    40 00000AE2 6683C410            <1>
    41                              <1> 	; wrapper
    42                              <1> 
    43 00000AE6 07                  <1> 	pop	es
    44 00000AE7 1F                  <1> 	pop	ds
    45 00000AE8 61                  <1> 	popa
    46                              <1> 
    47 00000AE9 89EC                <1> 	mov	esp, ebp
    48 00000AEB 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000AEC CA1000              <1> 	retf	4 * 4	; 4 DWORDs
    51                              <1> 
    52                              <1> 
    53 00000AEF 7461736B5F3000      <1> .t0:	db	"task_0",0
    54 00000AF6 7461736B5F3100      <1> .t1:	db	"task_1",0
    55 00000AFD 2D2D2D2D2D2D2D2D00  <1> .t2:	db	"--------", 0
    56 00000B06 2D2D2D2D2D2D2D2D00  <1> .t3:	db	"--------", 0
   126                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ; system calls
     2                              <1> trap_gate_81:	; system call 81, draw_char
     3                              <1> %ifdef	USE_TEST_AND_SET
     4 00000B0F 68[5C0B0000]E84B00- <1> 	cdecl	test_and_set, IN_USE_81
     4 00000B17 00006683C404        <1>
     5                              <1> %endif
     6 00000B1D 50525153E8E9F7FFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
     6 00000B26 6683C410            <1>
     7                              <1> %ifdef	USE_TEST_AND_SET
     8 00000B2A C705[5C0B0000]0000- <1> 	mov	[IN_USE_81], dword 0
     8 00000B32 0000                <1>
     9                              <1> %endif
    10 00000B34 CF                  <1> 	iret
    11                              <1> 
    12                              <1> trap_gate_82:
    13                              <1> %ifdef	USE_TEST_AND_SET
    14 00000B35 68[600B0000]E82500- <1> 	cdecl	test_and_set, IN_USE_82
    14 00000B3D 00006683C404        <1>
    15                              <1> %endif
    16 00000B43 535251E87BF9FFFF66- <1> 	cdecl	draw_pixel, ecx, edx, ebx
    16 00000B4C 83C40C              <1>
    17                              <1> %ifdef	USE_TEST_AND_SET
    18 00000B4F C705[600B0000]0000- <1> 	mov	[IN_USE_82], dword 0
    18 00000B57 0000                <1>
    19                              <1> %endif
    20 00000B59 CF                  <1> 	iret
    21                              <1> 
    22 00000B5A 00<rept>            <1> ALIGN	4,		db	0
    23 00000B5C 00000000            <1> IN_USE_81:		dd	0
    24 00000B60 00000000            <1> IN_USE_82:		dd	0
   127                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2 00000B64 55                  <1> 	push	ebp
     3 00000B65 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000B67 50                  <1> 	push	eax
     6 00000B68 53                  <1> 	push	ebx
     7                              <1> 
     8 00000B69 B800000000          <1> 	mov	eax, 0		; set bit
     9 00000B6E 8B5D08              <1> 	mov	ebx, [ebp + 8]	; global variable
    10                              <1> 
    11                              <1> .10L:
    12 00000B71 F00FAB03            <1> 	lock	bts [ebx], eax
    13 00000B75 7307                <1> 	jnc	.10E		; we can use registers
    14                              <1> .12L:
    15 00000B77 0FA303              <1> 	bt	[ebx], eax
    16 00000B7A 72FB                <1> 	jc	.12L		; we can not use
    17                              <1> 
    18 00000B7C EBF3                <1> 	jmp	.10L
    19                              <1> .10E:
    20                              <1> 	
    21 00000B7E 5B                  <1> 	pop	ebx
    22 00000B7F 58                  <1> 	pop	eax
    23                              <1> 
    24 00000B80 89EC                <1> 	mov	esp, ebp
    25 00000B82 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000B83 C3                  <1> 	ret
    28                              <1> 
   128                                  %include	"../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 	; eax : return value
     3                              <1> 	; ebx : segment selector
     4                              <1> 
     5 00000B84 8B83[7A0D0000]      <1> 	mov	eax, [GDT + ebx + 2]
     6 00000B8A C1E008              <1> 	shl	eax, 8
     7 00000B8D 8A83[7F0D0000]      <1> 	mov	al, [GDT + ebx + 7]
     8 00000B93 C1C808              <1> 	ror	eax, 8
     9                              <1> 
    10 00000B96 C3                  <1> 	ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 	; eax : tss address
    14 00000B97 DD7068              <1> 	fnsave	[eax + 104]
    15 00000B9A C780D4000000010000- <1> 	mov	[eax + 104 + 108], dword 1	; store flag or present flag(?)
    15 00000BA3 00                  <1>
    16                              <1> 	
    17 00000BA4 C3                  <1> 	ret
    18                              <1> 
    19                              <1> load_fpu_context:
    20 00000BA5 83B8D400000000      <1> 	cmp	[eax + 104 + 108], dword 0
    21 00000BAC 7505                <1> 	jne	.10F
    22 00000BAE 9BDBE3              <1> 	finit					; not initialized yet
    23 00000BB1 EB03                <1> 	jmp	.10E
    24                              <1> .10F:
    25 00000BB3 DD6068              <1> 	frstor	[eax + 104]
    26                              <1> .10E:
    27 00000BB6 C3                  <1> 	ret
    28                              <1> 
    29                              <1> int_nm:
    30 00000BB7 60                  <1> 	pusha
    31 00000BB8 06                  <1> 	push	es
    32 00000BB9 1E                  <1> 	push	ds
    33                              <1> 
    34 00000BBA 66B81000            <1> 	mov	ax, DS_KERNEL
    35 00000BBE 8EC0                <1> 	mov	es, ax
    36 00000BC0 8ED8                <1> 	mov	ds, ax
    37                              <1> 
    38 00000BC2 0F06                <1> 	clts
    39                              <1> 
    40 00000BC4 8B3D[100C0000]      <1> 	mov	edi, [.last_tss]
    41 00000BCA 0F00CE              <1> 	str	esi
    42 00000BCD 83E6F8              <1> 	and	esi, ~0x0007	; exclude TI,RPL bits
    43                              <1> 
    44 00000BD0 83FF00              <1> 	cmp	edi, 0		; first use
    45 00000BD3 7420                <1> 	je	.10F
    46                              <1> 
    47 00000BD5 39FE                <1> 	cmp	esi, edi
    48 00000BD7 741A                <1> 	je	.12E
    49                              <1> 
    50 00000BD9 FA                  <1> 	cli
    51                              <1> 
    52 00000BDA 89FB                <1> 	mov	ebx, edi
    53 00000BDC E8A3FFFFFF          <1> 	call	get_tss_base	; eax is address to tss
    54 00000BE1 E8B1FFFFFF          <1> 	call	save_fpu_context; eax used here
    55                              <1> 
    56 00000BE6 89F3                <1> 	mov	ebx, esi
    57 00000BE8 E897FFFFFF          <1> 	call	get_tss_base
    58 00000BED E8B3FFFFFF          <1> 	call	load_fpu_context
    59                              <1> 
    60 00000BF2 FB                  <1> 	sti
    61                              <1> .12E:
    62 00000BF3 EB0E                <1> 	jmp	.10E
    63                              <1> .10F:
    64 00000BF5 FA                  <1> 	cli
    65                              <1> 
    66 00000BF6 89F3                <1> 	mov	ebx, esi
    67 00000BF8 E887FFFFFF          <1> 	call	get_tss_base
    68 00000BFD E8A3FFFFFF          <1> 	call	load_fpu_context
    69                              <1> 
    70 00000C02 FB                  <1> 	sti
    71                              <1> .10E:
    72                              <1> 
    73 00000C03 8935[100C0000]      <1> 	mov	[.last_tss], esi
    74                              <1> 
    75 00000C09 1F                  <1> 	pop	ds
    76 00000C0A 07                  <1> 	pop	es
    77 00000C0B 61                  <1> 	popa
    78                              <1> 
    79 00000C0C CF                  <1> 	iret
    80                              <1> 
    81 00000C0D 00<rept>            <1> ALIGN	4,	db	0
    82 00000C10 00000000            <1> .last_tss:	dd	0
   129                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2 00000C14 55                  <1> 	push	ebp
     3 00000C15 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000C17 50                  <1> 	push	eax
     6 00000C18 51                  <1> 	push	ecx
     7                              <1> 
     8 00000C19 8B4D08              <1> 	mov	ecx, [ebp + 8]
     9 00000C1C A1[D40C0000]        <1> 	mov	eax, [TIMER_COUNT]
    10                              <1> .10L:
    11 00000C21 3905[D40C0000]      <1> 	cmp	[TIMER_COUNT], eax
    12 00000C27 74F8                <1> 	je	.10L
    13 00000C29 40                  <1> 	inc	eax		; per 10ms
    14 00000C2A E2F5                <1> 	loop	.10L		; 10ms * ecx]
    15                              <1> 
    16 00000C2C 59                  <1> 	pop	ecx
    17 00000C2D 58                  <1> 	pop	eax
    18                              <1> 
    19 00000C2E 89EC                <1> 	mov	esp, ebp
    20 00000C30 5D                  <1> 	pop	ebp
    21                              <1> 
    22 00000C31 C3                  <1> 	ret
    23                              <1> 
   130                                  %include	"modules/paging.s"
     1                              <1> page_set_4m:
     2 00000C32 55                  <1> 	push	ebp
     3 00000C33 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000C35 60                  <1> 	pusha
     6                              <1> 
     7 00000C36 FC                  <1> 	cld
     8 00000C37 8B7D08              <1> 	mov	edi, [ebp + 8]
     9 00000C3A B800000000          <1> 	mov	eax, 0x00000000		; null page directory
    10 00000C3F B900040000          <1> 	mov	ecx, 1024		; 1024 directories
    11 00000C44 F3AB                <1> 	rep	stosd
    12                              <1> 
    13 00000C46 89F8                <1> 	mov	eax, edi		; we use memory after page directory
    14 00000C48 2500F0FFFF          <1> 	and	eax, ~0x0000_0FFF
    15 00000C4D 83C807              <1> 	or	eax, 0b0000_0111	; enable read write
    16 00000C50 898700F0FFFF        <1> 	mov	[edi - (1024 * 4)], eax
    17                              <1> 	
    18 00000C56 B807000000          <1> 	mov	eax, 0x0000_0007
    19 00000C5B B900040000          <1> 	mov	ecx, 1024		; 1024 pages
    20                              <1> .10L:
    21 00000C60 AB                  <1> 	stosd
    22 00000C61 0500100000          <1> 	add	eax, 0x0000_1000
    23 00000C66 E2F8                <1> 	loop	.10L
    24                              <1> 
    25 00000C68 61                  <1> 	popa
    26                              <1> 
    27 00000C69 89EC                <1> 	mov	esp, ebp
    28 00000C6B 5D                  <1> 	pop	ebp
    29                              <1> 
    30 00000C6C C3                  <1> 	ret
    31                              <1> 
    32                              <1> init_page:
    33 00000C6D 60                  <1> 	pusha
    34 00000C6E 6800501000E8BAFFFF- <1> 	cdecl	page_set_4m, CR3_BASE
    34 00000C77 FF6683C404          <1>
    35 00000C7C 61                  <1> 	popa
    36                              <1> 
    37 00000C7D C3                  <1> 	ret
   131                                  ;%include	"../modules/protect/int_timer.s"
   132                                  %include	"modules/my_int_timer.s"
     1                              <1> int_timer:
     2 00000C7E 60                  <1> 	pushad
     3 00000C7F 06                  <1> 	push	es
     4 00000C80 1E                  <1> 	push	ds
     5                              <1> 
     6 00000C81 66B81000            <1> 	mov	ax, 0x10
     7 00000C85 8ED8                <1> 	mov	ds, ax
     8 00000C87 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000C89 FF05[D40C0000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 00000C8F B020                <2>  mov al, %2
    12 00000C91 E620                <2>  out %1, al
    13                              <1> 	
    14 00000C93 660F00C8            <1> 	str	ax
    15 00000C97 6683F820            <1> 	cmp	ax, SS_TASK_0
    16 00000C9B 7415                <1> 	je	.11L
    17 00000C9D 6683F828            <1> 	cmp	ax, SS_TASK_1
    18 00000CA1 7418                <1> 	je	.12L
    19 00000CA3 6683F830            <1> 	cmp	ax, SS_TASK_2
    20 00000CA7 741B                <1> 	je	.13L
    21                              <1> 
    22 00000CA9 EA000000002000      <1> 	jmp	SS_TASK_0:0
    23 00000CB0 EB1B                <1> 	jmp	.10E
    24                              <1> .11L:
    25 00000CB2 EA000000002800      <1> 	jmp	SS_TASK_1:0
    26 00000CB9 EB12                <1> 	jmp	.10E
    27                              <1> .12L:
    28 00000CBB EA000000003000      <1> 	jmp	SS_TASK_2:0
    29 00000CC2 EB09                <1> 	jmp	.10E
    30                              <1> .13L:
    31 00000CC4 EA000000003800      <1> 	jmp	SS_TASK_3:0
    32 00000CCB EB00                <1> 	jmp	.10E
    33                              <1> .10E:
    34                              <1> 
    35 00000CCD 1F                  <1> 	pop	ds
    36 00000CCE 07                  <1> 	pop	es
    37 00000CCF 61                  <1> 	popad
    38                              <1> 	
    39 00000CD0 CF                  <1> 	iret
    40                              <1> 
    41 00000CD1 00<rept>            <1> ALIGN	4,	db	0
    42 00000CD4 0000000000000000    <1> TIMER_COUNT:	dq	0
    43                              <1> 
    44                              <1> 
    45                              <1> int_en_timer:
    46 00000CDC 55                  <1> 	push	ebp
    47 00000CDD 89E5                <1> 	mov	ebp, esp
    48                              <1> 	
    49 00000CDF 50                  <1> 	push	eax
    50                              <1> 
    51                              <1> 	outp	0x43, 0b00_11_010_0
    51 00000CE0 B034                <2>  mov al, %2
    51 00000CE2 E643                <2>  out %1, al
    52                              <1> 	; counter 0
    53                              <1> 	; access mode, bottom -> top
    54                              <1> 	; mode, 2
    55                              <1> 	; bcd
    56                              <1> 
    57                              <1> 	outp	0x40, 0x9C
    57 00000CE4 B09C                <2>  mov al, %2
    57 00000CE6 E640                <2>  out %1, al
    58                              <1> 	outp	0x40, 0x2E
    58 00000CE8 B02E                <2>  mov al, %2
    58 00000CEA E640                <2>  out %1, al
    59                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    60                              <1> 
    61 00000CEC 58                  <1> 	pop	eax
    62                              <1> 
    63 00000CED 89EC                <1> 	mov 	esp, ebp
    64 00000CEF 5D                  <1> 	pop	ebp
    65                              <1> 
    66 00000CF0 C3                  <1> 	ret
    67                              <1> 
    68                              <1> 
   133                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00000CF1 55                  <1> 	push	ebp
     3 00000CF2 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000CF4 50                  <1> 	push	eax
     6                              <1> 
     7 00000CF5 A1[D40C0000]        <1> 	mov	eax, [TIMER_COUNT]
     8 00000CFA C1E808              <1> 	shr	eax, 8
     9 00000CFD 3B05[280D0000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 00000D03 741E                <1> 	je	.10E
    11                              <1> 
    12 00000D05 A3[280D0000]        <1> 	mov	[.index], eax
    13 00000D0A 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 00000D0D 8A80[2C0D0000]      <1> 	mov	al, [.table + eax]
    16 00000D13 506A0F6A1D6A00E8F0- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 00000D1C F5FFFF6683C410      <1>
    17                              <1> .10E:
    18 00000D23 58                  <1> 	pop	eax
    19                              <1> 
    20 00000D24 89EC                <1> 	mov	esp, ebp
    21 00000D26 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00000D27 C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000D28 00000000            <1> .index:		dd	0
    27 00000D2C 7C2F2D5C            <1> .table:		dd	"|/-\"
   134                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 00000D30 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 00000D38 FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 00000D40 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 00000D48 FFFF000000FACF00    <1> .cs_task_1:	dq	0x00CF_FA00_0000_FFFF
     6 00000D50 FFFF000000F2CF00    <1> .ds_task_1:	dq	0x00CF_F200_0000_FFFF
     7 00000D58 FFFF000000FACF00    <1> .cs_task_2:	dq	0x00CF_FA00_0000_FFFF
     8 00000D60 FFFF000000F2CF00    <1> .ds_task_2:	dq	0x00CF_F200_0000_FFFF
     9 00000D68 FFFF000000FACF00    <1> .cs_task_3:	dq	0x00CF_FA00_0000_FFFF
    10 00000D70 FFFF000000F2CF00    <1> .ds_task_3:	dq	0x00CF_F200_0000_FFFF
    11                              <1> .end:
    12                              <1> 
    13                              <1> ; ldt indexes
    14                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    15                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    16                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4 | 3	; offset | (use LDT bit) | (level = 3)
    17                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4 | 3	
    18                              <1> CS_TASK_2:	equ	(.cs_task_2 - LDT) | 4 | 3
    19                              <1> DS_TASK_2:	equ	(.ds_task_2 - LDT) | 4 | 3	
    20                              <1> CS_TASK_3:	equ	(.cs_task_3 - LDT) | 4 | 3
    21                              <1> DS_TASK_3:	equ	(.ds_task_3 - LDT) | 4 | 3	
    22                              <1> 
    23                              <1> LDT_LIMIT	equ	.end - LDT - 1
    24                              <1> 
    25                              <1> 
    26 00000D78 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    27 00000D80 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    28 00000D88 FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    29 00000D90 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    30 00000D98 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    31 00000DA0 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    32 00000DA8 6700000000890000    <1> .tss_2:		dq	0x0000_8900_0000_0067
    33 00000DB0 6700000000890000    <1> .tss_3:		dq	0x0000_8900_0000_0067
    34 00000DB8 0000080004EC0000    <1> .call_gate:	dq	0x0000_EC04_0008_0000
    35                              <1> .end:
    36                              <1> 
    37                              <1> ; gdt indexes
    38                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    39                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    40                              <1> SS_LDT		equ	.ldt - GDT
    41                              <1> SS_TASK_0	equ	.tss_0 - GDT		; jump point
    42                              <1> SS_TASK_1	equ	.tss_1 - GDT
    43                              <1> SS_TASK_2	equ	.tss_2 - GDT
    44                              <1> SS_TASK_3	equ	.tss_3 - GDT
    45                              <1> SS_GATE_0	equ	.call_gate - GDT
    46                              <1> 
    47 00000DC0 4700                <1> GDTR:		dw	GDT.end - GDT - 1
    48 00000DC2 [780D0000]          <1> 		dd	GDT
    49                              <1> 
    50                              <1> TSS_0:
    51 00000DC6 00000000            <1> .link:    dd 0
    52 00000DCA 00321000            <1> .esp0:    dd SP_TASK_0 - STACK_SIZE / 2
    53 00000DCE 10000000            <1> .ss0:     dd DS_KERNEL
    54 00000DD2 00000000            <1> .esp1:    dd 0
    55 00000DD6 00000000            <1> .ss1:     dd 0
    56 00000DDA 00000000            <1> .esp2:    dd 0
    57 00000DDE 00000000            <1> .ss2:     dd 0
    58 00000DE2 00501000            <1> .cr3:     dd CR3_BASE
    59 00000DE6 00000000            <1> .eip:     dd 0
    60 00000DEA 00000000            <1> .eflags:  dd 0
    61 00000DEE 00000000            <1> .eax:     dd 0
    62 00000DF2 00000000            <1> .ecx:     dd 0
    63 00000DF6 00000000            <1> .edx:     dd 0
    64 00000DFA 00000000            <1> .ebx:     dd 0
    65 00000DFE 00000000            <1> .esp:     dd 0
    66 00000E02 00000000            <1> .ebp:     dd 0
    67 00000E06 00000000            <1> .esi:     dd 0
    68 00000E0A 00000000            <1> .edi:     dd 0
    69 00000E0E 00000000            <1> .es:      dd 0
    70 00000E12 00000000            <1> .cs:      dd 0
    71 00000E16 00000000            <1> .ss:      dd 0
    72 00000E1A 00000000            <1> .ds:      dd 0
    73 00000E1E 00000000            <1> .fs:      dd 0
    74 00000E22 00000000            <1> .gs:      dd 0
    75 00000E26 00000000            <1> .ldt:     dd 0
    76 00000E2A 00000000            <1> .io:      dd 0
    77 00000E2E 00<rept>            <1> .fp_save: times 108 + 4 db 0
    78                              <1> 
    79                              <1> TSS_1:
    80 00000E9E 00000000            <1> .link:    dd 0
    81 00000EA2 00361000            <1> .esp0:    dd SP_TASK_1 - STACK_SIZE / 2
    82 00000EA6 10000000            <1> .ss0:     dd DS_KERNEL
    83 00000EAA 00000000            <1> .esp1:    dd 0
    84 00000EAE 00000000            <1> .ss1:     dd 0
    85 00000EB2 00000000            <1> .esp2:    dd 0
    86 00000EB6 00000000            <1> .ss2:     dd 0
    87 00000EBA 00501000            <1> .cr3:     dd CR3_BASE
    88 00000EBE [26110000]          <1> .eip:     dd task_1	; start at task_1
    89 00000EC2 02020000            <1> .eflags:  dd 0x0202
    90 00000EC6 00000000            <1> .eax:     dd 0
    91 00000ECA 00000000            <1> .ecx:     dd 0
    92 00000ECE 00000000            <1> .edx:     dd 0
    93 00000ED2 00000000            <1> .ebx:     dd 0
    94 00000ED6 00381000            <1> .esp:     dd SP_TASK_1
    95 00000EDA 00000000            <1> .ebp:     dd 0
    96 00000EDE 00000000            <1> .esi:     dd 0
    97 00000EE2 00000000            <1> .edi:     dd 0
    98 00000EE6 27000000            <1> .es:      dd DS_TASK_1
    99 00000EEA 1F000000            <1> .cs:      dd CS_TASK_1
   100 00000EEE 27000000            <1> .ss:      dd DS_TASK_1
   101 00000EF2 27000000            <1> .ds:      dd DS_TASK_1
   102 00000EF6 27000000            <1> .fs:      dd DS_TASK_1
   103 00000EFA 27000000            <1> .gs:      dd DS_TASK_1
   104 00000EFE 18000000            <1> .ldt:     dd SS_LDT
   105 00000F02 00000000            <1> .io:      dd 0
   106 00000F06 00<rept>            <1> .fp_save: times 108 + 4 db 0
   107                              <1> 
   108                              <1> TSS_2:
   109 00000F76 00000000            <1> .link:    dd 0
   110 00000F7A 003A1000            <1> .esp0:    dd SP_TASK_2 - STACK_SIZE / 2
   111 00000F7E 10000000            <1> .ss0:     dd DS_KERNEL
   112 00000F82 00000000            <1> .esp1:    dd 0
   113 00000F86 00000000            <1> .ss1:	    dd 0
   114 00000F8A 00000000            <1> .esp2:    dd 0
   115 00000F8E 00000000            <1> .ss2:     dd 0
   116 00000F92 00501000            <1> .cr3:     dd CR3_BASE
   117 00000F96 [5B110000]          <1> .eip:     dd task_2	; start at task_2
   118 00000F9A 02020000            <1> .eflags:  dd 0x0202
   119 00000F9E 00000000            <1> .eax:     dd 0
   120 00000FA2 00000000            <1> .ecx:     dd 0
   121 00000FA6 00000000            <1> .edx:     dd 0
   122 00000FAA 00000000            <1> .ebx:			dd 0
   123 00000FAE 003C1000            <1> .esp:			dd SP_TASK_2
   124 00000FB2 00000000            <1> .ebp:			dd 0
   125 00000FB6 00000000            <1> .esi:			dd 0
   126 00000FBA 00000000            <1> .edi:			dd 0
   127 00000FBE 37000000            <1> .es:			dd DS_TASK_2
   128 00000FC2 2F000000            <1> .cs:			dd CS_TASK_2
   129 00000FC6 37000000            <1> .ss:			dd DS_TASK_2
   130 00000FCA 37000000            <1> .ds:			dd DS_TASK_2
   131 00000FCE 37000000            <1> .fs:			dd DS_TASK_2
   132 00000FD2 37000000            <1> .gs:			dd DS_TASK_2
   133 00000FD6 18000000            <1> .ldt:			dd SS_LDT
   134 00000FDA 00000000            <1> .io:			dd 0
   135 00000FDE 00<rept>            <1> .fp_save: times 108 + 4 db 0
   136                              <1> 
   137                              <1> TSS_3:
   138 0000104E 00000000            <1> .link:    dd 0
   139 00001052 003E1000            <1> .esp0:    dd SP_TASK_3 - 512
   140 00001056 10000000            <1> .ss0:     dd DS_KERNEL
   141 0000105A 00000000            <1> .esp1:    dd 0
   142 0000105E 00000000            <1> .ss1:     dd 0
   143 00001062 00000000            <1> .esp2:    dd 0
   144 00001066 00000000            <1> .ss2:     dd 0
   145 0000106A 00501000            <1> .cr3:     dd CR3_BASE
   146 0000106E [2C120000]          <1> .eip:     dd task_3
   147 00001072 02020000            <1> .eflags:  dd 0x0202
   148 00001076 00000000            <1> .eax:     dd 0
   149 0000107A 00000000            <1> .ecx:     dd 0
   150 0000107E 00000000            <1> .edx:     dd 0
   151 00001082 00000000            <1> .ebx:     dd 0
   152 00001086 00401000            <1> .esp:     dd SP_TASK_3
   153 0000108A 00000000            <1> .ebp:     dd 0
   154 0000108E 00000000            <1> .esi:     dd 0
   155 00001092 00000000            <1> .edi:     dd 0
   156 00001096 47000000            <1> .es:      dd DS_TASK_3
   157 0000109A 3F000000            <1> .cs:      dd CS_TASK_3
   158 0000109E 47000000            <1> .ss:      dd DS_TASK_3
   159 000010A2 47000000            <1> .ds:      dd DS_TASK_3
   160 000010A6 47000000            <1> .fs:      dd DS_TASK_3
   161 000010AA 47000000            <1> .gs:      dd DS_TASK_3
   162 000010AE 18000000            <1> .ldt:     dd SS_LDT
   163 000010B2 00000000            <1> .io:      dd 0
   164 000010B6 00<rept>            <1> .fp_save: times 108 + 4 db 0
   165                              <1> 
   135                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 00001126 68[54110000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 0000112E 006A3FE8D8F2FFFF66- <1>
     2 00001137 83C410              <1>
     3                              <1> 	; cdecl	itoa, esp, .t0, 8, 16, 0b0100
     4                              <1> 	; cdecl	draw_str, 0, 2, 0x010F, .s0
     5                              <1> 	;mov	[ESP_COUNTER], esp
     6                              <1> 	; task_1 dose not have level 0
     7                              <1> 	; cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
     8                              <1> .10L:
     9                              <1> 	;cdecl	itoa, esp, .t0, 8, 16, 0b0100	
    10                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .t0
    11                              <1> 	;mov	[ESP_COUNTER], esp
    12                              <1> 	
    13                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
    14                              <1> 	
    15 0000113A A1[58020000]        <1> 	mov	eax, [RTC_TIME]
    16 0000113F 5068000700006A006A- <1> 	cdecl	draw_time, 72, 0, 0x0700, eax
    16 00001148 48E8DBF5FFFF6683C4- <1>
    16 00001151 10                  <1>
    17                              <1> 
    18                              <1> 	; jmp	SS_TASK_0:0	
    19                              <1> 
    20 00001152 EBE6                <1> 	jmp	.10L
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24 00001154 5461736B2D3100      <1> .s0	db	"Task-1", 0
   136                                  %include	"task/task_2.s"
     1                              <1> task_2:
     2 0000115B 68[1E120000]6A076A- <1> 	cdecl	draw_str, 63, 1, 0x07, .s0
     2 00001163 016A3FE8A3F2FFFF66- <1>
     2 0000116C 83C410              <1>
     3                              <1> 	
     4 0000116F DB05[0C120000]      <1> 	fild	dword [.c1000]
     5 00001175 D9EB                <1> 	fldpi
     6 00001177 DA35[10120000]      <1> 	fidiv	dword [.c180]
     7 0000117D D9EB                <1> 	fldpi
     8 0000117F DCC0                <1> 	fadd	st0, st0
     9 00001181 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 00001183 D8C2                <1> 	fadd	st0, st2
    14 00001185 D9F8                <1> 	fprem
    15 00001187 D9C0                <1> 	fld	st0	; copy st0
    16 00001189 D9FE                <1> 	fsin
    17 0000118B D8CC                <1> 	fmul	st0, st4
    18 0000118D DF35[14120000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 00001193 A1[14120000]        <1> 	mov	eax, [.bcd]
    21 00001198 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 0000119A 250F0F0000          <1> 	and	eax, 0x0F0F
    24 0000119F 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 000011A4 C1EB04              <1> 	shr	ebx, 4
    27 000011A7 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 000011AD 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 000011B3 883D[26120000]      <1> 	mov	[.s2 + 0], bh
    31 000011B9 8825[28120000]      <1> 	mov	[.s3 + 0], ah
    32 000011BF 881D[29120000]      <1> 	mov	[.s3 + 1], bl
    33 000011C5 A2[2A120000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 000011CA B807000000          <1> 	mov	eax, 7		; sign bit
    36 000011CF 0FA305[1D120000]    <1> 	bt	[.bcd + 9], eax
    37 000011D6 7209                <1> 	jc	.10F
    38                              <1> 	
    39 000011D8 C605[25120000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 000011DF EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 000011E1 C605[25120000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 000011E8 68[25120000]6A076A- <1> 	cdecl	draw_str, 72, 1, 0x07, .s1
    44 000011F0 016A48E816F2FFFF66- <1>
    44 000011F9 83C410              <1>
    45                              <1> 	
    46 000011FC 6A0AE811FAFFFF6683- <1> 	cdecl	wait_tick, 10
    46 00001205 C404                <1>
    47                              <1> 
    48 00001207 E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 0000120C E8030000            <1> .c1000	dd	1000
    53 00001210 B4000000            <1> .c180	dd	180
    54 00001214 00<rept>            <1> .bcd:	times	10	db	0x00
    55 0000121E 5461736B2D3200      <1> .s0	db	"Task-2", 0
    56 00001225 2D                  <1> .s1:	db	"-"
    57 00001226 302E                <1> .s2:	db	"0."
    58 00001228 30303000            <1> .s3:	db	"000", 0
   137                                  %include	"task/task_3.s"
     1                              <1> task_3:
     2                              <1> 	; push	ebp
     3 0000122C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000122E 6A00                <1> 	push	dword 0	; origin x
     6 00001230 6A00                <1> 	push	dword 0	; origin y
     7 00001232 6A00                <1> 	push	dword 0	; 
     8 00001234 6A00                <1> 	push	dword 0
     9 00001236 6A00                <1> 	push	dword 0
    10                              <1> 
    11                              <1> 
    12 00001238 BE[2C130000]        <1> 	mov	esi, DRAM_PARAM
    13                              <1> 
    14 0000123D 8B06                <1> 	mov	eax, [esi + rose.x0]
    15 0000123F 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    16                              <1> 
    17 00001242 C1E803              <1> 	shr	eax, 3		; eax is x
    18 00001245 C1EB04              <1> 	shr	ebx, 4		; ebx is y
    19 00001248 4B                  <1> 	dec	ebx
    20 00001249 8B4E24              <1> 	mov	ecx, [esi + rose.color_s]
    21 0000124C 8D5630              <1> 	lea	edx, [esi + rose.title]
    22                              <1> 
    23 0000124F 52515350E8B6F1FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx	; draw title
    23 00001258 6683C410            <1>
    24                              <1> 
    25 0000125C 8B06                <1> 	mov	eax, [esi + rose.x0]
    26 0000125E 8B5E08              <1> 	mov	ebx, [esi + rose.x1]
    27 00001261 29C3                <1> 	sub	ebx, eax
    28 00001263 D1EB                <1> 	shr	ebx, 1			; half of size
    29 00001265 01C3                <1> 	add	ebx, eax		; origin x
    30 00001267 895DFC              <1> 	mov	[ebp - 4], ebx
    31                              <1> 
    32 0000126A 8B4604              <1> 	mov	eax, [esi + rose.y0]
    33 0000126D 8B5E0C              <1> 	mov	ebx, [esi + rose.y1]
    34 00001270 29C3                <1> 	sub	ebx, eax
    35 00001272 D1EB                <1> 	shr	ebx, 1
    36 00001274 01C3                <1> 	add	ebx, eax
    37 00001276 895DF8              <1> 	mov	[ebp - 8], ebx
    38                              <1> 
    39 00001279 8B06                <1> 	mov	eax, [esi + rose.x0]	; x start
    40 0000127B 8B5DF8              <1> 	mov	ebx, [ebp - 8]		; y
    41 0000127E 8B4E08              <1> 	mov	ecx, [esi + rose.x1]	; x end
    42                              <1> 
    43 00001281 FF761853515350E8FA- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; x axis
    43 0000128A F2FFFF6683C414      <1>
    44                              <1> 
    45 00001291 8B4604              <1> 	mov	eax, [esi + rose.y0]	; y start
    46 00001294 8B5DFC              <1> 	mov	ebx, [ebp - 4]		; x
    47 00001297 8B4E0C              <1> 	mov	ecx, [esi + rose.y1]	; y end
    48                              <1> 
    49 0000129A FF761C51535053E8E1- <1> 	cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
    49 000012A3 F2FFFF6683C414      <1>
    50                              <1> 
    51 000012AA 8B06                <1> 	mov	eax, [esi + rose.x0]
    52 000012AC 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    53 000012AF 8B4E08              <1> 	mov	ecx, [esi + rose.x1]
    54 000012B2 8B560C              <1> 	mov	edx, [esi + rose.y1]
    55                              <1> 
    56 000012B5 FF762052515350E877- <1> 	cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
    56 000012BE F3FFFF6683C414      <1>
    57                              <1> 
    58 000012C5 8B4608              <1> 	mov	eax, [esi + rose.x1]
    59 000012C8 2B06                <1> 	sub	eax, [esi + rose.x0]
    60 000012CA D1E8                <1> 	shr	eax, 1
    61 000012CC 89C3                <1> 	mov	ebx, eax
    62 000012CE C1EB04              <1> 	shr	ebx, 4
    63 000012D1 29D8                <1> 	sub	eax, ebx
    64                              <1> 	; eax -= eax / 16
    65                              <1> 
    66 000012D3 FF7614FF761050E88D- <1> 	cdecl	fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
    66 000012DC 0000006683C40C      <1>
    67                              <1> .10L:
    68                              <1> 
    69 000012E3 8D5DF4              <1> 	lea	ebx, [ebp - 12]	; x position address
    70 000012E6 8D4DF0              <1> 	lea	ecx, [ebp - 16]	; y position address
    71 000012E9 8B45EC              <1> 	mov	eax, [ebp - 20]	; t
    72                              <1> 
    73 000012EC 505153E89200000066- <1> 	cdecl	fpu_rose_update, ebx, ecx, eax
    73 000012F5 83C40C              <1>
    74                              <1> 
    75 000012F8 BA00000000          <1> 	mov	edx, 0
    76 000012FD 40                  <1> 	inc	eax
    77 000012FE BBA08C0000          <1> 	mov	ebx, 360 * 100
    78 00001303 F7F3                <1> 	div	ebx
    79                              <1> 	; EDX:EAX div ebx. EAX : /, EDX : %.
    80 00001305 8955EC              <1> 	mov	[ebp -20], edx
    81                              <1> 
    82 00001308 8B4DF4              <1> 	mov	ecx, [ebp -12]	; x = 0
    83 0000130B 8B55F0              <1> 	mov	edx, [ebp -16]	; y = 0
    84                              <1> 
    85 0000130E 034DFC              <1> 	add	ecx, [ebp - 4]	; x += X
    86 00001311 0355F8              <1> 	add	edx, [ebp - 8]	; t += Y
    87                              <1> 
    88 00001314 8B5E28              <1> 	mov	ebx, [esi + rose.color_f]
    89 00001317 CD82                <1> 	int	0x82		; draw_pixel at (ecx, edx). color is ebx
    90                              <1> 
    91 00001319 6A02E8F4F8FFFF6683- <1> 	cdecl	wait_tick, 2
    91 00001322 C404                <1>
    92                              <1> 
    93 00001324 8B5E2C              <1> 	mov	ebx, [esi + rose.color_b]
    94 00001327 CD82                <1> 	int	0x82
    95                              <1> 	
    96 00001329 EBB8                <1> 	jmp	.10L
    97                              <1> 
    98 0000132B 00                  <1> ALIGN	4,	db	0
    99                              <1> 
   100                              <1> DRAM_PARAM:
   101                              <1> 	istruc	rose
   102 0000132C 10000000            <1> 		at	rose.x0,	dd	16
   103 00001330 20000000            <1> 		at	rose.y0,	dd	32
   104 00001334 A0010000            <1> 		at	rose.x1,	dd	416
   105 00001338 B0010000            <1> 		at	rose.y1,	dd	432
   106                              <1> 
   107 0000133C 02000000            <1> 		at	rose.n,		dd	2
   108 00001340 01000000            <1> 		at	rose.d,		dd	1
   109                              <1> 
   110 00001344 07000000            <1> 		at	rose.color_x,	dd	0x0007
   111 00001348 07000000            <1> 		at	rose.color_y,	dd	0x0007
   112 0000134C 0F000000            <1> 		at	rose.color_z,	dd	0x000F
   113 00001350 0F030000            <1> 		at	rose.color_s,	dd	0x030F
   114 00001354 0F000000            <1> 		at	rose.color_f,	dd	0x000F
   115 00001358 03000000            <1> 		at	rose.color_b,	dd	0x0003
   116                              <1> 
   117 0000135C 5461736B2D3300      <1> 		at	rose.title,	db	"Task-3", 0
   118 00001363 00<rept>            <1> 	iend
   119                              <1> 
   120                              <1> 
   121                              <1> fpu_rose_init:	;	fpu_rose_init(A,n,d)
   122 0000136C 55                  <1> 	push	ebp
   123 0000136D 89E5                <1> 	mov	ebp, esp
   124                              <1> 
   125 0000136F 68B4000000          <1> 	push	dword 180
   126                              <1> 
   127 00001374 D9EB                <1> 	fldpi
   128 00001376 DA75FC              <1> 	fidiv	dword [ebp - 4]	; 180
   129 00001379 DB450C              <1> 	fild	dword [ebp +12]	; n
   130 0000137C DA7510              <1> 	fidiv	dword [ebp +16]	; n / d
   131 0000137F DB4508              <1> 	fild	dword [ebp + 8]	; A
   132                              <1> 
   133 00001382 89EC                <1> 	mov	esp, ebp
   134 00001384 5D                  <1> 	pop	ebp
   135                              <1> 
   136 00001385 C3                  <1> 	ret
   137                              <1> 
   138                              <1> fpu_rose_update:	;	fpu_rose_update(px, py, t)
   139                              <1> ; px,py is address. t is angle
   140 00001386 55                  <1> 	push	ebp
   141 00001387 89E5                <1> 	mov	ebp, esp
   142                              <1> 
   143 00001389 50                  <1> 	push	eax
   144 0000138A 53                  <1> 	push	ebx
   145                              <1> 
   146 0000138B 8B4508              <1> 	mov	eax, [ebp + 8]
   147 0000138E 8B5D0C              <1> 	mov	ebx, [ebp +12]
   148                              <1> 
   149 00001391 DB4510              <1> 	fild	dword [ebp +16]
   150 00001394 D8CB                <1> 	fmul	st0, st3		; st0 is degree, st3 is radian / degree. st0 is radian
   151 00001396 D9C0                <1> 	fld	st0
   152                              <1> 
   153 00001398 D9FB                <1> 	fsincos
   154 0000139A D9CA                <1> 	fxch	st2			; change st0, st2
   155 0000139C D8CC                <1> 	fmul	st0, st4		; st0 = kθ
   156 0000139E D9FE                <1> 	fsin				; st0 = sin(kθ)
   157 000013A0 D8CB                <1> 	fmul	st0, st3		; st0 = Asin(kθ)
   158                              <1> 
   159 000013A2 D9CA                <1> 	fxch	st2
   160 000013A4 D8CA                <1> 	fmul	st0, st2
   161 000013A6 DB18                <1> 	fistp	dword [eax]		; store x pos
   162                              <1> 
   163 000013A8 DEC9                <1> 	fmulp	st1, st0
   164 000013AA D9E0                <1> 	fchs				; convert to display coordinate
   165 000013AC DB1B                <1> 	fistp	dword [ebx]		; store y pos
   166                              <1> 
   167 000013AE 5B                  <1> 	pop	ebx
   168 000013AF 58                  <1> 	pop	eax
   169                              <1> 
   170 000013B0 89EC                <1> 	mov	esp, ebp
   171 000013B2 5D                  <1> 	pop	ebp
   172                              <1> 
   173 000013B3 C3                  <1> 	ret
   174                              <1> 
   175                              <1> 
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   138                                  ;%include	"../../../../testOS/src/39_rose/tasks/task_3.s"
   139                                  
   140                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   141                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   142                                  
   143                                  
   144                                  
   145 000013B4 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
