     1                                  %define		USE_SYSTEM_CALL
     2                                  %define		USE_TEST_AND_SET
     3                                  
     4                                  %include	"../include/define.s"
     1                              <1> VECT_BASE		equ	0x0010_0000
     2                              <1> KERNEL_LOAD		equ	0x0010_1000
     3                              <1> STACK_BASE		equ	0x0010_3000
     4                              <1> CR3_BASE		equ	0x0010_5000
     5                              <1> 
     6                              <1> BOOT_LOAD		equ	0x7c00
     7                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     8                              <1> 
     9                              <1> BOOT_SIZE		equ	(1024 * 8)
    10                              <1> SECT_SIZE		equ	(512)
    11                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
    12                              <1> 
    13                              <1> E820_RECORD_SIZE	equ	20
    14                              <1> 
    15                              <1> KERNEL_SIZE		equ	(1024 * 8)
    16                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    17                              <1> 
    18                              <1> 
    19                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    20                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    21                              <1> 
    22                              <1> struc			ring_buff		; for keyboard
    23 00000000 <res 00000004>      <1> 				.rp	resd	1
    24 00000004 <res 00000004>      <1> 				.wp	resd	1
    25 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    26                              <1> endstruc
    27                              <1> 
    28                              <1> struc			rose
    29 00000000 <res 00000004>      <1> 				.x0		resd	1
    30 00000004 <res 00000004>      <1> 				.y0		resd	1
    31 00000008 <res 00000004>      <1> 				.x1		resd	1
    32 0000000C <res 00000004>      <1> 				.y1		resd	1
    33                              <1> 
    34 00000010 <res 00000004>      <1> 				.n		resd	1
    35 00000014 <res 00000004>      <1> 				.d		resd	1
    36                              <1> 
    37 00000018 <res 00000004>      <1> 				.color_x	resd	1
    38 0000001C <res 00000004>      <1> 				.color_y	resd	1
    39 00000020 <res 00000004>      <1> 				.color_z	resd	1
    40 00000024 <res 00000004>      <1> 				.color_s	resd	1
    41 00000028 <res 00000004>      <1> 				.color_f	resd	1
    42 0000002C <res 00000004>      <1> 				.color_b	resd	1
    43                              <1> 				
    44 00000030 <res 00000010>      <1> 				.title		resb	16
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;struc ring_buff
    48                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    49                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    50                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    51                              <1> ;endstruc
    52                              <1> 
    53                              <1> STACK_SIZE		equ	1024
    54                              <1> 
    55                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    56                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    57                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    58                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
    59                              <1> SP_TASK_4		equ	STACK_BASE + (STACK_SIZE * 5)
    60                              <1> SP_TASK_5		equ	STACK_BASE + (STACK_SIZE * 6)
    61                              <1> SP_TASK_6		equ	STACK_BASE + (STACK_SIZE * 7)
    62                              <1> 
    63                              <1> PARAM_TASK_4		equ	0x0010_8000
    64                              <1> PARAM_TASK_5		equ	0x0010_9000
    65                              <1> PARAM_TASK_6		equ	0x0010_A000
    66                              <1> 
    67                              <1> CR3_TASK_4		equ	0x0020_0000
    68                              <1> CR3_TASK_5		equ	0x0020_2000
    69                              <1> CR3_TASK_6		equ	0x0020_4000
    70                              <1> 
    71                              <1> FAT_SIZE equ (1024 * 128)
    72                              <1> ROOT_SIZE equ (1024 * 16)
    73                              <1> 
    74                              <1> FAT1_START equ (KERNEL_SIZE)
    75                              <1> FAT2_START equ (FAT1_START + FAT_SIZE)
    76                              <1> ROOT_START equ (FAT2_START + FAT_SIZE)
    77                              <1> FILE_START equ (ROOT_START + ROOT_SIZE)
    78                              <1> 
    79                              <1> ATTR_VOLUME_ID equ 0x08
    80                              <1> ATTR_ARCHIVE equ 0x20
    81                              <1> 
     5                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     6                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     7                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     8                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     9                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
    10                                  %include	"../include/set_gate.s"
     1                              <1> %macro	set_gate 2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	mov	[edi + 0], ax
     9                              <1> 	shr	eax, 16
    10                              <1> 	mov	[edi + 6], ax
    11                              <1> 	
    12                              <1> 	pop	edi
    13                              <1> 	pop	eax
    14                              <1> %endmacro
    11                                  ;%include	"../../../../testOS/src/include/macro.s"
    12                                  
    13                                  ORG	KERNEL_LOAD
    14                                  
    15                                  ALIGN	4
    16 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    17 00000002 00001000                	dd	VECT_BASE
    18                                  
    19                                  
    20                                  [BITS 32]
    21                                  
    22                                  
    23                                  kernel:
    24 00000006 FA                      	cli
    25                                  
    26 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    27 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    28 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    29 00000013 C1E004                  	shl	eax, 4
    30 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    31 00000018 A3[E8020000]            	mov	[FONT_ADR], eax
    32                                  	
    33                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    33 0000001D 50                  <1>  push eax
    33 0000001E 57                  <1>  push edi
    33                              <1> 
    33 0000001F BF[980F0000]        <1>  mov edi, %1
    33 00000024 B8[100F0000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if %0 == 3
    33 00000029 66C7075F00          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000002E 66894702            <1>  mov [edi + 2], ax
    33 00000032 C1E810              <1>  shr eax, 16
    33 00000035 884704              <1>  mov [edi + 4], al
    33 00000038 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000003B 5F                  <1>  pop edi
    33 0000003C 58                  <1>  pop eax
    34                                  	set_desc	GDT.tss_0, TSS_0
    34 0000003D 50                  <1>  push eax
    34 0000003E 57                  <1>  push edi
    34                              <1> 
    34 0000003F BF[A00F0000]        <1>  mov edi, %1
    34 00000044 B8[E60F0000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if %0 == 3
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 00000049 66894702            <1>  mov [edi + 2], ax
    34 0000004D C1E810              <1>  shr eax, 16
    34 00000050 884704              <1>  mov [edi + 4], al
    34 00000053 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 00000056 5F                  <1>  pop edi
    34 00000057 58                  <1>  pop eax
    35                                  	set_desc	GDT.tss_1, TSS_1
    35 00000058 50                  <1>  push eax
    35 00000059 57                  <1>  push edi
    35                              <1> 
    35 0000005A BF[A80F0000]        <1>  mov edi, %1
    35 0000005F B8[BE100000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if %0 == 3
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 00000064 66894702            <1>  mov [edi + 2], ax
    35 00000068 C1E810              <1>  shr eax, 16
    35 0000006B 884704              <1>  mov [edi + 4], al
    35 0000006E 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 00000071 5F                  <1>  pop edi
    35 00000072 58                  <1>  pop eax
    36                                  	set_desc	GDT.tss_2, TSS_2
    36 00000073 50                  <1>  push eax
    36 00000074 57                  <1>  push edi
    36                              <1> 
    36 00000075 BF[B00F0000]        <1>  mov edi, %1
    36 0000007A B8[96110000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if %0 == 3
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 0000007F 66894702            <1>  mov [edi + 2], ax
    36 00000083 C1E810              <1>  shr eax, 16
    36 00000086 884704              <1>  mov [edi + 4], al
    36 00000089 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000008C 5F                  <1>  pop edi
    36 0000008D 58                  <1>  pop eax
    37                                  	set_desc	GDT.tss_3, TSS_3
    37 0000008E 50                  <1>  push eax
    37 0000008F 57                  <1>  push edi
    37                              <1> 
    37 00000090 BF[B80F0000]        <1>  mov edi, %1
    37 00000095 B8[6E120000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if %0 == 3
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000009A 66894702            <1>  mov [edi + 2], ax
    37 0000009E C1E810              <1>  shr eax, 16
    37 000000A1 884704              <1>  mov [edi + 4], al
    37 000000A4 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 000000A7 5F                  <1>  pop edi
    37 000000A8 58                  <1>  pop eax
    38                                  	set_desc	GDT.tss_4, TSS_4
    38 000000A9 50                  <1>  push eax
    38 000000AA 57                  <1>  push edi
    38                              <1> 
    38 000000AB BF[C00F0000]        <1>  mov edi, %1
    38 000000B0 B8[46130000]        <1>  mov eax, %2
    38                              <1> 
    38                              <1>  %if %0 == 3
    38                              <1>  mov [edi + 0], %3
    38                              <1>  %endif
    38                              <1> 
    38 000000B5 66894702            <1>  mov [edi + 2], ax
    38 000000B9 C1E810              <1>  shr eax, 16
    38 000000BC 884704              <1>  mov [edi + 4], al
    38 000000BF 886707              <1>  mov [edi + 7], ah
    38                              <1> 
    38 000000C2 5F                  <1>  pop edi
    38 000000C3 58                  <1>  pop eax
    39                                  	set_desc	GDT.tss_5, TSS_5
    39 000000C4 50                  <1>  push eax
    39 000000C5 57                  <1>  push edi
    39                              <1> 
    39 000000C6 BF[C80F0000]        <1>  mov edi, %1
    39 000000CB B8[1E140000]        <1>  mov eax, %2
    39                              <1> 
    39                              <1>  %if %0 == 3
    39                              <1>  mov [edi + 0], %3
    39                              <1>  %endif
    39                              <1> 
    39 000000D0 66894702            <1>  mov [edi + 2], ax
    39 000000D4 C1E810              <1>  shr eax, 16
    39 000000D7 884704              <1>  mov [edi + 4], al
    39 000000DA 886707              <1>  mov [edi + 7], ah
    39                              <1> 
    39 000000DD 5F                  <1>  pop edi
    39 000000DE 58                  <1>  pop eax
    40                                  	set_desc	GDT.tss_6, TSS_6
    40 000000DF 50                  <1>  push eax
    40 000000E0 57                  <1>  push edi
    40                              <1> 
    40 000000E1 BF[D00F0000]        <1>  mov edi, %1
    40 000000E6 B8[F6140000]        <1>  mov eax, %2
    40                              <1> 
    40                              <1>  %if %0 == 3
    40                              <1>  mov [edi + 0], %3
    40                              <1>  %endif
    40                              <1> 
    40 000000EB 66894702            <1>  mov [edi + 2], ax
    40 000000EF C1E810              <1>  shr eax, 16
    40 000000F2 884704              <1>  mov [edi + 4], al
    40 000000F5 886707              <1>  mov [edi + 7], ah
    40                              <1> 
    40 000000F8 5F                  <1>  pop edi
    40 000000F9 58                  <1>  pop eax
    41 000000FA 0F0115[E00F0000]        	lgdt		[GDTR]
    42                                  
    43 00000101 BC00341000              	mov	esp, SP_TASK_0
    44 00000106 66B83000                	mov	ax, SS_TASK_0	; set tss0
    45 0000010A 0F00D8                  	ltr	ax
    46                                  	; say "this process is task 0" to CPU
    47                                  
    48                                  
    49 0000010D E819090000              	cdecl	init_int
    50 00000112 E8B2070000              	cdecl	init_pic
    51                                  
    52 00000117 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    52 0000011F [620A0000]668907C1-
    52 00000127 E810668947065F58   
    53 0000012F 5057BF70001000B8-       	set_vect	0x0E, int_pf
    53 00000137 [CC0D0000]668907C1-
    53 0000013F E810668947065F58   
    54 00000147 5057BF38001000B8-       	set_vect	0x07, int_nm
    54 0000014F [630C0000]668907C1-
    54 00000157 E810668947065F58   
    55 0000015F 5057BF00011000B8-       	set_vect	0x20, int_timer
    55 00000167 [320E0000]668907C1-
    55 0000016F E810668947065F58   
    56 00000177 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    56 0000017F [800A0000]668907C1-
    56 00000187 E810668947065F58   
    57 0000018F 5057BF40011000B8-       	set_vect	0x28, int_rtc
    57 00000197 [8C080000]668907C1-
    57 0000019F E810668947065F58   
    58 000001A7 5057BF08041000B8-       	set_vect	0x81, trap_gate_81, word 0xEF00	; type = trap
    58 000001AF [BB0B0000]66C74704-
    58 000001B7 00EF668907C1E81066-
    58 000001C0 8947065F58         
    59 000001C5 5057BF10041000B8-       	set_vect	0x82, trap_gate_82, word 0xEF00
    59 000001CD [E10B0000]66C74704-
    59 000001D5 00EF668907C1E81066-
    59 000001DE 8947065F58         
    60                                  
    61 000001E3 E8420B0000              	cdecl	init_page
    62                                  
    63 000001E8 B800501000              	mov	eax, CR3_BASE
    64 000001ED 0F22D8                  	mov	cr3, eax
    65                                  	
    66 000001F0 0F20C0                  	mov	eax, cr0
    67 000001F3 0D00000080              	or	eax, (1 << 31)
    68 000001F8 0F22C0                  	mov	cr0, eax
    69 000001FB EB00                    	jmp	$ + 2
    70                                  
    71                                  	;mov	eax, 0xffff00
    72                                  	;mov	[eax], dword 1
    73                                  	;cdecl	itoa, dword [eax], .t1, 16, 16, 0b0100
    74                                  	;cdecl	draw_str, 0, 10, 0x010F, .t1
    75                                  
    76                                  	set_gate	GDT.call_gate, call_gate
    76 000001FD 50                  <1>  push eax
    76 000001FE 57                  <1>  push edi
    76                              <1> 
    76 000001FF BF[D80F0000]        <1>  mov edi, %1
    76 00000204 B8[6B0B0000]        <1>  mov eax, %2
    76                              <1> 
    76 00000209 668907              <1>  mov [edi + 0], ax
    76 0000020C C1E810              <1>  shr eax, 16
    76 0000020F 66894706            <1>  mov [edi + 6], ax
    76                              <1> 
    76 00000213 5F                  <1>  pop edi
    76 00000214 58                  <1>  pop eax
    77                                  	
    78 00000215 6A10E8990600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    78 0000021E C404               
    79 00000220 E8970C0000              	cdecl	int_en_timer
    80                                  	
    81                                  	outp	0x21, 0b1111_1000	; slave
    81 00000225 B0F8                <1>  mov al, %2
    81 00000227 E621                <1>  out %1, al
    82                                  	outp	0xA1, 0b1111_1110	; rtc
    82 00000229 B0FE                <1>  mov al, %2
    82 0000022B E6A1                <1>  out %1, al
    83                                  	
    84 0000022D FB                      	sti
    85                                  	
    86 0000022E 6A0D6A3FE849020000-     	cdecl	draw_font, 63, 13
    86 00000237 6683C408           
    87 0000023B 6A046A3FE8B5020000-     	cdecl	draw_color_bar, 63, 4
    87 00000244 6683C408           
    88                                  
    89 00000248 68[BD020000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    89 00000250 00006A0E6A19E86002-
    89 00000259 00006683C410       
    90                                  	
    91                                  	;jmp	SS_TASK_1:10000
    92                                  
    93                                  .10L:
    94                                  
    95 0000025F E86D0C0000              	cdecl	draw_rotation_bar
    96                                  
    97 00000264 68[E4020000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
    97 0000026A [A40A0000]E8490800-
    97 00000272 006683C408         
    98 00000277 83F800                  	cmp	eax, 0
    99 0000027A 74E3                    	je	.10L
   100                                  
   101 0000027C 68[A40A0000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
   101 00000284 02E88E0800006683C4-
   101 0000028D 0C                 
   102                                  
   103 0000028E A0[E4020000]            	mov	al, [.int_key]
   104 00000293 3C02                    	cmp	al, 0x02
   105 00000295 75C8                    	jne	.10L
   106                                  
   107 00000297 FF15F09B0000            	call	[BOOT_LOAD + BOOT_SIZE - 16]
   108 0000029D BE00780000              	mov	esi, 0x7800
   109 000002A2 C6462000                	mov	[esi + 32], byte 0
   110 000002A6 5668040F00006A006A-     	cdecl	draw_str, 0, 0, 0x0F04, esi
   110 000002AF 00E8060200006683C4-
   110 000002B8 10                 
   111                                  
   112 000002B9 EBA4                    	jmp	.10L
   113                                  
   114 000002BB EBFE                    	jmp	$
   115                                  	
   116                                  	
   117 000002BD 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   117 000002C6 65726E656C212000   
   118 000002CE 2D2D2D2D00              .t0:	db	"----",0
   119 000002D3 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
   119 000002DC 2D2D2D2D2D2D2D00   
   120 000002E4 00000000                .int_key:	dd	0
   121                                  
   122                                  ALIGN	4,	db	0
   123 000002E8 00000000                FONT_ADR:	dd	0
   124 000002EC 00000000                RTC_TIME:	dd	0
   125                                  
   126                                  
   127                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 000002F0 55                  <1> 	push	ebp
     4 000002F1 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 000002F3 50                  <1> 	push	eax
     7 000002F4 52                  <1> 	push	edx
     8                              <1> 
     9 000002F5 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 000002F8 80E403              <1> 	and	ah, 0x03
    11 000002FB B004                <1> 	mov	al, 0x04	; read map
    12 000002FD 66BACE03            <1> 	mov	dx, 0x03CE
    13 00000301 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 00000303 5A                  <1> 	pop	edx
    16 00000304 58                  <1> 	pop	eax
    17                              <1> 
    18 00000305 89EC                <1> 	mov	esp,ebp
    19 00000307 5D                  <1> 	pop	ebp
    20                              <1> 
    21 00000308 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 00000309 55                  <1> 	push	ebp
    25 0000030A 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 0000030C 50                  <1> 	push	eax
    28 0000030D 52                  <1> 	push	edx
    29                              <1> 
    30 0000030E 8A6508              <1> 	mov	ah, [ebp + 8]
    31 00000311 80E40F              <1> 	and	ah, 0x0F
    32 00000314 B002                <1> 	mov	al, 0x02		; write select
    33 00000316 66BAC403            <1> 	mov	dx, 0x03C4
    34 0000031A 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 0000031C 5A                  <1> 	pop	edx
    37 0000031D 58                  <1> 	pop	eax
    38                              <1> 
    39 0000031E 89EC                <1> 	mov	esp, ebp
    40 00000320 5D                  <1> 	pop	ebp
    41                              <1> 
    42 00000321 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 00000322 55                  <1> 	push	ebp
    51 00000323 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 00000325 50                  <1> 	push	eax
    54 00000326 53                  <1> 	push	ebx
    55 00000327 51                  <1> 	push	ecx
    56 00000328 52                  <1> 	push	edx
    57 00000329 56                  <1> 	push	esi
    58 0000032A 57                  <1> 	push	edi
    59                              <1> 
    60 0000032B 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 0000032E 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 00000331 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 00000335 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 00000339 84C7                <1> 	test	bh, al			; BACK
    67 0000033B 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 0000033E FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 00000340 84C3                <1> 	test	bl, al			; FORWARD
    71 00000342 0F94C2              <1> 	setz	dl
    72 00000345 FECA                <1> 	dec	dl
    73                              <1> 
    74 00000347 FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 00000348 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 0000034D AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 0000034E 88C4                <1> 	mov	ah, al			; AL is font data
    80 00000350 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 00000352 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 00000354 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 0000035A 7404                <1> 	jz	.11F
    86 0000035C 2227                <1> 	and	ah, [edi]
    87 0000035E EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 00000360 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 00000362 08E0                <1> 	or	al,ah
    92 00000364 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 00000366 83C750              <1> 	add	edi,80			; next
    95 00000369 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 0000036B 5F                  <1> 	pop	edi
    99 0000036C 5E                  <1> 	pop	esi
   100 0000036D 5A                  <1> 	pop	edx
   101 0000036E 59                  <1> 	pop	ecx
   102 0000036F 5B                  <1> 	pop	ebx
   103 00000370 58                  <1> 	pop	eax
   104                              <1> 
   105 00000371 89EC                <1> 	mov	esp, ebp
   106 00000373 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000374 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 00000375 55                  <1> 	push	ebp
   113 00000376 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 00000378 57                  <1> 	push	edi
   116 00000379 50                  <1> 	push	eax
   117 0000037A 53                  <1> 	push	ebx
   118                              <1> 
   119 0000037B 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 0000037E 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 00000382 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 00000386 84C3                <1> 	test	bl, al
   124 00000388 0F94C3              <1> 	setz	bl
   125 0000038B FECB                <1> 	dec	bl
   126                              <1> 
   127 0000038D 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 00000390 88C4                <1> 	mov	ah, al
   129 00000392 F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 00000394 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 00000396 20D8                <1> 	and	al, bl
   134 00000398 08E0                <1> 	or	al, ah
   135 0000039A 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 0000039C 5B                  <1> 	pop	ebx
   138 0000039D 58                  <1> 	pop	eax
   139 0000039E 5F                  <1> 	pop	edi
   140                              <1> 
   141 0000039F 89EC                <1> 	mov	esp, ebp
   142 000003A1 5D                  <1> 	pop	ebp
   143                              <1> 
   144 000003A2 C3                  <1> 	ret
   145                              <1> 
   128                                  %include	"../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2 000003A3 55                  <1> 	push	ebp
     3 000003A4 89E5                <1> 	mov	ebp,esp
     4                              <1> 
     5 000003A6 57                  <1> 	push	edi
     6 000003A7 56                  <1> 	push	esi
     7 000003A8 51                  <1> 	push	ecx
     8                              <1> 
     9 000003A9 FC                  <1> 	cld
    10 000003AA 8B7D08              <1> 	mov	edi,[ebp + 8]
    11 000003AD 8B750C              <1> 	mov	esi,[ebp + 12]
    12 000003B0 8B4D10              <1> 	mov	ecx,[ebp + 16]
    13                              <1> 
    14 000003B3 F3A4                <1> 	rep	movsb
    15                              <1> 
    16 000003B5 59                  <1> 	pop	ecx
    17 000003B6 5E                  <1> 	pop	esi
    18 000003B7 5F                  <1> 	pop	edi
    19                              <1> 
    20 000003B8 89EC                <1> 	mov	esp,ebp
    21 000003BA 5D                  <1> 	pop	ebp
    22                              <1> 
    23 000003BB C3                  <1> 	ret
    24                              <1> 
   129                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 000003BC 55                  <1> 	push	ebp
     4 000003BD 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000003BF 56                  <1> 	push	esi
     7 000003C0 57                  <1> 	push	edi
     8 000003C1 50                  <1> 	push	eax
     9 000003C2 53                  <1> 	push	ebx
    10 000003C3 51                  <1> 	push	ecx
    11 000003C4 52                  <1> 	push	edx
    12                              <1> 
    13 000003C5 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 000003C9 C1E604              <1> 	shl	esi, 4
    15 000003CC 0335[E8020000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 000003D2 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 000003D5 C1E708              <1> 	shl	edi, 8
    19 000003D8 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 000003DF 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 000003E2 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 000003E6 6A03E803FFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 000003EF C404                <1>
    25 000003F1 6A08E811FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 000003FA C404                <1>
    26 000003FC 536A085756E81CFFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 00000405 FF6683C410          <1>
    27                              <1> 
    28 0000040A 6A02E8DFFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 00000413 C404                <1>
    29 00000415 6A04E8EDFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 0000041E C404                <1>
    30 00000420 536A045756E8F8FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 00000429 FF6683C410          <1>
    31                              <1> 
    32 0000042E 6A01E8BBFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 00000437 C404                <1>
    33 00000439 6A02E8C9FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 00000442 C404                <1>
    34 00000444 536A025756E8D4FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 0000044D FF6683C410          <1>
    35                              <1> 	
    36 00000452 6A00E897FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 0000045B C404                <1>
    37 0000045D 6A01E8A5FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 00000466 C404                <1>
    38 00000468 536A015756E8B0FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 00000471 FF6683C410          <1>
    39                              <1> 
    40 00000476 5A                  <1> 	pop	edx
    41 00000477 59                  <1> 	pop	ecx
    42 00000478 5B                  <1> 	pop	ebx
    43 00000479 58                  <1> 	pop	eax
    44 0000047A 5F                  <1> 	pop	edi
    45 0000047B 5E                  <1> 	pop	esi
    46                              <1> 
    47 0000047C 89EC                <1> 	mov	esp, ebp
    48 0000047E 5D                  <1> 	pop	ebp
    49                              <1> 
    50 0000047F C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
   130                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 00000480 55                  <1> 	push	ebp
     3 00000481 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000483 50                  <1> 	push	eax
     6 00000484 53                  <1> 	push	ebx
     7 00000485 51                  <1> 	push	ecx
     8                              <1> 
     9 00000486 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 0000048B 81F900010000        <1> 	cmp	ecx,256
    12 00000491 7321                <1> 	jae	.10E
    13                              <1> 
    14 00000493 89C8                <1> 	mov	eax, ecx
    15 00000495 83E00F              <1> 	and	eax, 0b00001111
    16 00000498 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 0000049B 89CB                <1> 	mov	ebx, ecx
    19 0000049D C1EB04              <1> 	shr	ebx, 4
    20 000004A0 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 000004A3 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 000004AC FF6683C410          <1>
    23                              <1> 	
    24 000004B1 41                  <1> 	inc	ecx
    25 000004B2 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 000004B4 59                  <1> 	pop	ecx
    30 000004B5 5B                  <1> 	pop	ebx
    31 000004B6 58                  <1> 	pop	eax
    32                              <1> 
    33 000004B7 89EC                <1> 	mov	esp, ebp
    34 000004B9 5D                  <1> 	pop	ebp
    35                              <1> 
    36 000004BA C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
   131                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 000004BB 55                  <1> 	push	ebp
     3 000004BC 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 000004BE 50                  <1> 	push	eax
     6 000004BF 53                  <1> 	push	ebx
     7 000004C0 51                  <1> 	push	ecx
     8 000004C1 52                  <1> 	push	edx
     9 000004C2 56                  <1> 	push	esi
    10                              <1> 
    11 000004C3 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 000004C6 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 000004C9 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 000004CD 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 000004D0 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 000004D1 AC                  <1> 	lodsb
    20 000004D2 3C00                <1> 	cmp	al, 0
    21 000004D4 741A                <1> 	je	.10E
    22                              <1> %ifdef	USE_SYSTEM_CALL
    23 000004D6 CD81                <1> 	int 0x81
    24                              <1> %else
    25                              <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    26                              <1> %endif
    27 000004D8 43                  <1> 	inc	ebx
    28 000004D9 83FB50              <1> 	cmp	ebx, 80
    29 000004DC 7CF3                <1> 	jl	.10L
    30 000004DE BB00000000          <1> 	mov	ebx, 0
    31 000004E3 41                  <1> 	inc	ecx
    32 000004E4 83F91E              <1> 	cmp	ecx, 30
    33 000004E7 7CE8                <1> 	jl	.10L
    34 000004E9 B900000000          <1> 	mov	ecx, 0
    35                              <1> 	
    36 000004EE EBE1                <1> 	jmp	.10L
    37                              <1> .10E:
    38                              <1> 
    39 000004F0 5E                  <1> 	pop	esi
    40 000004F1 5A                  <1> 	pop	edx
    41 000004F2 59                  <1> 	pop	ecx
    42 000004F3 5B                  <1> 	pop	ebx
    43 000004F4 58                  <1> 	pop	eax
    44                              <1> 
    45 000004F5 89EC                <1> 	mov	esp, ebp
    46 000004F7 5D                  <1> 	pop	ebp
    47                              <1> 
    48 000004F8 C3                  <1> 	ret
   132                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 000004F9 55                  <1> 	push	ebp
     3 000004FA 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000004FC 56                  <1> 	push	esi
     6 000004FD 57                  <1> 	push	edi
     7 000004FE 50                  <1> 	push	eax
     8 000004FF 53                  <1> 	push	ebx
     9 00000500 51                  <1> 	push	ecx
    10 00000501 52                  <1> 	push	edx
    11                              <1> 
    12 00000502 8B7508              <1> 	mov	esi, [ebp + 8]
    13 00000505 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 00000508 B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 0000050D 83F910              <1> 	cmp	ecx, 16
    18 00000510 732E                <1> 	jae	.10E
    19                              <1> 
    20 00000512 89C8                <1> 	mov	eax, ecx
    21 00000514 83E001              <1> 	and	eax, 0x01	; % 2
    22 00000517 C1E003              <1> 	shl	eax, 3		; *= 8
    23 0000051A 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 0000051C 89CB                <1> 	mov	ebx, ecx
    26 0000051E D1EB                <1> 	shr	ebx, 1		; / 2
    27 00000520 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 00000522 89CA                <1> 	mov	edx, ecx
    32 00000524 D1E2                <1> 	shl	edx, 1
    33 00000526 8B92[53050000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 0000052C 68[4A050000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 00000534 E882FFFFFF6683C410  <1>
    36                              <1> 
    37 0000053D 41                  <1> 	inc	ecx
    38 0000053E EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 00000540 52                  <1> 	push	edx	
    42 00000541 51                  <1> 	push	ecx	
    43 00000542 53                  <1> 	push	ebx	
    44 00000543 50                  <1> 	push	eax	
    45 00000544 57                  <1> 	push	edi	
    46 00000545 56                  <1> 	push	esi	
    47                              <1> 
    48 00000546 89EC                <1> 	mov	esp, ebp
    49 00000548 5D                  <1> 	pop	ebp
    50                              <1> 
    51 00000549 C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 0000054A 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 00000553 00000008            <1> .t0:	dw 0x0000,0x0800
    57 00000557 00010009            <1> 	dw 0x0100,0x0900
    58 0000055B 0002000A            <1> 	dw 0x0200,0x0A00
    59 0000055F 0003000B            <1> 	dw 0x0300,0x0B00
    60 00000563 0004000C            <1> 	dw 0x0400,0x0C00
    61 00000567 0005000D            <1> 	dw 0x0500,0x0D00
    62 0000056B 0006000E            <1> 	dw 0x0600,0x0E00
    63 0000056F 0007000F            <1> 	dw 0x0700,0x0F00
   133                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 00000573 55                  <1> 	push	ebp
     4 00000574 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000576 57                  <1> 	push	edi
     7 00000577 53                  <1> 	push	ebx
     8 00000578 51                  <1> 	push	ecx
     9                              <1> 
    10 00000579 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 0000057C C1E704              <1> 	shl	edi, 4
    12 0000057F 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 00000586 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 00000589 89D9                <1> 	mov	ecx, ebx
    16 0000058B C1EB03              <1> 	shr	ebx, 3
    17 0000058E 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 00000590 83E107              <1> 	and	ecx, 0x07
    20 00000593 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 00000598 D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 0000059A 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 0000059D 6A03E84CFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 000005A6 C404                <1>
    28 000005A8 6A08E85AFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 000005B1 C404                <1>
    29 000005B3 516A085753E8B8FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 000005BC FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 000005C1 6A02E828FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 000005CA C404                <1>
    34 000005CC 6A04E836FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 000005D5 C404                <1>
    35 000005D7 516A045753E894FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 000005E0 FF6683C410          <1>
    36                              <1> 	
    37 000005E5 6A01E804FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 000005EE C404                <1>
    38 000005F0 6A02E812FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 000005F9 C404                <1>
    39 000005FB 516A025753E870FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 00000604 FF6683C410          <1>
    40                              <1> 	
    41 00000609 6A00E8E0FCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 00000612 C404                <1>
    42 00000614 6A01E8EEFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 0000061D C404                <1>
    43 0000061F 516A015753E84CFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 00000628 FF6683C410          <1>
    44                              <1> 
    45 0000062D 59                  <1> 	pop	ecx
    46 0000062E 5B                  <1> 	pop	ebx
    47 0000062F 5F                  <1> 	pop	edi
    48                              <1> 
    49 00000630 89EC                <1> 	mov	esp, ebp
    50 00000632 5D                  <1> 	pop	ebp
    51                              <1> 
    52 00000633 C3                  <1> 	ret
    53                              <1> 
   134                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 00000634 55                  <1> 	push	ebp
     3 00000635 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000637 6A00                <1> 	push	dword 0	; SUM: - 4
     6 00000639 6A00                <1> 	push	dword 0	; x0 : - 8
     7 0000063B 6A00                <1> 	push	dword 0	; wid: -12
     8 0000063D 6A00                <1> 	push	dword 0	; inx: -16
     9 0000063F 6A00                <1> 	push	dword 0	; y0 : -20
    10 00000641 6A00                <1> 	push	dword 0	; hei: -24
    11 00000643 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 00000645 50                  <1> 	push	eax
    14 00000646 53                  <1> 	push	ebx
    15 00000647 51                  <1> 	push	ecx
    16 00000648 52                  <1> 	push	edx
    17 00000649 56                  <1> 	push	esi
    18 0000064A 57                  <1> 	push	edi
    19                              <1> 
    20 0000064B 8B4508              <1> 	mov	eax, [ebp + 8]
    21 0000064E 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 00000651 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 00000653 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 00000655 F7DB                <1> 	neg	ebx
    26 00000657 BEFFFFFFFF          <1> 	mov	esi, -1
    27 0000065C EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 0000065E BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 00000663 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 00000666 8B5514              <1> 	mov	edx, [ebp +20]
    34 00000669 29CA                <1> 	sub	edx, ecx
    35 0000066B 7D09                <1> 	jge	.20F
    36                              <1> 
    37 0000066D F7DA                <1> 	neg	edx
    38 0000066F BFFFFFFFFF          <1> 	mov	edi, -1
    39 00000674 EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 00000676 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 0000067B 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 0000067E 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 00000681 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 00000684 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 00000687 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 0000068A 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 0000068D 39D3                <1> 	cmp	ebx, edx
    53 0000068F 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 00000691 8D75EC              <1> 	lea	esi, [ebp -20]
    56 00000694 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 00000697 EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 00000699 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 0000069C 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 0000069F 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 000006A2 83F900              <1> 	cmp	ecx, 0
    67 000006A5 7505                <1> 	jnz	.30E
    68 000006A7 B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75                              <1> %ifdef	USE_SYSTEM_CALL
    76 000006AC 51                  <1> 	push	ecx
    77 000006AD 52                  <1> 	push	edx
    78 000006AE 53                  <1> 	push	ebx
    79                              <1> 
    80 000006AF 8B4DF8              <1> 	mov	ecx, [ebp - 8]
    81 000006B2 8B55EC              <1> 	mov	edx, [ebp -20]
    82 000006B5 8B5D18              <1> 	mov	ebx, [ebp +24]
    83                              <1> 
    84 000006B8 CD82                <1> 	int	0x82
    85                              <1> 
    86 000006BA 5B                  <1> 	pop	ebx
    87 000006BB 5A                  <1> 	pop	edx
    88 000006BC 59                  <1> 	pop	ecx
    89                              <1> %else	
    90                              <1> 	cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    91                              <1> %endif
    92                              <1> 	
    93                              <1> 	; update coordinate
    94 000006BD 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    95 000006C0 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    96                              <1> 
    97 000006C2 8B45FC              <1> 	mov	eax, [ebp - 4]
    98 000006C5 0347FC              <1> 	add	eax, [edi - 4]
    99 000006C8 8B5EFC              <1> 	mov	ebx, [esi - 4]
   100                              <1> 
   101 000006CB 39D8                <1> 	cmp	eax, ebx
   102 000006CD 7C07                <1> 	jl	.52E
   103 000006CF 29D8                <1> 	sub	eax, ebx	; sum -= wid
   104                              <1> 	; sum can only add -1 or 1
   105                              <1> 	; so. not be  "dif * 2 < sum" 
   106                              <1> 
   107 000006D1 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
   108 000006D4 011F                <1> 	add	[edi - 0], ebx
   109                              <1> .52E:
   110 000006D6 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
   111                              <1> 
   112 000006D9 E2D1                <1> 	loop	.50L
   113                              <1> .50E:
   114                              <1> 
   115                              <1> 
   116 000006DB 5F                  <1> 	pop	edi
   117 000006DC 5E                  <1> 	pop	esi
   118 000006DD 5A                  <1> 	pop	edx
   119 000006DE 59                  <1> 	pop	ecx
   120 000006DF 5B                  <1> 	pop	ebx
   121 000006E0 58                  <1> 	pop	eax
   122                              <1> 
   123 000006E1 89EC                <1> 	mov	esp, ebp
   124 000006E3 5D                  <1> 	pop	ebp
   125                              <1> 
   126 000006E4 C3                  <1> 	ret
   127                              <1> 
   128                              <1> 
   135                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 000006E5 55                  <1> 	push	ebp
     3 000006E6 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000006E8 50                  <1> 	push	eax
     6 000006E9 53                  <1> 	push	ebx
     7 000006EA 51                  <1> 	push	ecx
     8 000006EB 52                  <1> 	push	edx
     9 000006EC 56                  <1> 	push	esi
    10                              <1> 
    11 000006ED 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 000006F0 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 000006F3 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 000006F6 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 000006F9 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 000006FC 39C8                <1> 	cmp	eax, ecx
    21 000006FE 7C01                <1> 	jl	.10E		; OK
    22 00000700 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 00000701 39D3                <1> 	cmp	ebx, edx
    25 00000703 7C02                <1> 	jl	.20E		; OK
    26 00000705 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 00000707 5653515350E823FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 00000710 FF6683C414          <1>
    36 00000715 5652505350E815FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 0000071E FF6683C414          <1>
    37                              <1> 
    38 00000723 4A                  <1> 	dec	edx
    39 00000724 5652515250E806FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 0000072D FF6683C414          <1>
    40 00000732 42                  <1> 	inc	edx
    41                              <1> 
    42 00000733 49                  <1> 	dec	ecx
    43 00000734 5652515351E8F6FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 0000073D FF6683C414          <1>
    44                              <1> 
    45 00000742 5E                  <1> 	pop	esi
    46 00000743 5A                  <1> 	pop	edx
    47 00000744 59                  <1> 	pop	ecx
    48 00000745 5B                  <1> 	pop	ebx
    49 00000746 58                  <1> 	pop	eax
    50                              <1> 
    51 00000747 89EC                <1> 	mov	esp, ebp
    52 00000749 5D                  <1> 	pop	ebp
    53                              <1> 
    54 0000074A C3                  <1> 	ret
    55                              <1> 
   136                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 0000074B 55                  <1> 	push 	ebp
     3 0000074C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000074E 50                  <1> 	push	eax
     6 0000074F 53                  <1> 	push	ebx
     7 00000750 51                  <1> 	push	ecx
     8 00000751 52                  <1> 	push	edx
     9 00000752 56                  <1> 	push	esi
    10 00000753 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 00000754 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 00000758 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 0000075B 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 0000075E 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 00000760 B020                <1> 	mov	al,' '
    27 00000762 F7C304000000        <1> 	test	ebx, 0b0100
    28 00000768 7402                <1> 	je	.42E
    29 0000076A B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 0000076C FC                  <1> 	cld
    32 0000076D F3AA                <1> 	rep	stosb
    33                              <1> 
    34 0000076F 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 00000772 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 00000775 89F7                <1> 	mov	edi, esi
    37 00000777 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 00000779 4F                  <1> 	dec	edi
    39                              <1> 
    40 0000077A F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 00000780 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 00000782 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 00000785 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 00000787 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 0000078A F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 00000790 7410                <1> .20Q:	je	.20E		; not print sign
    51 00000792 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 00000795 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 00000797 F7D8                <1> 	neg	eax		; ax *= -1
    54 00000799 C6062D              <1> 	mov	[esi], byte '-'
    55 0000079C EB03                <1> 	jmp	.22E
    56 0000079E C6062B              <1> .22F:	mov	[esi], byte '+'
    57 000007A1 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 000007A2 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 000007A5 BA00000000          <1> 	mov	edx, 0
    64 000007AA F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 000007AC 89D6                <1> 	mov	esi, edx
    68 000007AE 8A96[C6070000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 000007B4 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 000007B6 4F                  <1> 	dec	edi
    72                              <1> 
    73 000007B7 83F800              <1> 	cmp	eax,0
    74 000007BA E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 000007BC 5F                  <1> 	pop	edi
    79 000007BD 5E                  <1> 	pop	esi
    80 000007BE 5A                  <1> 	pop	edx
    81 000007BF 59                  <1> 	pop	ecx
    82 000007C0 5B                  <1> 	pop	ebx
    83 000007C1 58                  <1> 	pop	eax
    84                              <1> 
    85 000007C2 89EC                <1> 	mov	esp, ebp
    86 000007C4 5D                  <1> 	pop	ebp
    87                              <1> 
    88 000007C5 C3                  <1> 	ret
    89                              <1> 
    90 000007C6 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 000007CF 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   137                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 000007D6 55                  <1> 	push	ebp
     3 000007D7 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000007D9 50                  <1> 	push	eax
     6 000007DA 53                  <1> 	push	ebx
     7                              <1> 
     8 000007DB 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 000007DE 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 000007E1 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 000007E8 [48080000]53E859FF- <1>
    10 000007F0 FFFF6683C414        <1>
    11                              <1> 
    12 000007F6 88E3                <1> 	mov	bl, ah
    13 000007F8 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 000007FF [45080000]53E842FF- <1>
    13 00000807 FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 0000080D C1E810              <1> 	shr	eax, 16
    17 00000810 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 00000817 [42080000]50E82AFF- <1>
    17 0000081F FFFF6683C414        <1>
    18                              <1> 
    19 00000825 68[42080000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 0000082D FF750CFF7508E883FC- <1>
    19 00000836 FFFF6683C410        <1>
    20                              <1> 
    21 0000083C 5B                  <1> 	pop	ebx
    22 0000083D 58                  <1> 	pop	eax
    23                              <1> 
    24 0000083E 89EC                <1> 	mov	esp, ebp
    25 00000840 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000841 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 00000842 5A5A3A              <1> .hour:	db	"ZZ:"
    31 00000845 5A5A3A              <1> .min:	db	"ZZ:"
    32 00000848 5A5A00              <1> .sec:	db	"ZZ", 0
   138                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 0000084B 55                  <1> 	push	ebp
     3 0000084C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000084E 53                  <1> 	push	ebx
     6                              <1> 
     7 0000084F B00A                <1> 	mov	al, 0x0A
     8 00000851 E670                <1> 	out	0x70, al
     9 00000853 E471                <1> 	in	al, 0x71
    10                              <1> 
    11 00000855 A880                <1> 	test	al, 0x80
    12 00000857 7407                <1> 	je	.10F
    13 00000859 B801000000          <1> 	mov	eax, 1		; data updating. error
    14 0000085E EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 00000860 B004                <1> 	mov	al, 0x04	; Hour
    17 00000862 E670                <1> 	out	0x70, al
    18 00000864 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 00000866 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 00000869 B002                <1> 	mov	al, 0x02
    23 0000086B E670                <1> 	out	0x70, al
    24 0000086D E471                <1> 	in	al, 0x71
    25                              <1> 
    26 0000086F C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 00000872 B000                <1> 	mov	al, 0x00
    29 00000874 E670                <1> 	out	0x70, al
    30 00000876 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 00000878 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 0000087D 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 00000880 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 00000882 B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 00000887 5B                  <1> 	pop	ebx
    45                              <1> 
    46 00000888 89EC                <1> 	mov	esp, ebp
    47 0000088A 5D                  <1> 	pop	ebp
    48                              <1> 
    49 0000088B C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   139                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 0000088C 60                  <1> 	pusha		; all registers in stack
     3 0000088D 1E                  <1> 	push	ds
     4 0000088E 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 0000088F 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 00000893 8ED8                <1> 	mov	ds, ax
     9 00000895 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 00000897 68[EC020000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 0000089F FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 000008A5 B00C                <2>  mov al, %2
    13 000008A7 E670                <2>  out %1, al
    14 000008A9 E471                <1> 	in	al, 0x71
    15                              <1> 
    16 000008AB B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 000008AD E620                <1> 	out	0x20, al
    18 000008AF E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 000008B1 07                  <1> 	pop	es
    21 000008B2 1F                  <1> 	pop	ds
    22 000008B3 61                  <1> 	popa
    23                              <1> 
    24 000008B4 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 000008B5 55                  <1> 	push	ebp
    28 000008B6 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 000008B8 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 000008B9 B00B                <2>  mov al, %2
    32 000008BB E670                <2>  out %1, al
    33                              <1> 
    34 000008BD E471                <1> 	in	al, 0x71
    35 000008BF 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 000008C2 E671                <1> 	out	0x71, al
    38                              <1> 
    39 000008C4 58                  <1> 	pop	eax
    40                              <1> 
    41 000008C5 89EC                <1> 	mov	esp, ebp
    42 000008C7 5D                  <1> 	pop	ebp
    43                              <1> 
    44 000008C8 C3                  <1> 	ret
    45                              <1> 
   140                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 000008C9 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 000008CA B011                <2>  mov al, %2
     6 000008CC E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 000008CE B020                <2>  mov al, %2
     7 000008D0 E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 000008D2 B004                <2>  mov al, %2
     8 000008D4 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 000008D6 B005                <2>  mov al, %2
     9 000008D8 E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 000008DA B0FF                <2>  mov al, %2
    10 000008DC E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 000008DE B011                <2>  mov al, %2
    12 000008E0 E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 000008E2 B028                <2>  mov al, %2
    13 000008E4 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 000008E6 B002                <2>  mov al, %2
    14 000008E8 E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 000008EA B001                <2>  mov al, %2
    15 000008EC E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 000008EE B0FF                <2>  mov al, %2
    16 000008F0 E6A1                <2>  out %1, al
    17                              <1> 
    18 000008F2 58                  <1> 	pop	eax
    19                              <1> 
    20 000008F3 C3                  <1> 	ret
   141                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 000008F4 FB                  <1> 	sti
     3                              <1> 
     4 000008F5 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 000008FE 19E8B7FBFFFF6683C4- <1>
     4 00000907 10                  <1>
     5                              <1> 
     6 00000908 8B0424              <1> 	mov	eax, [esp + 0]
     7 0000090B 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 00000912 [D0090000]50E82FFE- <1>
     7 0000091A FFFF6683C414        <1>
     8                              <1> 	
     9 00000920 8B442404            <1> 	mov	eax, [esp + 4]
    10 00000924 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 0000092B [E1090000]50E816FE- <1>
    10 00000933 FFFF6683C414        <1>
    11                              <1> 	
    12 00000939 8B442408            <1> 	mov	eax, [esp + 8]
    13 0000093D 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 00000944 [F2090000]50E8FDFD- <1>
    13 0000094C FFFF6683C414        <1>
    14                              <1> 	
    15 00000952 8B44240C            <1> 	mov	eax, [esp +12]
    16 00000956 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 0000095D [030A0000]50E8E4FD- <1>
    16 00000965 FFFF6683C414        <1>
    17                              <1> 
    18 0000096B 68[C9090000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 00000973 00006A106A19E83DFB- <1>
    18 0000097C FFFF6683C410        <1>
    19 00000982 68[DA090000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 0000098A 00006A116A19E826FB- <1>
    19 00000993 FFFF6683C410        <1>
    20 00000999 68[EB090000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 000009A1 00006A126A19E80FFB- <1>
    20 000009AA FFFF6683C410        <1>
    21 000009B0 68[FC090000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 000009B8 00006A136A19E8F8FA- <1>
    21 000009C1 FFFF6683C410        <1>
    22                              <1> 
    23 000009C7 EBFE                <1> 	jmp	$
    24                              <1> 
    25 000009C9 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 000009D0 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 000009D9 00                  <1>
    27 000009DA 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 000009E1 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 000009EA 00                  <1>
    29 000009EB 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 000009F2 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 000009FB 00                  <1>
    31 000009FC 2020202B31323A      <1> .s4:	db	"   +12:"
    32 00000A03 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 00000A0C 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 00000A0D 9C                  <1> 	pushf
    37 00000A0E 0E                  <1> 	push	cs
    38 00000A0F 68[F4080000]        <1> 	push	int_stop
    39                              <1> 
    40 00000A14 B8[1A0A0000]        <1> 	mov	eax, .s0
    41 00000A19 CF                  <1> 	iret
    42                              <1> 
    43 00000A1A 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 00000A23 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 00000A2B 55                  <1> 	push	ebp
    47 00000A2C 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 00000A2E 50                  <1> 	push	eax
    50 00000A2F 53                  <1> 	push	ebx
    51 00000A30 51                  <1> 	push	ecx
    52 00000A31 57                  <1> 	push	edi
    53                              <1> 
    54 00000A32 8D05[0D0A0000]      <1> 	lea	eax, [int_default]
    55 00000A38 BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000A3D 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 00000A3F B900010000          <1> 	mov	ecx, 256
    65 00000A44 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000A49 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 00000A4B 894704              <1> 	mov	[edi + 4], eax	; top
    69 00000A4E 83C708              <1> 	add	edi, 8
    70 00000A51 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 00000A53 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000A5A 5F                  <1> 	pop	edi
    75 00000A5B 59                  <1> 	pop	ecx
    76 00000A5C 5B                  <1> 	pop	ebx
    77 00000A5D 58                  <1> 	pop	eax
    78                              <1> 
    79 00000A5E 89EC                <1> 	mov	esp, ebp
    80 00000A60 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00000A61 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 00000A62 9C                  <1> 	pushf
    86 00000A63 0E                  <1> 	push	cs
    87 00000A64 68[F4080000]        <1> 	push	int_stop
    88                              <1> 
    89 00000A69 B8[6F0A0000]        <1> 	mov	eax, .s0
    90 00000A6E CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 00000A6F 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 00000A78 44495620203E2000    <1>
   142                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 00000A80 60                  <1> 	pusha
     3 00000A81 1E                  <1> 	push	ds
     4 00000A82 06                  <1> 	push	es
     5                              <1> 
     6 00000A83 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 00000A87 8ED8                <1> 	mov	ds, ax
     8 00000A89 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000A8B E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 00000A8D 5068[A40A0000]E854- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 00000A95 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 00000A9C B020                <2>  mov al, %2
    16 00000A9E E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 00000AA0 07                  <1> 	pop	es
    20 00000AA1 1F                  <1> 	pop	ds
    21 00000AA2 61                  <1> 	popa
    22                              <1> 
    23 00000AA3 CF                  <1> 	iret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000AA4 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   143                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   144                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 00000ABC 55                  <1> 	push	ebp
     4 00000ABD 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000ABF 56                  <1> 	push	esi
     7 00000AC0 57                  <1> 	push	edi
     8 00000AC1 53                  <1> 	push	ebx
     9                              <1> 
    10 00000AC2 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000AC5 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 00000AC8 B800000000          <1> 	mov	eax, 0
    14 00000ACD 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000ACF 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000AD2 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000AD4 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 00000AD8 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 00000ADA 43                  <1> 	inc	ebx
    23 00000ADB 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 00000ADE 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000AE0 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000AE5 5B                  <1> 	pop	ebx
    30 00000AE6 5F                  <1> 	pop	edi
    31 00000AE7 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000AE8 89EC                <1> 	mov	esp, ebp
    34 00000AEA 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000AEB C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 00000AEC 55                  <1> 	push	ebp
    40 00000AED 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 00000AEF 56                  <1> 	push	esi
    43 00000AF0 53                  <1> 	push	ebx
    44 00000AF1 51                  <1> 	push	ecx
    45                              <1> 
    46 00000AF2 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000AF5 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000AF8 89D9                <1> 	mov	ecx, ebx
    50 00000AFA 41                  <1> 	inc	ecx
    51 00000AFB 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 00000AFE 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000B00 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000B02 8A450C              <1> 	mov	al, [ebp +12]
    60 00000B05 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000B09 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 00000B0C B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000B11 59                  <1> 	pop	ecx
    66 00000B12 5B                  <1> 	pop	ebx
    67 00000B13 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000B14 89EC                <1> 	mov	esp, ebp
    70 00000B16 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000B17 C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000B18 55                  <1> 	push	ebp
    77 00000B19 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 00000B1B 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 00000B1C 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 00000B1F 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000B22 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000B25 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000B28 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 00000B2B B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000B30 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000B31 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000B34 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000B37 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000B3E [680B0000]50E803FC- <1>
    95 00000B46 FFFF6683C414        <1>
    96 00000B4C 68[680B0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000B54 52E861F9FFFF6683C4- <1>
    96 00000B5D 10                  <1>
    97                              <1> 
    98 00000B5E 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000B61 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000B63 61                  <1> 	popa
   104                              <1> 
   105 00000B64 89EC                <1> 	mov	esp, ebp
   106 00000B66 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000B67 C3                  <1> 	ret
   109                              <1> 
   110 00000B68 2D2D00              <1> .tmp:	db	"--",0
   145                                  %include	"../modules/protect/call_gate.s"
     1                              <1> call_gate:
     2                              <1> 	;retf	4 * 4
     3                              <1> ; if SS_GATE_0 called
     4 00000B6B 55                  <1> 	push	ebp
     5 00000B6C 89E5                <1> 	mov	ebp, esp
     6                              <1> 
     7 00000B6E 60                  <1> 	pusha
     8 00000B6F 1E                  <1> 	push	ds
     9 00000B70 06                  <1> 	push	es
    10                              <1> 
    11 00000B71 66B81000            <1> 	mov	ax, 0x0010
    12 00000B75 8ED8                <1> 	mov	ds, ax
    13 00000B77 8EC0                <1> 	mov	es, ax
    14                              <1> 
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_1
    17                              <1> 	;je	.11L
    18                              <1> 
    19                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t0
    20                              <1> 	;jmp	.10E
    21                              <1> .11L:
    22                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t1
    23                              <1> .10E:
    24                              <1> 		
    25                              <1> 	;cdecl	itoa, esp, .t2, 8, 16, 0b0100
    26                              <1> 	;cdecl	draw_str, 0, 1, 0x010F, .t2
    27                              <1> 
    28                              <1> 	;cdecl	itoa, dword [ESP_COUNTER], .t3, 8, 16, 0b0100
    29                              <1> 	;cdecl	draw_str, 0, 2, 0x010F, .t3
    30                              <1> 	
    31                              <1> 
    32                              <1> 
    33                              <1> 	; ebp + 0 -- EBP
    34                              <1> 	; ebp + 4 -- EIP
    35                              <1> 	; ebp + 8 -- CS
    36 00000B79 8B450C              <1> 	mov	eax, dword[ebp +12]
    37 00000B7C 8B5D10              <1> 	mov	ebx, dword[ebp +16]
    38 00000B7F 8B4D14              <1> 	mov	ecx, dword[ebp +20]
    39 00000B82 8B5518              <1> 	mov	edx, dword[ebp +24]
    40 00000B85 52515350E82DF9FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx
    40 00000B8E 6683C410            <1>
    41                              <1> 	; wrapper
    42                              <1> 
    43 00000B92 07                  <1> 	pop	es
    44 00000B93 1F                  <1> 	pop	ds
    45 00000B94 61                  <1> 	popa
    46                              <1> 
    47 00000B95 89EC                <1> 	mov	esp, ebp
    48 00000B97 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000B98 CA1000              <1> 	retf	4 * 4	; 4 DWORDs
    51                              <1> 
    52                              <1> 
    53 00000B9B 7461736B5F3000      <1> .t0:	db	"task_0",0
    54 00000BA2 7461736B5F3100      <1> .t1:	db	"task_1",0
    55 00000BA9 2D2D2D2D2D2D2D2D00  <1> .t2:	db	"--------", 0
    56 00000BB2 2D2D2D2D2D2D2D2D00  <1> .t3:	db	"--------", 0
   146                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ; system calls
     2                              <1> trap_gate_81:	; system call 81, draw_char
     3                              <1> %ifdef	USE_TEST_AND_SET
     4 00000BBB 68[080C0000]E84B00- <1> 	cdecl	test_and_set, IN_USE_81
     4 00000BC3 00006683C404        <1>
     5                              <1> %endif
     6 00000BC9 50525153E8EAF7FFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
     6 00000BD2 6683C410            <1>
     7                              <1> %ifdef	USE_TEST_AND_SET
     8 00000BD6 C705[080C0000]0000- <1> 	mov	[IN_USE_81], dword 0
     8 00000BDE 0000                <1>
     9                              <1> %endif
    10 00000BE0 CF                  <1> 	iret
    11                              <1> 
    12                              <1> trap_gate_82:
    13                              <1> %ifdef	USE_TEST_AND_SET
    14 00000BE1 68[0C0C0000]E82500- <1> 	cdecl	test_and_set, IN_USE_82
    14 00000BE9 00006683C404        <1>
    15                              <1> %endif
    16 00000BEF 535251E87CF9FFFF66- <1> 	cdecl	draw_pixel, ecx, edx, ebx
    16 00000BF8 83C40C              <1>
    17                              <1> %ifdef	USE_TEST_AND_SET
    18 00000BFB C705[0C0C0000]0000- <1> 	mov	[IN_USE_82], dword 0
    18 00000C03 0000                <1>
    19                              <1> %endif
    20 00000C05 CF                  <1> 	iret
    21                              <1> 
    22 00000C06 00<rept>            <1> ALIGN	4,		db	0
    23 00000C08 00000000            <1> IN_USE_81:		dd	0
    24 00000C0C 00000000            <1> IN_USE_82:		dd	0
   147                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2 00000C10 55                  <1> 	push	ebp
     3 00000C11 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000C13 50                  <1> 	push	eax
     6 00000C14 53                  <1> 	push	ebx
     7                              <1> 
     8 00000C15 B800000000          <1> 	mov	eax, 0		; set bit
     9 00000C1A 8B5D08              <1> 	mov	ebx, [ebp + 8]	; global variable
    10                              <1> 
    11                              <1> .10L:
    12 00000C1D F00FAB03            <1> 	lock	bts [ebx], eax
    13 00000C21 7307                <1> 	jnc	.10E		; we can use registers
    14                              <1> .12L:
    15 00000C23 0FA303              <1> 	bt	[ebx], eax
    16 00000C26 72FB                <1> 	jc	.12L		; we can not use
    17                              <1> 
    18 00000C28 EBF3                <1> 	jmp	.10L
    19                              <1> .10E:
    20                              <1> 	
    21 00000C2A 5B                  <1> 	pop	ebx
    22 00000C2B 58                  <1> 	pop	eax
    23                              <1> 
    24 00000C2C 89EC                <1> 	mov	esp, ebp
    25 00000C2E 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000C2F C3                  <1> 	ret
    28                              <1> 
   148                                  %include	"../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 	; eax : return value
     3                              <1> 	; ebx : segment selector
     4                              <1> 
     5 00000C30 8B83[720F0000]      <1> 	mov	eax, [GDT + ebx + 2]
     6 00000C36 C1E008              <1> 	shl	eax, 8
     7 00000C39 8A83[770F0000]      <1> 	mov	al, [GDT + ebx + 7]
     8 00000C3F C1C808              <1> 	ror	eax, 8
     9                              <1> 
    10 00000C42 C3                  <1> 	ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 	; eax : tss address
    14 00000C43 DD7068              <1> 	fnsave	[eax + 104]
    15 00000C46 C780D4000000010000- <1> 	mov	[eax + 104 + 108], dword 1	; store flag or present flag(?)
    15 00000C4F 00                  <1>
    16                              <1> 	
    17 00000C50 C3                  <1> 	ret
    18                              <1> 
    19                              <1> load_fpu_context:
    20 00000C51 83B8D400000000      <1> 	cmp	[eax + 104 + 108], dword 0
    21 00000C58 7505                <1> 	jne	.10F
    22 00000C5A 9BDBE3              <1> 	finit					; not initialized yet
    23 00000C5D EB03                <1> 	jmp	.10E
    24                              <1> .10F:
    25 00000C5F DD6068              <1> 	frstor	[eax + 104]
    26                              <1> .10E:
    27 00000C62 C3                  <1> 	ret
    28                              <1> 
    29                              <1> int_nm:
    30 00000C63 60                  <1> 	pusha
    31 00000C64 06                  <1> 	push	es
    32 00000C65 1E                  <1> 	push	ds
    33                              <1> 
    34 00000C66 66B81000            <1> 	mov	ax, DS_KERNEL
    35 00000C6A 8EC0                <1> 	mov	es, ax
    36 00000C6C 8ED8                <1> 	mov	ds, ax
    37                              <1> 
    38 00000C6E 0F06                <1> 	clts
    39                              <1> 
    40 00000C70 8B3D[BC0C0000]      <1> 	mov	edi, [.last_tss]
    41 00000C76 0F00CE              <1> 	str	esi
    42 00000C79 83E6F8              <1> 	and	esi, ~0x0007	; exclude TI,RPL bits
    43                              <1> 
    44 00000C7C 83FF00              <1> 	cmp	edi, 0		; first use
    45 00000C7F 7420                <1> 	je	.10F
    46                              <1> 
    47 00000C81 39FE                <1> 	cmp	esi, edi
    48 00000C83 741A                <1> 	je	.12E
    49                              <1> 
    50 00000C85 FA                  <1> 	cli
    51                              <1> 
    52 00000C86 89FB                <1> 	mov	ebx, edi
    53 00000C88 E8A3FFFFFF          <1> 	call	get_tss_base	; eax is address to tss
    54 00000C8D E8B1FFFFFF          <1> 	call	save_fpu_context; eax used here
    55                              <1> 
    56 00000C92 89F3                <1> 	mov	ebx, esi
    57 00000C94 E897FFFFFF          <1> 	call	get_tss_base
    58 00000C99 E8B3FFFFFF          <1> 	call	load_fpu_context
    59                              <1> 
    60 00000C9E FB                  <1> 	sti
    61                              <1> .12E:
    62 00000C9F EB0E                <1> 	jmp	.10E
    63                              <1> .10F:
    64 00000CA1 FA                  <1> 	cli
    65                              <1> 
    66 00000CA2 89F3                <1> 	mov	ebx, esi
    67 00000CA4 E887FFFFFF          <1> 	call	get_tss_base
    68 00000CA9 E8A3FFFFFF          <1> 	call	load_fpu_context
    69                              <1> 
    70 00000CAE FB                  <1> 	sti
    71                              <1> .10E:
    72                              <1> 
    73 00000CAF 8935[BC0C0000]      <1> 	mov	[.last_tss], esi
    74                              <1> 
    75 00000CB5 1F                  <1> 	pop	ds
    76 00000CB6 07                  <1> 	pop	es
    77 00000CB7 61                  <1> 	popa
    78                              <1> 
    79 00000CB8 CF                  <1> 	iret
    80                              <1> 
    81 00000CB9 00<rept>            <1> ALIGN	4,	db	0
    82 00000CBC 00000000            <1> .last_tss:	dd	0
   149                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2 00000CC0 55                  <1> 	push	ebp
     3 00000CC1 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000CC3 50                  <1> 	push	eax
     6 00000CC4 51                  <1> 	push	ecx
     7                              <1> 
     8 00000CC5 8B4D08              <1> 	mov	ecx, [ebp + 8]
     9 00000CC8 A1[B40E0000]        <1> 	mov	eax, [TIMER_COUNT]
    10                              <1> .10L:
    11 00000CCD 3905[B40E0000]      <1> 	cmp	[TIMER_COUNT], eax
    12 00000CD3 74F8                <1> 	je	.10L
    13 00000CD5 40                  <1> 	inc	eax		; per 10ms
    14 00000CD6 E2F5                <1> 	loop	.10L		; 10ms * ecx]
    15                              <1> 
    16 00000CD8 59                  <1> 	pop	ecx
    17 00000CD9 58                  <1> 	pop	eax
    18                              <1> 
    19 00000CDA 89EC                <1> 	mov	esp, ebp
    20 00000CDC 5D                  <1> 	pop	ebp
    21                              <1> 
    22 00000CDD C3                  <1> 	ret
    23                              <1> 
   150                                  ;%include	"../modules/protect/int_pf.s"
   151                                  %include	"modules/paging.s"
     1                              <1> page_set_4m:
     2 00000CDE 55                  <1> 	push	ebp
     3 00000CDF 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000CE1 60                  <1> 	pusha
     6                              <1> 
     7 00000CE2 FC                  <1> 	cld
     8 00000CE3 8B7D08              <1> 	mov	edi, [ebp + 8]
     9 00000CE6 B800000000          <1> 	mov	eax, 0x00000000		; null page directory
    10 00000CEB B900040000          <1> 	mov	ecx, 1024		; 1024 directories
    11 00000CF0 F3AB                <1> 	rep	stosd
    12                              <1> 
    13 00000CF2 89F8                <1> 	mov	eax, edi		; we use memory after page directory
    14 00000CF4 2500F0FFFF          <1> 	and	eax, ~0x0000_0FFF
    15 00000CF9 83C807              <1> 	or	eax, 0b0000_0111	; enable read write
    16                              <1> 
    17 00000CFC 898700F0FFFF        <1> 	mov	[edi - (1024 * 4)], eax
    18                              <1> 	
    19 00000D02 B807000000          <1> 	mov	eax, 0x0000_0007
    20 00000D07 B900040000          <1> 	mov	ecx, 1024		; 1024 pages
    21                              <1> .10L:
    22 00000D0C AB                  <1> 	stosd
    23 00000D0D 0500100000          <1> 	add	eax, 0x0000_1000
    24 00000D12 E2F8                <1> 	loop	.10L
    25                              <1> 
    26 00000D14 61                  <1> 	popa
    27                              <1> 
    28 00000D15 89EC                <1> 	mov	esp, ebp
    29 00000D17 5D                  <1> 	pop	ebp
    30                              <1> 
    31 00000D18 C3                  <1> 	ret
    32                              <1> 
    33 00000D19 2D2D2D2D2D2D2D2D2D- <1> .t0:	db	"----------------", 0
    33 00000D22 2D2D2D2D2D2D2D00    <1>
    34                              <1> 
    35                              <1> init_page:
    36 00000D2A 60                  <1> 	pusha
    37 00000D2B 6800501000E8A9FFFF- <1> 	cdecl	page_set_4m, CR3_BASE
    37 00000D34 FF6683C404          <1>
    38 00000D39 6800002000E89BFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_4
    38 00000D42 FF6683C404          <1>
    39 00000D47 6800202000E88DFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_5
    39 00000D50 FF6683C404          <1>
    40 00000D55 6800402000E87FFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_6
    40 00000D5E FF6683C404          <1>
    41 00000D63 C7051C641000000000- <1> 	mov [CR3_BASE + 0x1000 + 0x107 * 4], dword 0
    41 00000D6C 00                  <1>
    42 00000D6D C7051C142000078010- <1> 	mov [CR3_TASK_4 + 0x1000 + 0x107 * 4], dword PARAM_TASK_4 + 7
    42 00000D76 00                  <1>
    43 00000D77 C7051C342000079010- <1> 	mov [CR3_TASK_5 + 0x1000 + 0x107 * 4], dword PARAM_TASK_5 + 7
    43 00000D80 00                  <1>
    44 00000D81 C7051C54200007A010- <1> 	mov [CR3_TASK_6 + 0x1000 + 0x107 * 4], dword PARAM_TASK_6 + 7
    44 00000D8A 00                  <1>
    45                              <1> 
    46 00000D8B 6A4068[14180000]68- <1> 	cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size
    46 00000D93 00801000E807F6FFFF- <1>
    46 00000D9C 6683C40C            <1>
    47 00000DA0 6A4068[54180000]68- <1> 	cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size
    47 00000DA8 00901000E8F2F5FFFF- <1>
    47 00000DB1 6683C40C            <1>
    48 00000DB5 6A4068[94180000]68- <1> 	cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size
    48 00000DBD 00A01000E8DDF5FFFF- <1>
    48 00000DC6 6683C40C            <1>
    49                              <1> 
    50                              <1> 	; [0x00000000] = 0x0
    51 00000DCA 61                  <1> 	popa
    52                              <1> 
    53 00000DCB C3                  <1> 	ret
    54                              <1> 
   152                                  %include	"modules/int_pf.s"
     1                              <1> int_pf:
     2 00000DCC 55                  <1> 	push	ebp
     3 00000DCD 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000DCF 60                  <1> 	pusha
     6 00000DD0 06                  <1> 	push	es
     7 00000DD1 1E                  <1> 	push	ds
     8                              <1> 
     9                              <1> 	; mov	ax, DS_KERNEL
    10                              <1> 	; mov	es, ax
    11                              <1> 	; mov	ds, ax
    12                              <1> 
    13 00000DD2 0F20D0              <1> 	mov	eax, cr2	; interrupt address
    14 00000DD5 2500F0FFFF          <1> 	and	eax, ~0x0FFF
    15 00000DDA 3D00701000          <1> 	cmp	eax, 0x0010_7000
    16 00000DDF 7521                <1> 	jne	.10F
    17                              <1> 	
    18 00000DE1 C7051C641000077010- <1> 	mov	[0x00106000 + 0x107 * 4], dword 0x0010_7007
    18 00000DEA 00                  <1>
    19                              <1> 	; 0x00107007 means 0x00107000 can use as read and write
    20 00000DEB 6A4068[D4170000]68- <1> 	cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    20 00000DF3 00701000E8A7F5FFFF- <1>
    20 00000DFC 6683C40C            <1>
    21                              <1> 
    22 00000E00 EB15                <1> 	jmp	.10E
    23                              <1> .10F:
    24 00000E02 83C404              <1> 	add	esp, 4
    25 00000E05 83C404              <1> 	add	esp, 4
    26 00000E08 61                  <1> 	popa
    27 00000E09 5D                  <1> 	pop	ebp
    28                              <1> 
    29 00000E0A 9C                  <1> 	pushf
    30 00000E0B 0E                  <1> 	push	cs
    31 00000E0C 68[F4080000]        <1> 	push	int_stop
    32                              <1> 
    33 00000E11 B8[210E0000]        <1> 	mov	eax, .s0
    34 00000E16 CF                  <1> 	iret			; kernel stop
    35                              <1> .10E:
    36 00000E17 1F                  <1> 	pop	ds
    37 00000E18 07                  <1> 	pop	es
    38 00000E19 61                  <1> 	popa
    39                              <1> 
    40 00000E1A 89EC                <1> 	mov	esp, ebp
    41 00000E1C 5D                  <1> 	pop	ebp
    42                              <1> 	
    43 00000E1D 83C404              <1> 	add	esp, 4	; error code clear
    44 00000E20 CF                  <1> 	iret
    45                              <1> 	
    46 00000E21 203C20504147452046- <1> .s0	db	" < PAGE FAULT > ", 0
    46 00000E2A 41554C54203E2000    <1>
    47                              <1> 
   153                                  ;%include	"../modules/protect/int_timer.s"
   154                                  %include	"modules/my_int_timer.s"
     1                              <1> int_timer:
     2 00000E32 60                  <1> 	pushad
     3 00000E33 06                  <1> 	push	es
     4 00000E34 1E                  <1> 	push	ds
     5                              <1> 
     6 00000E35 66B81000            <1> 	mov	ax, 0x10
     7 00000E39 8ED8                <1> 	mov	ds, ax
     8 00000E3B 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000E3D FF05[B40E0000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 00000E43 B020                <2>  mov al, %2
    12 00000E45 E620                <2>  out %1, al
    13                              <1> 	
    14 00000E47 660F00C8            <1> 	str	ax
    15 00000E4B 6683F830            <1> 	cmp	ax, SS_TASK_0
    16 00000E4F 7427                <1> 	je	.11L
    17 00000E51 6683F838            <1> 	cmp	ax, SS_TASK_1
    18 00000E55 742A                <1> 	je	.12L
    19 00000E57 6683F840            <1> 	cmp	ax, SS_TASK_2
    20 00000E5B 742D                <1> 	je	.13L
    21 00000E5D 6683F848            <1> 	cmp	ax, SS_TASK_3
    22 00000E61 7430                <1> 	je	.14L
    23 00000E63 6683F850            <1> 	cmp	ax, SS_TASK_4
    24 00000E67 7433                <1> 	je	.15L
    25 00000E69 6683F858            <1> 	cmp	ax, SS_TASK_5
    26 00000E6D 7436                <1> 	je	.16L
    27                              <1> 
    28 00000E6F EA000000003000      <1> 	jmp	SS_TASK_0:0
    29 00000E76 EB36                <1> 	jmp	.10E
    30                              <1> .11L:
    31 00000E78 EA000000003800      <1> 	jmp	SS_TASK_1:0
    32 00000E7F EB2D                <1> 	jmp	.10E
    33                              <1> .12L:
    34 00000E81 EA000000004000      <1> 	jmp	SS_TASK_2:0
    35 00000E88 EB24                <1> 	jmp	.10E
    36                              <1> .13L:
    37 00000E8A EA000000004800      <1> 	jmp	SS_TASK_3:0
    38 00000E91 EB1B                <1> 	jmp	.10E
    39                              <1> .14L:
    40 00000E93 EA000000005000      <1> 	jmp	SS_TASK_4:0
    41 00000E9A EB12                <1> 	jmp	.10E
    42                              <1> .15L:
    43 00000E9C EA000000005800      <1> 	jmp	SS_TASK_5:0
    44 00000EA3 EB09                <1> 	jmp	.10E
    45                              <1> .16L:
    46 00000EA5 EA000000006000      <1> 	jmp	SS_TASK_6:0
    47 00000EAC EB00                <1> 	jmp	.10E
    48                              <1> .10E:
    49                              <1> 
    50 00000EAE 1F                  <1> 	pop	ds
    51 00000EAF 07                  <1> 	pop	es
    52 00000EB0 61                  <1> 	popad
    53                              <1> 	
    54 00000EB1 CF                  <1> 	iret
    55                              <1> 
    56 00000EB2 00<rept>            <1> ALIGN	4,	db	0
    57 00000EB4 0000000000000000    <1> TIMER_COUNT:	dq	0
    58                              <1> 
    59                              <1> 
    60                              <1> int_en_timer:
    61 00000EBC 55                  <1> 	push	ebp
    62 00000EBD 89E5                <1> 	mov	ebp, esp
    63                              <1> 	
    64 00000EBF 50                  <1> 	push	eax
    65                              <1> 
    66                              <1> 	outp	0x43, 0b00_11_010_0
    66 00000EC0 B034                <2>  mov al, %2
    66 00000EC2 E643                <2>  out %1, al
    67                              <1> 	; counter 0
    68                              <1> 	; access mode, bottom -> top
    69                              <1> 	; mode, 2
    70                              <1> 	; bcd
    71                              <1> 
    72                              <1> 	outp	0x40, 0x9C
    72 00000EC4 B09C                <2>  mov al, %2
    72 00000EC6 E640                <2>  out %1, al
    73                              <1> 	outp	0x40, 0x2E
    73 00000EC8 B02E                <2>  mov al, %2
    73 00000ECA E640                <2>  out %1, al
    74                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    75                              <1> 
    76 00000ECC 58                  <1> 	pop	eax
    77                              <1> 
    78 00000ECD 89EC                <1> 	mov 	esp, ebp
    79 00000ECF 5D                  <1> 	pop	ebp
    80                              <1> 
    81 00000ED0 C3                  <1> 	ret
    82                              <1> 
    83                              <1> 
   155                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00000ED1 55                  <1> 	push	ebp
     3 00000ED2 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000ED4 50                  <1> 	push	eax
     6                              <1> 
     7 00000ED5 A1[B40E0000]        <1> 	mov	eax, [TIMER_COUNT]
     8 00000EDA C1E808              <1> 	shr	eax, 8
     9 00000EDD 3B05[080F0000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 00000EE3 741E                <1> 	je	.10E
    11                              <1> 
    12 00000EE5 A3[080F0000]        <1> 	mov	[.index], eax
    13 00000EEA 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 00000EED 8A80[0C0F0000]      <1> 	mov	al, [.table + eax]
    16 00000EF3 506A0F6A1D6A00E8BD- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 00000EFC F4FFFF6683C410      <1>
    17                              <1> .10E:
    18 00000F03 58                  <1> 	pop	eax
    19                              <1> 
    20 00000F04 89EC                <1> 	mov	esp, ebp
    21 00000F06 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00000F07 C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000F08 00000000            <1> .index:		dd	0
    27 00000F0C 7C2F2D5C            <1> .table:		dd	"|/-\"
   156                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 00000F10 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 00000F18 FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 00000F20 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 00000F28 FFFF000000FACF00    <1> .cs_task_1:	dq	0x00CF_FA00_0000_FFFF
     6 00000F30 FFFF000000F2CF00    <1> .ds_task_1:	dq	0x00CF_F200_0000_FFFF
     7 00000F38 FFFF000000FACF00    <1> .cs_task_2:	dq	0x00CF_FA00_0000_FFFF
     8 00000F40 FFFF000000F2CF00    <1> .ds_task_2:	dq	0x00CF_F200_0000_FFFF
     9 00000F48 FFFF000000FACF00    <1> .cs_task_3:	dq	0x00CF_FA00_0000_FFFF
    10 00000F50 FFFF000000F2CF00    <1> .ds_task_3:	dq	0x00CF_F200_0000_FFFF
    11 00000F58 FFFF000000F2CF00    <1> .ds_task_4:	dq	0x00CF_F200_0000_FFFF
    12 00000F60 FFFF000000F2CF00    <1> .ds_task_5:	dq	0x00CF_F200_0000_FFFF
    13 00000F68 FFFF000000F2CF00    <1> .ds_task_6:	dq	0x00CF_F200_0000_FFFF
    14                              <1> .end:
    15                              <1> 
    16                              <1> ; ldt indexes
    17                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    18                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    19                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4 | 3	; offset | (use LDT bit) | (level = 3)
    20                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4 | 3	
    21                              <1> CS_TASK_2:	equ	(.cs_task_2 - LDT) | 4 | 3
    22                              <1> DS_TASK_2:	equ	(.ds_task_2 - LDT) | 4 | 3	
    23                              <1> CS_TASK_3:	equ	(.cs_task_3 - LDT) | 4 | 3
    24                              <1> DS_TASK_3:	equ	(.ds_task_3 - LDT) | 4 | 3
    25                              <1> DS_TASK_4:	equ	(.ds_task_4 - LDT) | 4 | 3
    26                              <1> DS_TASK_5:	equ	(.ds_task_5 - LDT) | 4 | 3
    27                              <1> DS_TASK_6:	equ	(.ds_task_6 - LDT) | 4 | 3
    28                              <1> 
    29                              <1> LDT_LIMIT	equ	.end - LDT - 1
    30                              <1> 
    31                              <1> 
    32 00000F70 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    33 00000F78 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    34 00000F80 FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    35 00000F88 FFFF0000009A0F00    <1> .cs_bit16:	dq	0x000F_9A00_0000_FFFF
    36 00000F90 FFFF000000920F00    <1> .ds_bit16:	dq	0x000F_9200_0000_FFFF
    37 00000F98 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    38 00000FA0 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    39 00000FA8 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    40 00000FB0 6700000000890000    <1> .tss_2:		dq	0x0000_8900_0000_0067
    41 00000FB8 6700000000890000    <1> .tss_3:		dq	0x0000_8900_0000_0067
    42 00000FC0 6700000000890000    <1> .tss_4:		dq	0x0000_8900_0000_0067
    43 00000FC8 6700000000890000    <1> .tss_5:		dq	0x0000_8900_0000_0067
    44 00000FD0 6700000000890000    <1> .tss_6:		dq	0x0000_8900_0000_0067
    45 00000FD8 0000080004EC0000    <1> .call_gate:	dq	0x0000_EC04_0008_0000
    46                              <1> .end:
    47                              <1> 
    48                              <1> ; gdt indexes
    49                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    50                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    51                              <1> SS_LDT		equ	.ldt - GDT
    52                              <1> SS_TASK_0	equ	.tss_0 - GDT		; jump point
    53                              <1> SS_TASK_1	equ	.tss_1 - GDT
    54                              <1> SS_TASK_2	equ	.tss_2 - GDT
    55                              <1> SS_TASK_3	equ	.tss_3 - GDT
    56                              <1> SS_TASK_4	equ	.tss_4 - GDT
    57                              <1> SS_TASK_5	equ	.tss_5 - GDT
    58                              <1> SS_TASK_6	equ	.tss_6 - GDT
    59                              <1> SS_GATE_0	equ	.call_gate - GDT
    60                              <1> 
    61 00000FE0 6F00                <1> GDTR:		dw	GDT.end - GDT - 1
    62 00000FE2 [700F0000]          <1> 		dd	GDT
    63                              <1> 
    64                              <1> TSS_0:
    65 00000FE6 00000000            <1> .link:    dd 0
    66 00000FEA 00321000            <1> .esp0:    dd SP_TASK_0 - STACK_SIZE / 2
    67 00000FEE 10000000            <1> .ss0:     dd DS_KERNEL
    68 00000FF2 00000000            <1> .esp1:    dd 0
    69 00000FF6 00000000            <1> .ss1:     dd 0
    70 00000FFA 00000000            <1> .esp2:    dd 0
    71 00000FFE 00000000            <1> .ss2:     dd 0
    72 00001002 00501000            <1> .cr3:     dd CR3_BASE
    73 00001006 00000000            <1> .eip:     dd 0
    74 0000100A 00000000            <1> .eflags:  dd 0
    75 0000100E 00000000            <1> .eax:     dd 0
    76 00001012 00000000            <1> .ecx:     dd 0
    77 00001016 00000000            <1> .edx:     dd 0
    78 0000101A 00000000            <1> .ebx:     dd 0
    79 0000101E 00000000            <1> .esp:     dd 0
    80 00001022 00000000            <1> .ebp:     dd 0
    81 00001026 00000000            <1> .esi:     dd 0
    82 0000102A 00000000            <1> .edi:     dd 0
    83 0000102E 00000000            <1> .es:      dd 0
    84 00001032 00000000            <1> .cs:      dd 0
    85 00001036 00000000            <1> .ss:      dd 0
    86 0000103A 00000000            <1> .ds:      dd 0
    87 0000103E 00000000            <1> .fs:      dd 0
    88 00001042 00000000            <1> .gs:      dd 0
    89 00001046 00000000            <1> .ldt:     dd 0
    90 0000104A 00000000            <1> .io:      dd 0
    91 0000104E 00<rept>            <1> .fp_save: times 108 + 4 db 0
    92                              <1> 
    93                              <1> TSS_1:
    94 000010BE 00000000            <1> .link:    dd 0
    95 000010C2 00361000            <1> .esp0:    dd SP_TASK_1 - STACK_SIZE / 2
    96 000010C6 10000000            <1> .ss0:     dd DS_KERNEL
    97 000010CA 00000000            <1> .esp1:    dd 0
    98 000010CE 00000000            <1> .ss1:     dd 0
    99 000010D2 00000000            <1> .esp2:    dd 0
   100 000010D6 00000000            <1> .ss2:     dd 0
   101 000010DA 00501000            <1> .cr3:     dd CR3_BASE
   102 000010DE [CE150000]          <1> .eip:     dd task_1	; start at task_1
   103 000010E2 02020000            <1> .eflags:  dd 0x0202
   104 000010E6 00000000            <1> .eax:     dd 0
   105 000010EA 00000000            <1> .ecx:     dd 0
   106 000010EE 00000000            <1> .edx:     dd 0
   107 000010F2 00000000            <1> .ebx:     dd 0
   108 000010F6 00381000            <1> .esp:     dd SP_TASK_1
   109 000010FA 00000000            <1> .ebp:     dd 0
   110 000010FE 00000000            <1> .esi:     dd 0
   111 00001102 00000000            <1> .edi:     dd 0
   112 00001106 27000000            <1> .es:      dd DS_TASK_1
   113 0000110A 1F000000            <1> .cs:      dd CS_TASK_1
   114 0000110E 27000000            <1> .ss:      dd DS_TASK_1
   115 00001112 27000000            <1> .ds:      dd DS_TASK_1
   116 00001116 27000000            <1> .fs:      dd DS_TASK_1
   117 0000111A 27000000            <1> .gs:      dd DS_TASK_1
   118 0000111E 28000000            <1> .ldt:     dd SS_LDT
   119 00001122 00000000            <1> .io:      dd 0
   120 00001126 00<rept>            <1> .fp_save: times 108 + 4 db 0
   121                              <1> 
   122                              <1> TSS_2:
   123 00001196 00000000            <1> .link:    dd 0
   124 0000119A 003A1000            <1> .esp0:    dd SP_TASK_2 - STACK_SIZE / 2
   125 0000119E 10000000            <1> .ss0:     dd DS_KERNEL
   126 000011A2 00000000            <1> .esp1:    dd 0
   127 000011A6 00000000            <1> .ss1:	    dd 0
   128 000011AA 00000000            <1> .esp2:    dd 0
   129 000011AE 00000000            <1> .ss2:     dd 0
   130 000011B2 00501000            <1> .cr3:     dd CR3_BASE
   131 000011B6 [03160000]          <1> .eip:     dd task_2	; start at task_2
   132 000011BA 02020000            <1> .eflags:  dd 0x0202
   133 000011BE 00000000            <1> .eax:     dd 0
   134 000011C2 00000000            <1> .ecx:     dd 0
   135 000011C6 00000000            <1> .edx:     dd 0
   136 000011CA 00000000            <1> .ebx:			dd 0
   137 000011CE 003C1000            <1> .esp:			dd SP_TASK_2
   138 000011D2 00000000            <1> .ebp:			dd 0
   139 000011D6 00000000            <1> .esi:			dd 0
   140 000011DA 00000000            <1> .edi:			dd 0
   141 000011DE 37000000            <1> .es:			dd DS_TASK_2
   142 000011E2 2F000000            <1> .cs:			dd CS_TASK_2
   143 000011E6 37000000            <1> .ss:			dd DS_TASK_2
   144 000011EA 37000000            <1> .ds:			dd DS_TASK_2
   145 000011EE 37000000            <1> .fs:			dd DS_TASK_2
   146 000011F2 37000000            <1> .gs:			dd DS_TASK_2
   147 000011F6 28000000            <1> .ldt:			dd SS_LDT
   148 000011FA 00000000            <1> .io:			dd 0
   149 000011FE 00<rept>            <1> .fp_save: times 108 + 4 db 0
   150                              <1> 
   151                              <1> TSS_3:
   152 0000126E 00000000            <1> .link:    dd 0
   153 00001272 003E1000            <1> .esp0:    dd SP_TASK_3 - 512
   154 00001276 10000000            <1> .ss0:     dd DS_KERNEL
   155 0000127A 00000000            <1> .esp1:    dd 0
   156 0000127E 00000000            <1> .ss1:     dd 0
   157 00001282 00000000            <1> .esp2:    dd 0
   158 00001286 00000000            <1> .ss2:     dd 0
   159 0000128A 00501000            <1> .cr3:     dd CR3_BASE
   160 0000128E [D4160000]          <1> .eip:     dd task_3
   161 00001292 02020000            <1> .eflags:  dd 0x0202
   162 00001296 00000000            <1> .eax:     dd 0
   163 0000129A 00000000            <1> .ecx:     dd 0
   164 0000129E 00000000            <1> .edx:     dd 0
   165 000012A2 00000000            <1> .ebx:     dd 0
   166 000012A6 00401000            <1> .esp:     dd SP_TASK_3
   167 000012AA 00000000            <1> .ebp:     dd 0
   168 000012AE 00000000            <1> .esi:     dd 0
   169 000012B2 00000000            <1> .edi:     dd 0
   170 000012B6 47000000            <1> .es:      dd DS_TASK_3
   171 000012BA 3F000000            <1> .cs:      dd CS_TASK_3
   172 000012BE 47000000            <1> .ss:      dd DS_TASK_3
   173 000012C2 47000000            <1> .ds:      dd DS_TASK_3
   174 000012C6 47000000            <1> .fs:      dd DS_TASK_3
   175 000012CA 47000000            <1> .gs:      dd DS_TASK_3
   176 000012CE 28000000            <1> .ldt:     dd SS_LDT
   177 000012D2 00000000            <1> .io:      dd 0
   178 000012D6 00<rept>            <1> .fp_save: times 108 + 4 db 0
   179                              <1> 
   180                              <1> TSS_4:
   181 00001346 00000000            <1> .link:    dd 0
   182 0000134A 00421000            <1> .esp0:    dd SP_TASK_4 - 512
   183 0000134E 10000000            <1> .ss0:     dd DS_KERNEL
   184 00001352 00000000            <1> .esp1:    dd 0
   185 00001356 00000000            <1> .ss1:     dd 0
   186 0000135A 00000000            <1> .esp2:    dd 0
   187 0000135E 00000000            <1> .ss2:     dd 0
   188 00001362 00002000            <1> .cr3:     dd CR3_TASK_4
   189 00001366 [D4160000]          <1> .eip:     dd task_3
   190 0000136A 02020000            <1> .eflags:  dd 0x0202
   191 0000136E 00000000            <1> .eax:     dd 0
   192 00001372 00000000            <1> .ecx:     dd 0
   193 00001376 00000000            <1> .edx:     dd 0
   194 0000137A 00000000            <1> .ebx:     dd 0
   195 0000137E 00441000            <1> .esp:     dd SP_TASK_4
   196 00001382 00000000            <1> .ebp:     dd 0
   197 00001386 00000000            <1> .esi:     dd 0
   198 0000138A 00000000            <1> .edi:     dd 0
   199 0000138E 4F000000            <1> .es:      dd DS_TASK_4
   200 00001392 3F000000            <1> .cs:      dd CS_TASK_3
   201 00001396 4F000000            <1> .ss:      dd DS_TASK_4
   202 0000139A 4F000000            <1> .ds:      dd DS_TASK_4
   203 0000139E 4F000000            <1> .fs:      dd DS_TASK_4
   204 000013A2 4F000000            <1> .gs:      dd DS_TASK_4
   205 000013A6 28000000            <1> .ldt:     dd SS_LDT
   206 000013AA 00000000            <1> .io:      dd 0
   207 000013AE 00<rept>            <1> .fp_save: times 108 + 4 db 0
   208                              <1> 
   209                              <1> TSS_5:
   210 0000141E 00000000            <1> .link:    dd 0
   211 00001422 00461000            <1> .esp0:    dd SP_TASK_5 - 512
   212 00001426 10000000            <1> .ss0:     dd DS_KERNEL
   213 0000142A 00000000            <1> .esp1:    dd 0
   214 0000142E 00000000            <1> .ss1:     dd 0
   215 00001432 00000000            <1> .esp2:    dd 0
   216 00001436 00000000            <1> .ss2:     dd 0
   217 0000143A 00202000            <1> .cr3:     dd CR3_TASK_5
   218 0000143E [D4160000]          <1> .eip:     dd task_3
   219 00001442 02020000            <1> .eflags:  dd 0x0202
   220 00001446 00000000            <1> .eax:     dd 0
   221 0000144A 00000000            <1> .ecx:     dd 0
   222 0000144E 00000000            <1> .edx:     dd 0
   223 00001452 00000000            <1> .ebx:     dd 0
   224 00001456 00481000            <1> .esp:     dd SP_TASK_5
   225 0000145A 00000000            <1> .ebp:     dd 0
   226 0000145E 00000000            <1> .esi:     dd 0
   227 00001462 00000000            <1> .edi:     dd 0
   228 00001466 57000000            <1> .es:      dd DS_TASK_5
   229 0000146A 3F000000            <1> .cs:      dd CS_TASK_3
   230 0000146E 57000000            <1> .ss:      dd DS_TASK_5
   231 00001472 57000000            <1> .ds:      dd DS_TASK_5
   232 00001476 57000000            <1> .fs:      dd DS_TASK_5
   233 0000147A 57000000            <1> .gs:      dd DS_TASK_5
   234 0000147E 28000000            <1> .ldt:     dd SS_LDT
   235 00001482 00000000            <1> .io:      dd 0
   236 00001486 00<rept>            <1> .fp_save: times 108 + 4 db 0
   237                              <1> 
   238                              <1> TSS_6:
   239 000014F6 00000000            <1> .link:    dd 0
   240 000014FA 004A1000            <1> .esp0:    dd SP_TASK_6 - 512
   241 000014FE 10000000            <1> .ss0:     dd DS_KERNEL
   242 00001502 00000000            <1> .esp1:    dd 0
   243 00001506 00000000            <1> .ss1:     dd 0
   244 0000150A 00000000            <1> .esp2:    dd 0
   245 0000150E 00000000            <1> .ss2:     dd 0
   246 00001512 00402000            <1> .cr3:     dd CR3_TASK_6
   247 00001516 [D4160000]          <1> .eip:     dd task_3
   248 0000151A 02020000            <1> .eflags:  dd 0x0202
   249 0000151E 00000000            <1> .eax:     dd 0
   250 00001522 00000000            <1> .ecx:     dd 0
   251 00001526 00000000            <1> .edx:     dd 0
   252 0000152A 00000000            <1> .ebx:     dd 0
   253 0000152E 004C1000            <1> .esp:     dd SP_TASK_6
   254 00001532 00000000            <1> .ebp:     dd 0
   255 00001536 00000000            <1> .esi:     dd 0
   256 0000153A 00000000            <1> .edi:     dd 0
   257 0000153E 5F000000            <1> .es:      dd DS_TASK_6
   258 00001542 3F000000            <1> .cs:      dd CS_TASK_3
   259 00001546 5F000000            <1> .ss:      dd DS_TASK_6
   260 0000154A 5F000000            <1> .ds:      dd DS_TASK_6
   261 0000154E 5F000000            <1> .fs:      dd DS_TASK_6
   262 00001552 5F000000            <1> .gs:      dd DS_TASK_6
   263 00001556 28000000            <1> .ldt:     dd SS_LDT
   264 0000155A 00000000            <1> .io:      dd 0
   265 0000155E 00<rept>            <1> .fp_save:	times 108 + 4 db 0
   266                              <1> 
   157                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 000015CE 68[FC150000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 000015D6 006A3FE8DDEEFFFF66- <1>
     2 000015DF 83C410              <1>
     3                              <1> 	; cdecl	itoa, esp, .t0, 8, 16, 0b0100
     4                              <1> 	; cdecl	draw_str, 0, 2, 0x010F, .s0
     5                              <1> 	;mov	[ESP_COUNTER], esp
     6                              <1> 	; task_1 dose not have level 0
     7                              <1> 	; cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
     8                              <1> .10L:
     9                              <1> 	;cdecl	itoa, esp, .t0, 8, 16, 0b0100	
    10                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .t0
    11                              <1> 	;mov	[ESP_COUNTER], esp
    12                              <1> 	
    13                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
    14                              <1> 	
    15 000015E2 A1[EC020000]        <1> 	mov	eax, [RTC_TIME]
    16 000015E7 5068000700006A006A- <1> 	cdecl	draw_time, 72, 0, 0x0700, eax
    16 000015F0 48E8E0F1FFFF6683C4- <1>
    16 000015F9 10                  <1>
    17                              <1> 
    18                              <1> 	; jmp	SS_TASK_0:0	
    19                              <1> 
    20 000015FA EBE6                <1> 	jmp	.10L
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24 000015FC 5461736B2D3100      <1> .s0	db	"Task-1", 0
   158                                  %include	"task/task_2.s"
     1                              <1> task_2:
     2 00001603 68[C6160000]6A076A- <1> 	cdecl	draw_str, 63, 1, 0x07, .s0
     2 0000160B 016A3FE8A8EEFFFF66- <1>
     2 00001614 83C410              <1>
     3                              <1> 	
     4 00001617 DB05[B4160000]      <1> 	fild	dword [.c1000]
     5 0000161D D9EB                <1> 	fldpi
     6 0000161F DA35[B8160000]      <1> 	fidiv	dword [.c180]
     7 00001625 D9EB                <1> 	fldpi
     8 00001627 DCC0                <1> 	fadd	st0, st0
     9 00001629 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 0000162B D8C2                <1> 	fadd	st0, st2
    14 0000162D D9F8                <1> 	fprem
    15 0000162F D9C0                <1> 	fld	st0	; copy st0
    16 00001631 D9FE                <1> 	fsin
    17 00001633 D8CC                <1> 	fmul	st0, st4
    18 00001635 DF35[BC160000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 0000163B A1[BC160000]        <1> 	mov	eax, [.bcd]
    21 00001640 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 00001642 250F0F0000          <1> 	and	eax, 0x0F0F
    24 00001647 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 0000164C C1EB04              <1> 	shr	ebx, 4
    27 0000164F 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 00001655 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 0000165B 883D[CE160000]      <1> 	mov	[.s2 + 0], bh
    31 00001661 8825[D0160000]      <1> 	mov	[.s3 + 0], ah
    32 00001667 881D[D1160000]      <1> 	mov	[.s3 + 1], bl
    33 0000166D A2[D2160000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 00001672 B807000000          <1> 	mov	eax, 7		; sign bit
    36 00001677 0FA305[C5160000]    <1> 	bt	[.bcd + 9], eax
    37 0000167E 7209                <1> 	jc	.10F
    38                              <1> 	
    39 00001680 C605[CD160000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 00001687 EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 00001689 C605[CD160000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 00001690 68[CD160000]6A076A- <1> 	cdecl	draw_str, 72, 1, 0x07, .s1
    44 00001698 016A48E81BEEFFFF66- <1>
    44 000016A1 83C410              <1>
    45                              <1> 	
    46 000016A4 6A0AE815F6FFFF6683- <1> 	cdecl	wait_tick, 10
    46 000016AD C404                <1>
    47                              <1> 
    48 000016AF E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 000016B4 E8030000            <1> .c1000	dd	1000
    53 000016B8 B4000000            <1> .c180	dd	180
    54 000016BC 00<rept>            <1> .bcd:	times	10	db	0x00
    55 000016C6 5461736B2D3200      <1> .s0	db	"Task-2", 0
    56 000016CD 2D                  <1> .s1:	db	"-"
    57 000016CE 302E                <1> .s2:	db	"0."
    58 000016D0 30303000            <1> .s3:	db	"000", 0
   159                                  %include	"task/task_3.s"
     1                              <1> task_3:
     2                              <1> 	; push	ebp
     3 000016D4 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000016D6 6A00                <1> 	push	dword 0	; origin x
     6 000016D8 6A00                <1> 	push	dword 0	; origin y
     7 000016DA 6A00                <1> 	push	dword 0	; 
     8 000016DC 6A00                <1> 	push	dword 0
     9 000016DE 6A00                <1> 	push	dword 0
    10                              <1> 
    11                              <1> 
    12 000016E0 BE00701000          <1> 	mov	esi, 0x0010_7000
    13                              <1> 
    14 000016E5 8B06                <1> 	mov	eax, [esi + rose.x0]
    15 000016E7 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    16                              <1> 
    17 000016EA C1E803              <1> 	shr	eax, 3		; eax is x
    18 000016ED C1EB04              <1> 	shr	ebx, 4		; ebx is y
    19 000016F0 4B                  <1> 	dec	ebx
    20 000016F1 8B4E24              <1> 	mov	ecx, [esi + rose.color_s]
    21 000016F4 8D5630              <1> 	lea	edx, [esi + rose.title]
    22                              <1> 
    23 000016F7 52515350E8BBEDFFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx	; draw title
    23 00001700 6683C410            <1>
    24                              <1> 
    25 00001704 8B06                <1> 	mov	eax, [esi + rose.x0]
    26 00001706 8B5E08              <1> 	mov	ebx, [esi + rose.x1]
    27 00001709 29C3                <1> 	sub	ebx, eax
    28 0000170B D1EB                <1> 	shr	ebx, 1			; half of size
    29 0000170D 01C3                <1> 	add	ebx, eax		; origin x
    30 0000170F 895DFC              <1> 	mov	[ebp - 4], ebx
    31                              <1> 
    32 00001712 8B4604              <1> 	mov	eax, [esi + rose.y0]
    33 00001715 8B5E0C              <1> 	mov	ebx, [esi + rose.y1]
    34 00001718 29C3                <1> 	sub	ebx, eax
    35 0000171A D1EB                <1> 	shr	ebx, 1
    36 0000171C 01C3                <1> 	add	ebx, eax
    37 0000171E 895DF8              <1> 	mov	[ebp - 8], ebx
    38                              <1> 
    39 00001721 8B06                <1> 	mov	eax, [esi + rose.x0]	; x start
    40 00001723 8B5DF8              <1> 	mov	ebx, [ebp - 8]		; y
    41 00001726 8B4E08              <1> 	mov	ecx, [esi + rose.x1]	; x end
    42                              <1> 
    43 00001729 FF761853515350E8FF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; x axis
    43 00001732 EEFFFF6683C414      <1>
    44                              <1> 
    45 00001739 8B4604              <1> 	mov	eax, [esi + rose.y0]	; y start
    46 0000173C 8B5DFC              <1> 	mov	ebx, [ebp - 4]		; x
    47 0000173F 8B4E0C              <1> 	mov	ecx, [esi + rose.y1]	; y end
    48                              <1> 
    49 00001742 FF761C51535053E8E6- <1> 	cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
    49 0000174B EEFFFF6683C414      <1>
    50                              <1> 
    51 00001752 8B06                <1> 	mov	eax, [esi + rose.x0]
    52 00001754 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    53 00001757 8B4E08              <1> 	mov	ecx, [esi + rose.x1]
    54 0000175A 8B560C              <1> 	mov	edx, [esi + rose.y1]
    55                              <1> 
    56 0000175D FF762052515350E87C- <1> 	cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
    56 00001766 EFFFFF6683C414      <1>
    57                              <1> 
    58 0000176D 8B4608              <1> 	mov	eax, [esi + rose.x1]
    59 00001770 2B06                <1> 	sub	eax, [esi + rose.x0]
    60 00001772 D1E8                <1> 	shr	eax, 1
    61 00001774 89C3                <1> 	mov	ebx, eax
    62 00001776 C1EB04              <1> 	shr	ebx, 4
    63 00001779 29D8                <1> 	sub	eax, ebx
    64                              <1> 	; eax -= eax / 16
    65                              <1> 
    66 0000177B FF7614FF761050E84D- <1> 	cdecl	fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
    66 00001784 0100006683C40C      <1>
    67                              <1> .10L:
    68                              <1> 
    69 0000178B 8D5DF4              <1> 	lea	ebx, [ebp - 12]	; x position address
    70 0000178E 8D4DF0              <1> 	lea	ecx, [ebp - 16]	; y position address
    71 00001791 8B45EC              <1> 	mov	eax, [ebp - 20]	; t
    72                              <1> 
    73 00001794 505153E85201000066- <1> 	cdecl	fpu_rose_update, ebx, ecx, eax
    73 0000179D 83C40C              <1>
    74                              <1> 
    75 000017A0 BA00000000          <1> 	mov	edx, 0
    76 000017A5 40                  <1> 	inc	eax
    77 000017A6 BBA08C0000          <1> 	mov	ebx, 360 * 100
    78 000017AB F7F3                <1> 	div	ebx
    79                              <1> 	; EDX:EAX div ebx. EAX : /, EDX : %.
    80 000017AD 8955EC              <1> 	mov	[ebp -20], edx
    81                              <1> 
    82 000017B0 8B4DF4              <1> 	mov	ecx, [ebp -12]	; x = 0
    83 000017B3 8B55F0              <1> 	mov	edx, [ebp -16]	; y = 0
    84                              <1> 
    85 000017B6 034DFC              <1> 	add	ecx, [ebp - 4]	; x += X
    86 000017B9 0355F8              <1> 	add	edx, [ebp - 8]	; t += Y
    87                              <1> 
    88 000017BC 8B5E28              <1> 	mov	ebx, [esi + rose.color_f]
    89 000017BF CD82                <1> 	int	0x82		; draw_pixel at (ecx, edx). color is ebx
    90                              <1> 
    91 000017C1 6A02E8F8F4FFFF6683- <1> 	cdecl	wait_tick, 2
    91 000017CA C404                <1>
    92                              <1> 
    93 000017CC 8B5E2C              <1> 	mov	ebx, [esi + rose.color_b]
    94 000017CF CD82                <1> 	int	0x82
    95                              <1> 	
    96 000017D1 EBB8                <1> 	jmp	.10L
    97                              <1> 
    98 000017D3 00                  <1> ALIGN	4,	db	0
    99                              <1> 
   100                              <1> ALIGN 4, db 0
   101                              <1> DRAW_PARAM:
   102                              <1> .t3:
   103                              <1>     istruc rose
   104 000017D4 20000000            <1>         at rose.x0, dd 32
   105 000017D8 20000000            <1>         at rose.y0, dd 32
   106 000017DC D0000000            <1>         at rose.x1, dd 208
   107 000017E0 D0000000            <1>         at rose.y1, dd 208
   108                              <1> 
   109 000017E4 02000000            <1>         at rose.n, dd 2
   110 000017E8 01000000            <1>         at rose.d, dd 1
   111                              <1> 
   112 000017EC 07000000            <1>         at rose.color_x, dd 0x0007
   113 000017F0 07000000            <1>         at rose.color_y, dd 0x0007
   114 000017F4 0F000000            <1>         at rose.color_z, dd 0x000F
   115 000017F8 0F030000            <1>         at rose.color_s, dd 0x030F
   116 000017FC 0F000000            <1>         at rose.color_f, dd 0x000F
   117 00001800 03000000            <1>         at rose.color_b, dd 0x0003
   118                              <1> 
   119 00001804 5461736B2D3300      <1>         at rose.title, db "Task-3", 0
   120 0000180B 00<rept>            <1>     iend
   121                              <1> 
   122                              <1> .t4:
   123                              <1>     istruc rose
   124 00001814 F8000000            <1>         at rose.x0, dd 248
   125 00001818 20000000            <1>         at rose.y0, dd 32
   126 0000181C A8010000            <1>         at rose.x1, dd 424
   127 00001820 D0000000            <1>         at rose.y1, dd 208
   128                              <1> 
   129 00001824 03000000            <1>         at rose.n, dd 3
   130 00001828 01000000            <1>         at rose.d, dd 1
   131                              <1> 
   132 0000182C 07000000            <1>         at rose.color_x, dd 0x0007
   133 00001830 07000000            <1>         at rose.color_y, dd 0x0007
   134 00001834 0F000000            <1>         at rose.color_z, dd 0x000F
   135 00001838 0F040000            <1>         at rose.color_s, dd 0x040F
   136 0000183C 0F000000            <1>         at rose.color_f, dd 0x000F
   137 00001840 04000000            <1>         at rose.color_b, dd 0x0004
   138                              <1> 
   139 00001844 5461736B2D3400      <1>         at rose.title, db "Task-4", 0
   140 0000184B 00<rept>            <1>     iend
   141                              <1> 
   142                              <1> .t5:
   143                              <1>     istruc rose
   144 00001854 20000000            <1>         at rose.x0, dd 32
   145 00001858 10010000            <1>         at rose.y0, dd 272
   146 0000185C D0000000            <1>         at rose.x1, dd 208
   147 00001860 C0010000            <1>         at rose.y1, dd 448
   148                              <1> 
   149 00001864 02000000            <1>         at rose.n, dd 2
   150 00001868 06000000            <1>         at rose.d, dd 6
   151                              <1> 
   152 0000186C 07000000            <1>         at rose.color_x, dd 0x0007
   153 00001870 07000000            <1>         at rose.color_y, dd 0x0007
   154 00001874 0F000000            <1>         at rose.color_z, dd 0x000F
   155 00001878 0F050000            <1>         at rose.color_s, dd 0x050F
   156 0000187C 0F000000            <1>         at rose.color_f, dd 0x000F
   157 00001880 05000000            <1>         at rose.color_b, dd 0x0005
   158                              <1> 
   159 00001884 5461736B2D3500      <1>         at rose.title, db "Task-5", 0
   160 0000188B 00<rept>            <1>     iend
   161                              <1> 
   162                              <1> .t6:
   163                              <1>     istruc rose
   164 00001894 F8000000            <1>         at rose.x0, dd 248
   165 00001898 10010000            <1>         at rose.y0, dd 272
   166 0000189C A8010000            <1>         at rose.x1, dd 424
   167 000018A0 C0010000            <1>         at rose.y1, dd 448
   168                              <1> 
   169 000018A4 04000000            <1>         at rose.n, dd 4
   170 000018A8 06000000            <1>         at rose.d, dd 6
   171                              <1> 
   172 000018AC 07000000            <1>         at rose.color_x, dd 0x0007
   173 000018B0 07000000            <1>         at rose.color_y, dd 0x0007
   174 000018B4 0F000000            <1>         at rose.color_z, dd 0x000F
   175 000018B8 0F060000            <1>         at rose.color_s, dd 0x060F
   176 000018BC 0F000000            <1>         at rose.color_f, dd 0x000F
   177 000018C0 06000000            <1>         at rose.color_b, dd 0x0006
   178                              <1> 
   179 000018C4 5461736B2D3600      <1>         at rose.title, db "Task-6", 0
   180 000018CB 00<rept>            <1>     iend
   181                              <1> 
   182                              <1> 
   183                              <1> 
   184                              <1> fpu_rose_init:	;	fpu_rose_init(A,n,d)
   185 000018D4 55                  <1> 	push	ebp
   186 000018D5 89E5                <1> 	mov	ebp, esp
   187                              <1> 
   188 000018D7 68B4000000          <1> 	push	dword 180
   189                              <1> 
   190 000018DC D9EB                <1> 	fldpi
   191 000018DE DA75FC              <1> 	fidiv	dword [ebp - 4]	; 180
   192 000018E1 DB450C              <1> 	fild	dword [ebp +12]	; n
   193 000018E4 DA7510              <1> 	fidiv	dword [ebp +16]	; n / d
   194 000018E7 DB4508              <1> 	fild	dword [ebp + 8]	; A
   195                              <1> 
   196 000018EA 89EC                <1> 	mov	esp, ebp
   197 000018EC 5D                  <1> 	pop	ebp
   198                              <1> 
   199 000018ED C3                  <1> 	ret
   200                              <1> 
   201                              <1> fpu_rose_update:	;	fpu_rose_update(px, py, t)
   202                              <1> ; px,py is address. t is angle
   203 000018EE 55                  <1> 	push	ebp
   204 000018EF 89E5                <1> 	mov	ebp, esp
   205                              <1> 
   206 000018F1 50                  <1> 	push	eax
   207 000018F2 53                  <1> 	push	ebx
   208                              <1> 
   209 000018F3 8B4508              <1> 	mov	eax, [ebp + 8]
   210 000018F6 8B5D0C              <1> 	mov	ebx, [ebp +12]
   211                              <1> 
   212 000018F9 DB4510              <1> 	fild	dword [ebp +16]
   213 000018FC D8CB                <1> 	fmul	st0, st3		; st0 is degree, st3 is radian / degree. st0 is radian
   214 000018FE D9C0                <1> 	fld	st0
   215                              <1> 
   216 00001900 D9FB                <1> 	fsincos
   217 00001902 D9CA                <1> 	fxch	st2			; change st0, st2
   218 00001904 D8CC                <1> 	fmul	st0, st4		; st0 = kθ
   219 00001906 D9FE                <1> 	fsin				; st0 = sin(kθ)
   220 00001908 D8CB                <1> 	fmul	st0, st3		; st0 = Asin(kθ)
   221                              <1> 
   222 0000190A D9CA                <1> 	fxch	st2
   223 0000190C D8CA                <1> 	fmul	st0, st2
   224 0000190E DB18                <1> 	fistp	dword [eax]		; store x pos
   225                              <1> 
   226 00001910 DEC9                <1> 	fmulp	st1, st0
   227 00001912 D9E0                <1> 	fchs				; convert to display coordinate
   228 00001914 DB1B                <1> 	fistp	dword [ebx]		; store y pos
   229                              <1> 
   230 00001916 5B                  <1> 	pop	ebx
   231 00001917 58                  <1> 	pop	eax
   232                              <1> 
   233 00001918 89EC                <1> 	mov	esp, ebp
   234 0000191A 5D                  <1> 	pop	ebp
   235                              <1> 
   236 0000191B C3                  <1> 	ret
   237                              <1> 
   238                              <1> 
   239                              <1> 	
   240                              <1> 
   241                              <1> 
   160                                  ;%include	"../../../../testOS/src/39_rose/tasks/task_3.s"
   161                                  
   162                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   163                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   164                                  
   165                                  
   166                                  
   167 0000191C 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
   168                                  
   169                                  %include	"fat.s"
     1                              <1> 
     2                              <1> 	times	(FAT1_START) - ($ - $$)	db	0x00
     3                              <1> 
     4                              <1> FAT1:
     5 00002000 FFFF                <1> 	db	0xFF, 0xFF
     6 00002002 FFFF                <1> 	dw	0xFFFF
     7 00002004 FFFF                <1> 	dw	0xFFFF
     8                              <1> 
     9 00002006 00<rept>            <1> 	times	(FAT2_START) - ($ - $$)	db	0x00
    10                              <1> 
    11                              <1> FAT2:
    12 00022000 FFFF                <1> 	db	0xFF, 0xFF
    13 00022002 FFFF                <1> 	dw	0xFFFF
    14 00022004 FFFF                <1> 	dw	0xFFFF
    15                              <1> 
    16                              <1> 
    17 00022006 00<rept>            <1> 	times	(ROOT_START) - ($ - $$)	db	0x00
    18                              <1> 
    19                              <1> FAT_ROOT:
    20 00042000 424F4F5441424C4544- <1> 	db	'BOOTABLE', 'DSK'
    20 00042009 534B                <1>
    21 0004200B 28                  <1> 	db	ATTR_ARCHIVE | ATTR_VOLUME_ID
    22 0004200C 00                  <1> 	db	0x00
    23 0004200D 00                  <1> 	db	0x00
    24 0004200E 0000                <1> 	dw	( 0 << 11) | (0 << 5) | (0 / 2)	; 1980/1/1
    25 00042010 0100                <1> 	dw	( 0 <<  9) | (0 << 5) | ( 1)
    26 00042012 0100                <1> 	dw	( 0 <<  9) | (0 << 5) | ( 1)
    27 00042014 0000                <1> 	dw	0x0000
    28 00042016 0000                <1> 	dw	( 0 << 11) | (0 << 5) | (0 / 2)
    29 00042018 0100                <1> 	dw	( 0 <<  9) | (0 << 5) | ( 1)
    30 0004201A 0000                <1> 	dw	0
    31 0004201C 00000000            <1> 	dd	0
    32                              <1> 
    33 00042020 5350454349414C5458- <1> 	db	'SPECIAL', 'TXT'
    33 00042029 54                  <1>
    34 0004202A 20                  <1> 	db	ATTR_ARCHIVE
    35 0004202B 00                  <1> 	db	0x00
    36 0004202C 00                  <1> 	db	0x00
    37 0004202D 0000                <1> 	dw	( 0 << 11) | (0 << 5) | (0 / 2)	; 1980/1/1
    38 0004202F 2100                <1> 	dw	( 0 <<  9) | (1 << 5) | ( 1)
    39 00042031 2100                <1> 	dw	( 0 <<  9) | (1 << 5) | ( 1)
    40 00042033 0000                <1> 	dw	0x0000
    41 00042035 0000                <1> 	dw	( 0 << 11) | (0 << 5) | (0 / 2)
    42 00042037 2100                <1> 	dw	( 0 <<  9) | (1 << 5) | ( 1)
    43 00042039 0200                <1> 	dw	2				; 2 is top cluster
    44 0004203B 0B000000            <1> 	dd	FILE.end - FILE
    45                              <1> 
    46 0004203F 00<rept>            <1> 	times	FILE_START - ($ - $$)	db	0x00
    47                              <1> 
    48 00046000 48656C6C6F2C204641- <1> FILE:	db	'Hello, FAT!'
    48 00046009 5421                <1>
    49 0004600B 00                  <1> .end:	db	0
    50                              <1> 
    51 0004600C 00<rept>            <1> ALIGN	512,	db	0x00
    52                              <1> 	
    53 00046200 00<rept>            <1> 	times	(512 * 63)	db	0x00
    54                              <1> 
