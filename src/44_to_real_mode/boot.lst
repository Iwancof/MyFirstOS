     1                                  %include "../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     2                                  %include "../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     3                                  %include "../include/define.s"
     1                              <1> VECT_BASE		equ	0x0010_0000
     2                              <1> KERNEL_LOAD		equ	0x0010_1000
     3                              <1> STACK_BASE		equ	0x0010_3000
     4                              <1> CR3_BASE		equ	0x0010_5000
     5                              <1> 
     6                              <1> BOOT_LOAD		equ	0x7c00
     7                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     8                              <1> 
     9                              <1> BOOT_SIZE		equ	(1024 * 8)
    10                              <1> SECT_SIZE		equ	(512)
    11                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
    12                              <1> 
    13                              <1> E820_RECORD_SIZE	equ	20
    14                              <1> 
    15                              <1> KERNEL_SIZE		equ	(1024 * 8)
    16                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    17                              <1> 
    18                              <1> 
    19                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    20                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    21                              <1> 
    22                              <1> struc			ring_buff		; for keyboard
    23 00000000 <res 00000004>      <1> 				.rp	resd	1
    24 00000004 <res 00000004>      <1> 				.wp	resd	1
    25 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    26                              <1> endstruc
    27                              <1> 
    28                              <1> struc			rose
    29 00000000 <res 00000004>      <1> 				.x0		resd	1
    30 00000004 <res 00000004>      <1> 				.y0		resd	1
    31 00000008 <res 00000004>      <1> 				.x1		resd	1
    32 0000000C <res 00000004>      <1> 				.y1		resd	1
    33                              <1> 
    34 00000010 <res 00000004>      <1> 				.n		resd	1
    35 00000014 <res 00000004>      <1> 				.d		resd	1
    36                              <1> 
    37 00000018 <res 00000004>      <1> 				.color_x	resd	1
    38 0000001C <res 00000004>      <1> 				.color_y	resd	1
    39 00000020 <res 00000004>      <1> 				.color_z	resd	1
    40 00000024 <res 00000004>      <1> 				.color_s	resd	1
    41 00000028 <res 00000004>      <1> 				.color_f	resd	1
    42 0000002C <res 00000004>      <1> 				.color_b	resd	1
    43                              <1> 				
    44 00000030 <res 00000010>      <1> 				.title		resb	16
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;struc ring_buff
    48                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    49                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    50                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    51                              <1> ;endstruc
    52                              <1> 
    53                              <1> STACK_SIZE		equ	1024
    54                              <1> 
    55                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    56                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    57                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    58                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
    59                              <1> SP_TASK_4		equ	STACK_BASE + (STACK_SIZE * 5)
    60                              <1> SP_TASK_5		equ	STACK_BASE + (STACK_SIZE * 6)
    61                              <1> SP_TASK_6		equ	STACK_BASE + (STACK_SIZE * 7)
    62                              <1> 
    63                              <1> PARAM_TASK_4		equ	0x0010_8000
    64                              <1> PARAM_TASK_5		equ	0x0010_9000
    65                              <1> PARAM_TASK_6		equ	0x0010_A000
    66                              <1> 
    67                              <1> CR3_TASK_4		equ	0x0020_0000
    68                              <1> CR3_TASK_5		equ	0x0020_2000
    69                              <1> CR3_TASK_6		equ	0x0020_4000
    70                              <1> 
    71                              <1> FAT_SIZE equ (1024 * 128)
    72                              <1> ROOT_SIZE equ (1024 * 16)
    73                              <1> 
    74                              <1> FAT1_START equ (KERNEL_SIZE)
    75                              <1> FAT2_START equ (FAT1_START + FAT_SIZE)
    76                              <1> ROOT_START equ (FAT2_START + FAT_SIZE)
    77                              <1> FILE_START equ (ROOT_START + ROOT_SIZE)
    78                              <1> 
    79                              <1> ATTR_VOLUME_ID equ 0x08
    80                              <1> ATTR_ARCHIVE equ 0x20
    81                              <1> 
     4                                  
     5                                  BOOT_LOAD	equ	0x7c00
     6                                  ORG		BOOT_LOAD
     7                                  
     8                                  entry:
     9 00000000 EB3C                    	jmp	ipl
    10 00000002 90                      	times 	3 - ($ - $$) db 0x90
    11 00000003 4F454D2D4E414D45        	db	'OEM-NAME'
    12                                  	
    13 0000000B 0002                    	dw	512
    14 0000000D 01                      	db	1
    15 0000000E 2000                    	dw	32
    16 00000010 02                      	db	2
    17 00000011 0002                    	dw	512
    18 00000013 F0FF                    	dw	0xFFF0
    19 00000015 F8                      	db	0xF8
    20 00000016 0001                    	dw	256
    21 00000018 1000                    	dw	0x10
    22 0000001A 0200                    	dw	2
    23 0000001C 00000000                	dd	0
    24                                  
    25 00000020 00000000                	dd	0
    26 00000024 80                      	db	0x80
    27 00000025 00                      	db	0
    28 00000026 29                      	db	0x29
    29 00000027 EFBE0000                	dd	0xBEEF
    30 0000002B 424F4F5441424C4520-     	db	'BOOTABLE   '
    30 00000034 2020               
    31 00000036 4641543136202020        	db	'FAT16   '
    32                                  
    33                                  
    34                                  ipl:
    35 0000003E FA                      	cli
    36                                  
    37 0000003F B80000                  	mov	ax,0x0000
    38 00000042 8ED8                    	mov	ds,ax
    39 00000044 8EC0                    	mov	es,ax
    40 00000046 8ED0                    	mov	ss,ax
    41 00000048 BC007C                  	mov	sp,BOOT_LOAD
    42                                  
    43 0000004B FB                      	sti
    44 0000004C 8816[9800]              	mov	[BOOT + drive.no], dl
    45                                  	
    46 00000050 68[7D00]E84A0083C4-     	cdecl	puts,.s0
    46 00000058 02                 
    47 00000059 BB0F00                  	mov	bx, BOOT_SECT - 1 		; -1 indicate this sector
    48 0000005C B9007E                  	mov	cx, BOOT_LOAD + SECT_SIZE * 1	; load next
    49 0000005F 515368[9800]E89700-     	cdecl	read_chs, BOOT, bx, cx
    49 00000067 83C406             
    50                                  
    51 0000006A 39D8                    	cmp	ax, bx
    52 0000006C 740C                    .10Q:	jz	.10E
    53 0000006E 68[8900]E82C0083C4-     .10T:	cdecl	puts, .e0	; Error
    53 00000076 02                 
    54 00000077 E84500                  	call	reboot
    55 0000007A E91E06                  .10E:	jmp	stage_2
    56                                  
    57 0000007D 426F6F74696E672E2E-     .s0	db	"Booting...",0,0x0D,
    57 00000086 2E000D             
    58 00000089 5B4572726F725D2073-     .e0	db	"[Error] sector",0
    58 00000092 6563746F7200       
    59                                  
    60                                  ALIGN	2,db 0
    61                                  BOOT:
    62                                  	istruc drive
    63 00000098 0000                    		at drive.no,	dw	0
    64 0000009A 0000                    		at drive.cyln,	dw	0
    65 0000009C 0000                    		at drive.head,	dw	0
    66 0000009E 0200                    		at drive.sect,	dw	2
    67                                  	iend
    68                                  
    69                                  %include	"../modules/real/puts.s"
     1                              <1> puts:
     2 000000A0 55                  <1> 	push	bp
     3 000000A1 89E5                <1> 	mov	bp,sp
     4                              <1> 
     5 000000A3 50                  <1> 	push	ax
     6 000000A4 53                  <1> 	push	bx
     7 000000A5 56                  <1> 	push	si
     8                              <1> 
     9 000000A6 8B7604              <1> 	mov	si,[bp + 4] ;si : Dist
    10                              <1> 	
    11 000000A9 B40E                <1> 	mov	ah,0x0E
    12 000000AB BB0000              <1> 	mov	bx,0x0000
    13 000000AE FC                  <1> 	cld
    14                              <1> .10L:
    15 000000AF AC                  <1> 	lodsb	;al = *si;si++
    16                              <1> 
    17 000000B0 3C00                <1> 	cmp 	al,0
    18 000000B2 7404                <1> 	je	.10E ; exit
    19                              <1> 
    20 000000B4 CD10                <1> 	int	0x10
    21 000000B6 EBF7                <1> 	jmp	.10L ; loop
    22                              <1> .10E:
    23                              <1> 
    24 000000B8 5E                  <1> 	pop 	si
    25 000000B9 5B                  <1> 	pop	bx
    26 000000BA 58                  <1> 	pop	ax
    27                              <1> 
    28 000000BB 89EC                <1> 	mov	sp,bp
    29 000000BD 5D                  <1> 	pop	bp
    30                              <1> 
    31 000000BE C3                  <1> 	ret
    70                                  %include	"../modules/real/reboot.s"
     1                              <1> reboot:
     2 000000BF 68[DB00]E8DBFF83C4- <1> 	cdecl puts,.s0	; depens on puts.s
     2 000000C7 02                  <1>
     3                              <1> 
     4                              <1> .10L:
     5 000000C8 B410                <1> 	mov	ah,0x10
     6 000000CA CD16                <1> 	int	0x16
     7                              <1> 
     8 000000CC 3C20                <1> 	cmp	al,' '
     9 000000CE 75F8                <1> 	jne	.10L
    10                              <1> 
    11 000000D0 68[F900]E8CAFF83C4- <1> 	cdecl	puts, .s1
    11 000000D8 02                  <1>
    12 000000D9 CD19                <1> 	int 0x19
    13                              <1> 
    14 000000DB 0A0D50555348205350- <1> .s0	db 0x0A,0x0D,"PUSH SPACE KEY TO REBOOT...",0
    14 000000E4 414345204B45592054- <1>
    14 000000ED 4F205245424F4F542E- <1>
    14 000000F6 2E2E00              <1>
    15 000000F9 0A0D0A0D00          <1> .s1	db 0x0A,0x0D,0x0A,0x0D,0
    71                                  %include	"../modules/real/read_chs.s"
     1                              <1> read_chs: ;read_chs(drive_address,sectors,dst)
     2                              <1> 	
     3 000000FE 55                  <1> 	push	bp
     4 000000FF 89E5                <1> 	mov	bp,sp
     5                              <1> 
     6 00000101 6A03                <1> 	push	3	; number of trying
     7 00000103 6A00                <1> 	push	0	; sectors
     8                              <1> 
     9 00000105 53                  <1> 	push	bx
    10 00000106 51                  <1> 	push	cx
    11 00000107 52                  <1> 	push	dx
    12 00000108 06                  <1> 	push	es
    13 00000109 56                  <1> 	push	si
    14                              <1> 
    15 0000010A 8B7604              <1> 	mov	si,[bp + 4]	; this is address.
    16                              <1> 
    17 0000010D 8A6C02              <1> 	mov	ch,[si + drive.cyln + 0]
    18 00000110 8A4C03              <1> 	mov	cl,[si + drive.cyln + 1]
    19 00000113 C0E106              <1> 	shl	cl,6		; xxxxxxxx xx______
    20 00000116 0A4C06              <1> 	or	cl,[si + drive.sect]
    21                              <1> 
    22 00000119 8A7404              <1> 	mov	dh,[si + drive.head]
    23 0000011C 8A14                <1> 	mov	dl,[si + drive.no]
    24 0000011E B80000              <1> 	mov	ax,0x0000
    25 00000121 8EC0                <1> 	mov	es,ax
    26 00000123 8B5E08              <1> 	mov	bx,[bp + 8]	; bx = dst
    27                              <1> .10L:
    28 00000126 B402                <1> 	mov	ah,0x02
    29 00000128 8A4606              <1> 	mov	al,[bp + 6]	; al = sectors
    30                              <1> 
    31 0000012B CD13                <1> 	int	0x13
    32 0000012D 7304                <1> 	jnc	.11E		
    33                              <1> 
    34 0000012F B000                <1> 	mov	al,0
    35 00000131 EB0C                <1> 	jmp	.10E
    36                              <1> .11E:	
    37 00000133 3C00                <1> 	cmp	al,0
    38 00000135 7508                <1> 	jne	.10E
    39                              <1> 
    40 00000137 B80000              <1> 	mov	ax,0
    41 0000013A FF4EFE              <1> 	dec	word [bp - 2]	; dec trying number
    42 0000013D 75E7                <1> 	jnz	.10L
    43                              <1> .10E:				; exit
    44 0000013F B400                <1> 	mov	ah,0
    45                              <1> 
    46                              <1> 	;cdecl	itoa, word[bp - 2],.s1,8,10,0b0000
    47                              <1> 	;cdecl	puts, .s1
    48                              <1> 
    49 00000141 5E                  <1> 	pop si
    50 00000142 07                  <1> 	pop es
    51 00000143 5A                  <1> 	pop dx
    52 00000144 59                  <1> 	pop cx
    53 00000145 5B                  <1> 	pop bx
    54                              <1> 
    55 00000146 89EC                <1> 	mov	sp,bp
    56 00000148 5D                  <1> 	pop	bp
    57                              <1> 
    58 00000149 C3                  <1> 	ret
    59                              <1> 
    60 0000014A 2D2D2D2D2D2D2D2D    <1> .s1	db	"--------"
    61                              <1> 
    62                              <1> 
    72                                  
    73 00000152 00<rept>                	times	510 - ($ - $$) db 0x00
    74 000001FE 55AA                    	db	0x55,0xAA	; end of sector
    75                                  
    76                                  FONT:				; BOOT_LOAD + SECT_SIZE. use in kernel.s
    77 00000200 0000                    .seg:	dw	0
    78 00000202 0000                    .off:	dw	0
    79                                  ACPI_DATA:
    80 00000204 00000000                .adr:	dd	0
    81 00000208 00000000                .len:	dd	0
    82                                  
    83                                  
    84                                  %include	"../modules/real/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 0000020C 55                  <1> 	push 	bp
     3 0000020D 89E5                <1> 	mov	bp,sp
     4                              <1> 
     5                              <1> 	
     6 0000020F 50                  <1> 	push	ax
     7 00000210 53                  <1> 	push	bx
     8 00000211 51                  <1> 	push	cx
     9 00000212 52                  <1> 	push	dx
    10 00000213 56                  <1> 	push	si
    11 00000214 57                  <1> 	push	di
    12                              <1> 
    13                              <1> 
    14                              <1> 	;init
    15 00000215 8B5E0C              <1> 	mov	bx, word [bp + 12]	; bx = flag
    16 00000218 8B4E08              <1> 	mov	cx,	 [bp + 8]	; cx = size
    17 0000021B 8B7606              <1> 	mov	si,	 [bp + 6]	; si = dist
    18                              <1> 
    19 0000021E 89F7                <1> 	mov	di,si
    20                              <1> 
    21                              <1> 	;cmp	cx,0
    22                              <1> 	;jg	.10A
    23                              <1> 	;jmp	.40A		; no buffer
    24                              <1> 
    25                              <1> .10A:				; start
    26                              <1> 
    27 00000220 B020                <1> 	mov	al,' '
    28 00000222 F7C30400            <1> 	test	bx, 0b0100
    29 00000226 7402                <1> 	je	.42E
    30 00000228 B030                <1> 	mov	al,'0'
    31                              <1> .42E:
    32                              <1> 
    33                              <1> 
    34 0000022A FC                  <1> 	cld
    35 0000022B F3AA                <1> 	rep	stosb
    36                              <1> 
    37 0000022D 8B4604              <1> 	mov	ax,[bp + 4]	; ax = num	
    38 00000230 8B4E08              <1> 	mov	cx,[bp + 8]	; cx = size
    39 00000233 89F7                <1> 	mov	di,si
    40 00000235 01CF                <1> 	add	di,cx		; di is tail of buffer
    41 00000237 4F                  <1> 	dec	di
    42                              <1> 
    43 00000238 F7C30100            <1> 	test	bx,0b0001	; tmp flag.is_signed
    44 0000023C 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    45 0000023E 83F800              <1>   	cmp	ax,0		; check(ax - 0)
    46 00000241 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    47 00000243 83CB02              <1> 	or	bx,0b0010	; flag |= print_sign
    48                              <1> .12E:
    49                              <1> .10E:
    50                              <1> 	
    51                              <1> 
    52 00000246 F7C30200            <1> 	test	bx,0b0010	; if flag.print_size
    53 0000024A 7410                <1> .20Q:	je	.20E		; not print sign
    54 0000024C 83F800              <1> 	cmp 	ax,0		; check(ax - 0)
    55 0000024F 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    56 00000251 F7D8                <1> 	neg	ax		; ax *= -1
    57 00000253 C6042D              <1> 	mov	[si],byte '-'
    58 00000256 EB03                <1> 	jmp	.22E
    59 00000258 C6042B              <1> .22F:	mov	[si],byte '+'
    60 0000025B 49                  <1> .22E:	dec	cx		; finaly
    61                              <1> .20E:
    62                              <1> 
    63 0000025C 8B5E0A              <1> 	mov	bx,[bp + 10]	; bx = radix
    64                              <1> .30L:
    65                              <1> 	
    66 0000025F BA0000              <1> 	mov	dx, 0
    67 00000262 F7F3                <1> 	div	bx		; DX = AX % radix
    68                              <1> 				; AX = AX / radix
    69                              <1> 
    70 00000264 89D6                <1> 	mov	si,dx
    71 00000266 8A94[7C02]          <1> 	mov	dl,byte[.ascii + si]	; DL = ASCII[DX]
    72                              <1> 
    73 0000026A 8815                <1> 	mov	[di],dl		; start writing in tail of buffer
    74 0000026C 4F                  <1> 	dec	di
    75                              <1> 
    76 0000026D 83F800              <1> 	cmp	ax,0
    77 00000270 E0ED                <1> 	loopnz	.30L
    78                              <1> 
    79                              <1> .40A:
    80                              <1> 
    81 00000272 5F                  <1> 	pop	di
    82 00000273 5E                  <1> 	pop	si
    83 00000274 5A                  <1> 	pop	dx
    84 00000275 59                  <1> 	pop	cx
    85 00000276 5B                  <1> 	pop	bx
    86 00000277 58                  <1> 	pop	ax
    87                              <1> 
    88 00000278 89EC                <1> 	mov	sp,bp
    89 0000027A 5D                  <1> 	pop	bp
    90                              <1> 
    91 0000027B C3                  <1> 	ret
    92                              <1> 
    93 0000027C 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    93 00000285 39414243444546      <1>
    94                              <1> 
    95                              <1> 	
    96                              <1> 	
    97                              <1> 	
    85                                  %include	"../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1> 	
     3 0000028C 55                  <1> 	push	bp
     4 0000028D 89E5                <1> 	mov	bp,sp
     5                              <1> 	
     6 0000028F 52                  <1> 	push	dx
     7 00000290 56                  <1> 	push	si
     8 00000291 51                  <1> 	push	cx
     9 00000292 53                  <1> 	push	bx
    10 00000293 57                  <1> 	push	di
    11 00000294 06                  <1> 	push	es
    12                              <1> 
    13 00000295 8B7604              <1> 	mov	si,[bp + 4]
    14                              <1> 
    15 00000298 B80000              <1> 	mov	ax,0
    16 0000029B 8EC0                <1> 	mov	es,ax
    17 0000029D 89C7                <1> 	mov	di,ax
    18                              <1> 	
    19 0000029F 8A14                <1> 	mov	dl,[si + drive.no]
    20 000002A1 B408                <1> 	mov	ah,0x08
    21 000002A3 B90000              <1> 	mov	cx,0
    22 000002A6 CD13                <1> 	int	0x13	; get drive param
    23 000002A8 7224                <1> 	jc	.10F	; error
    24                              <1> 
    25 000002AA 89C8                <1> 	mov	ax,cx
    26 000002AC 83E03F              <1> 	and	ax,0b00111111
    27 000002AF 894406              <1> 	mov	[si + drive.sect],ax	; sector
    28                              <1> 
    29 000002B2 C0E906              <1> 	shr	cl,6
    30 000002B5 C1C908              <1> 	ror	cx,8			;CH,CL = CL,CH
    31 000002B8 83C101              <1> 	add	cx,1
    32 000002BB 894C02              <1> 	mov	[si + drive.cyln],cx	; cylnder
    33                              <1> 
    34 000002BE 89D3                <1> 	mov	bx,dx
    35 000002C0 C1EB08              <1> 	shr	bx,8
    36 000002C3 83C301              <1> 	add	bx,1
    37 000002C6 895C04              <1> 	mov	[si + drive.head],bx
    38                              <1> 
    39 000002C9 B80100              <1> 	mov	ax,1				; seccess
    40                              <1> 	
    41 000002CC EB03                <1> 	jmp	.10E
    42                              <1> .10F:
    43 000002CE B80000              <1> 	mov	ax,0
    44                              <1> .10E:
    45                              <1> 
    46 000002D1 07                  <1> 	pop	es
    47 000002D2 5F                  <1> 	pop	di
    48 000002D3 5B                  <1> 	pop	bx
    49 000002D4 59                  <1> 	pop	cx
    50 000002D5 5E                  <1> 	pop	si
    51 000002D6 5A                  <1> 	pop	dx
    52                              <1> 
    53 000002D7 89EC                <1> 	mov	sp,bp
    54 000002D9 5D                  <1> 	pop	bp
    55                              <1> 
    56 000002DA C3                  <1> 	ret
    86                                  %include	"../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1> 	
     3 000002DB 55                  <1> 	push	bp
     4 000002DC 89E5                <1> 	mov	bp,sp
     5                              <1> 	
     6 000002DE 56                  <1> 	push	si
     7 000002DF 50                  <1> 	push	ax
     8 000002E0 53                  <1> 	push	bx
     9 000002E1 06                  <1> 	push	es
    10 000002E2 55                  <1> 	push	bp
    11                              <1> 	
    12 000002E3 8B7604              <1> 	mov	si,[bp + 4]
    13 000002E6 B83011              <1> 	mov	ax,0x1130
    14 000002E9 B706                <1> 	mov	bh,0x06
    15 000002EB CD10                <1> 	int	0x10
    16                              <1> 
    17 000002ED 8C04                <1> 	mov	[si + 0],es
    18 000002EF 896C02              <1> 	mov	[si + 2],bp
    19                              <1> 
    20 000002F2 5D                  <1> 	pop	bp
    21 000002F3 07                  <1> 	pop	es
    22 000002F4 5B                  <1> 	pop	bx
    23 000002F5 58                  <1> 	pop	ax
    24 000002F6 5E                  <1> 	pop	si
    25                              <1> 
    26 000002F7 89EC                <1> 	mov	sp,bp
    27 000002F9 5D                  <1> 	pop	bp
    28                              <1> 
    29 000002FA C3                  <1> 	ret
    87                                  %include	"../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1> 	
     3 000002FB 6650                <1> 	push	eax
     4 000002FD 6653                <1> 	push	ebx
     5 000002FF 6651                <1> 	push	ecx
     6 00000301 6652                <1> 	push	edx
     7 00000303 56                  <1> 	push	si
     8 00000304 57                  <1> 	push	di
     9 00000305 55                  <1> 	push	bp
    10                              <1> 	;push	es
    11                              <1> 
    12 00000306 68[B003]E894FD83C4- <1> 	cdecl	puts, .s0
    12 0000030E 02                  <1>
    13                              <1> 
    14 0000030F BD0000              <1> 	mov	bp, 0
    15 00000312 66BB00000000        <1> 	mov	ebx, 0
    16                              <1> .10L:
    17 00000318 66B820E80000        <1> 	mov	eax, 0x0000E820
    18 0000031E 66B914000000        <1> 	mov	ecx, E820_RECORD_SIZE
    19 00000324 66BA50414D53        <1> 	mov	edx, 'PAMS'
    20 0000032A BF[9C03]            <1> 	mov	di, .record
    21 0000032D CD15                <1> 	int	0x15
    22                              <1> 
    23 0000032F 663D50414D53        <1> 	cmp	eax, 'PAMS'	; can use 32bit register(0x66)
    24 00000335 7402                <1> 	je	.12E		; can use
    25 00000337 EB4C                <1> 	jmp	.10E		; can not use
    26                              <1> .12E:
    27 00000339 7302                <1> 	jnc	.14E		; not occure error
    28 0000033B EB48                <1> 	jmp	.10E		; occure error
    29                              <1> .14E:				; start
    30                              <1> 	
    31 0000033D 57E8FB0083C402      <1> 	cdecl	put_mem_info, di
    32                              <1> 
    33 00000344 668B4510            <1> 	mov	eax, [di + 16]	; record type. see p332
    34 00000348 6683F803            <1> 	cmp	eax, 3
    35 0000034C 750F                <1> 	jne	.15E
    36                              <1> 	
    37 0000034E 668B05              <1> 	mov	eax, [di + 0]	; base address(1byte data)
    38 00000351 66A3[0402]          <1> 	mov	[ACPI_DATA.adr], eax
    39 00000355 668B4508            <1> 	mov	eax, [di + 8]	; length(1byte data)
    40 00000359 66A3[0802]          <1> 	mov	[ACPI_DATA.len], eax
    41                              <1> .15E:
    42 0000035D 6683FB00            <1> 	cmp	ebx, 0		; ebx equal 0 if last data
    43 00000361 741C                <1> 	jz	.16E		; last data
    44                              <1> 
    45 00000363 45                  <1> 	inc	bp		; bp is line_counter
    46 00000364 83E507              <1> 	and	bp,0x07		; bp %= 8
    47 00000367 7516                <1> 	jnz	.16E
    48                              <1> 
    49 00000369 68[2304]E831FD83C4- <1> 	cdecl	puts, .s2
    49 00000371 02                  <1>
    50 00000372 B410                <1> 	mov	ah,0x10
    51 00000374 CD16                <1> 	int	0x16
    52 00000376 68[2E04]E824FD83C4- <1> 	cdecl	puts, .s3
    52 0000037E 02                  <1>
    53                              <1> 
    54                              <1> .16E:
    55 0000037F 6683FB00            <1> 	cmp	ebx,0
    56 00000383 7593                <1> 	jne	.10L		; not last data --> continue
    57                              <1> .10E:
    58                              <1> 
    59 00000385 68[F303]E815FD83C4- <1> 	cdecl	puts, .s1
    59 0000038D 02                  <1>
    60                              <1> 
    61                              <1> 	;pop	es
    62 0000038E 5D                  <1> 	pop	bp
    63 0000038F 5F                  <1> 	pop	di
    64 00000390 5E                  <1> 	pop	si
    65 00000391 665A                <1> 	pop	edx
    66 00000393 6659                <1> 	pop	ecx
    67 00000395 665B                <1> 	pop	ebx
    68 00000397 6658                <1> 	pop	eax
    69                              <1> 
    70 00000399 C3                  <1> 	ret
    71                              <1> 
    72 0000039A 00<rept>            <1> ALIGN 	4,	db 	0
    73 0000039C 00<rept>            <1> .record: times E820_RECORD_SIZE	db	00
    74 000003B0 2045383230204D656D- <1> .s0:	db " E820 Memory Map:", 0x0A, 0x0D
    74 000003B9 6F7279204D61703A0A- <1>
    74 000003C2 0D                  <1>
    75 000003C3 20426173655F5F5F5F- <1> 	db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    75 000003CC 5F5F5F5F5F5F5F5F5F- <1>
    75 000003D5 204C656E6774685F5F- <1>
    75 000003DE 5F5F5F5F5F5F5F5F5F- <1>
    75 000003E7 20547970655F5F5F5F- <1>
    75 000003F0 0A0D00              <1>
    76 000003F3 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    76 000003FC 2D2D2D2D2D2D2D2D2D- <1>
    76 00000405 202D2D2D2D2D2D2D2D- <1>
    76 0000040E 2D2D2D2D2D2D2D2D2D- <1>
    76 00000417 202D2D2D2D2D2D2D2D- <1>
    76 00000420 0A0D00              <1>
    77 00000423 203C6D6F72652E2E2E- <1> .s2:	db	" <more...>", 0
    77 0000042C 3E00                <1>
    78 0000042E 0D2020202020202020- <1> .s3:	db	0x0D, "           ",0x0D,0
    78 00000437 2020200D00          <1>
    79                              <1> 
    80                              <1> 
    81                              <1> put_mem_info:
    82                              <1> 	
    83 0000043C 55                  <1> 	push	bp
    84 0000043D 89E5                <1> 	mov	bp,sp
    85                              <1> 
    86 0000043F 53                  <1> 	push	bx
    87 00000440 56                  <1> 	push	si
    88                              <1> 
    89 00000441 8B7604              <1> 	mov	si, [bp + 4]	; si is address to mem_info
    90 00000444 6A046A106A0468-     <1> 	cdecl	itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    90 0000044B [1B05]FF7406E8B9FD- <1>
    90 00000453 83C40A              <1>
    91 00000456 6A046A106A0468-     <1> 	cdecl	itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
    91 0000045D [1F05]FF7404E8A7FD- <1>
    91 00000465 83C40A              <1>
    92 00000468 6A046A106A0468-     <1> 	cdecl	itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
    92 0000046F [2405]FF7402E895FD- <1>
    92 00000477 83C40A              <1>
    93 0000047A 6A046A106A0468-     <1> 	cdecl	itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
    93 00000481 [2805]FF34E884FD83- <1>
    93 00000489 C40A                <1>
    94                              <1> 
    95 0000048B 6A046A106A0468-     <1> 	cdecl	itoa, word [si +14], .p4 + 0, 4, 16, 0b0100
    95 00000492 [2D05]FF740EE872FD- <1>
    95 0000049A 83C40A              <1>
    96 0000049D 6A046A106A0468-     <1> 	cdecl	itoa, word [si +12], .p4 + 4, 4, 16, 0b0100
    96 000004A4 [3105]FF740CE860FD- <1>
    96 000004AC 83C40A              <1>
    97 000004AF 6A046A106A0468-     <1> 	cdecl	itoa, word [si +10], .p5 + 0, 4, 16, 0b0100
    97 000004B6 [3605]FF740AE84EFD- <1>
    97 000004BE 83C40A              <1>
    98 000004C1 6A046A106A0468-     <1> 	cdecl	itoa, word [si + 8], .p5 + 4, 4, 16, 0b0100
    98 000004C8 [3A05]FF7408E83CFD- <1>
    98 000004D0 83C40A              <1>
    99                              <1> 
   100 000004D3 6A046A106A0468-     <1> 	cdecl	itoa, word [si +18], .p6 + 0, 4, 16, 0b0100
   100 000004DA [3F05]FF7412E82AFD- <1>
   100 000004E2 83C40A              <1>
   101 000004E5 6A046A106A0468-     <1> 	cdecl	itoa, word [si +16], .p6 + 4, 4, 16, 0b0100
   101 000004EC [4305]FF7410E818FD- <1>
   101 000004F4 83C40A              <1>
   102                              <1> 
   103 000004F7 68[1A05]E8A3FB83C4- <1> 	cdecl	puts, .s1
   103 000004FF 02                  <1>
   104                              <1> 
   105 00000500 8B5C10              <1> 	mov	bx, [si +16]
   106 00000503 83E307              <1> 	and	bx, 0x07
   107 00000506 D1E3                <1> 	shl	bx, 1		; per 2 byte
   108 00000508 81C3[9C05]          <1> 	add	bx, .t0
   109 0000050C FF37E88FFB83C402    <1> 	cdecl	puts, word[bx]
   110                              <1> 
   111 00000514 5E                  <1> 	pop	si
   112 00000515 5B                  <1> 	pop	bx
   113                              <1> 
   114 00000516 89EC                <1> 	mov	sp,bp
   115 00000518 5D                  <1> 	pop	bp
   116                              <1> 
   117                              <1> 	;cdecl	itoa, bp, .t1,4,10,0b0100
   118                              <1> 	;cdecl	puts, .t1
   119                              <1> 
   120 00000519 C3                  <1> 	ret
   121                              <1> 
   122 0000051A 20                  <1> .s1:	db	" "
   123 0000051B 5A5A5A5A5A5A5A5A5F  <1> .p2:	db	"ZZZZZZZZ_"
   124 00000524 5A5A5A5A5A5A5A5A20  <1> .p3:	db	"ZZZZZZZZ "
   125 0000052D 5A5A5A5A5A5A5A5A5F  <1> .p4:	db	"ZZZZZZZZ_"
   126 00000536 5A5A5A5A5A5A5A5A20  <1> .p5:	db	"ZZZZZZZZ "
   127 0000053F 5A5A5A5A5A5A5A5A00  <1> .p6:	db	"ZZZZZZZZ",0
   128                              <1> 
   129 00000548 2028556E6B6E6F776E- <1> .s4:	db	" (Unknown)",0x0A,0x0D,0
   129 00000551 290A0D00            <1>
   130 00000555 2028557361626C6529- <1> .s5:	db	" (Usable)",0x0A,0x0D,0
   130 0000055E 0A0D00              <1>
   131 00000561 202852657365727665- <1> .s6:	db	" (Reserved)",0x0A,0x0D,0
   131 0000056A 64290A0D00          <1>
   132 0000056F 202841435049206461- <1> .s7:	db	" (ACPI data)",0x0A,0x0D,0
   132 00000578 7461290A0D00        <1>
   133 0000057E 202841435049204E56- <1> .s8:	db	" (ACPI NVS)",0x0A,0x0D,0
   133 00000587 53290A0D00          <1>
   134 0000058C 2028426164206D656D- <1> .s9:	db	" (Bad memory)",0x0A,0x0D,0
   134 00000595 6F7279290A0D00      <1>
   135                              <1> 
   136 0000059C [4805][5505][6105]- <1> .t0:	dw	.s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   136 000005A2 [6F05][7E05][8C05]- <1>
   136 000005A8 [4805][4805]        <1>
   137                              <1> 
   138 000005AC 20202020202000      <1> .t1:	db	"      ",0
    88                                  ;%include	"../modules/real/get_mem_info_test.s"
    89                                  %include	"../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:	; KBC_Data_Write(data)
     2 000005B3 55                  <1> 	push	bp
     3 000005B4 89E5                <1> 	mov	bp, sp
     4                              <1> 
     5 000005B6 51                  <1> 	push	cx
     6                              <1> 
     7 000005B7 B90000              <1> 	mov	cx, 0		; max value(cx - 1 = 0xFFFF)
     8                              <1> .10L:
     9 000005BA E464                <1> 	in	al, 0x64
    10 000005BC A802                <1> 	test	al, 0x02	; input buffer full. see 293p
    11 000005BE E0FA                <1> 	loopnz	.10L		; CX == 0 : timeout
    12                              <1> 				; ZF == 0 ; you can write data
    13 000005C0 83F900              <1> 	cmp	cx, 0
    14 000005C3 7405                <1> 	jz	.20E		; timeout
    15                              <1> 
    16 000005C5 8A4604              <1> 	mov	al, [bp + 4]
    17 000005C8 E660                <1> 	out	0x60, al
    18                              <1> 
    19                              <1> .20E:
    20 000005CA 89C8                <1> 	mov	ax, cx
    21                              <1> 	
    22 000005CC 59                  <1> 	pop	cx
    23                              <1> 
    24 000005CD 89EC                <1> 	mov	sp, bp
    25 000005CF 5D                  <1> 	pop	bp
    26                              <1> 
    27 000005D0 C3                  <1> 	ret
    28                              <1> 
    29                              <1> KBC_Cmd_Write:	;KBC_Cmd_Write(data)
    30 000005D1 55                  <1> 	push	bp
    31 000005D2 89E5                <1> 	mov	bp, sp
    32                              <1> 
    33 000005D4 51                  <1> 	push	cx
    34                              <1> 
    35 000005D5 B90000              <1> 	mov	cx, 0		; max value(cx - 1 = 0xFFFF)
    36                              <1> .10L:
    37 000005D8 E464                <1> 	in	al, 0x64
    38 000005DA A802                <1> 	test	al, 0x02	; input buffer full. see 293p
    39 000005DC E0FA                <1> 	loopnz	.10L		; CX == 0 : timeout
    40                              <1> 				; ZF == 0 ; you can write data
    41 000005DE 83F900              <1> 	cmp	cx, 0
    42 000005E1 7405                <1> 	jz	.20E		; timeout
    43                              <1> 
    44 000005E3 8A4604              <1> 	mov	al, [bp + 4]
    45 000005E6 E664                <1> 	out	0x64, al
    46                              <1> 
    47                              <1> .20E:
    48 000005E8 89C8                <1> 	mov	ax, cx
    49                              <1> 	
    50 000005EA 59                  <1> 	pop	cx
    51                              <1> 
    52 000005EB 89EC                <1> 	mov	sp, bp
    53 000005ED 5D                  <1> 	pop	bp
    54                              <1> 
    55 000005EE C3                  <1> 	ret
    56                              <1> 
    57                              <1> 
    58                              <1> KBC_Data_Read: ; KBC_Data_Read(adr)
    59 000005EF 55                  <1> 	push	bp
    60 000005F0 89E5                <1> 	mov	bp,sp
    61 000005F2 51                  <1> 	push	cx
    62                              <1> 
    63 000005F3 B90000              <1> 	mov	cx, 0
    64                              <1> .10L:
    65 000005F6 E464                <1> 	in	al, 0x64
    66 000005F8 A801                <1> 	test	al, 0x01
    67 000005FA E1FA                <1> 	loopz	.10L
    68                              <1> 
    69 000005FC 83F900              <1> 	cmp	cx, 0		; timeout
    70 000005FF 7409                <1> 	jz	.20E
    71                              <1> 
    72 00000601 B400                <1> 	mov	ah, 0x00
    73 00000603 E460                <1> 	in	al, 0x60	; ax = return_value
    74                              <1> 
    75 00000605 8B7E04              <1> 	mov	di, [bp + 4]
    76 00000608 8905                <1> 	mov	[di + 0], ax
    77                              <1> 
    78                              <1> .20E:
    79 0000060A 89C8                <1> 	mov	ax, cx
    80                              <1> 
    81 0000060C 59                  <1> 	pop	cx
    82 0000060D 89EC                <1> 	mov	sp,bp
    83 0000060F 5D                  <1> 	pop	bp
    84                              <1> 
    85 00000610 C3                  <1> 	ret
    90                                  %include	"../modules/real/lba_chs.s"
     1                              <1> lba_chs:	; lba_chs(drive_param,drive_adr,lba)
     2 00000611 55                  <1> 	push	bp
     3 00000612 89E5                <1> 	mov	bp,sp
     4                              <1> 	
     5 00000614 56                  <1> 	push	si
     6 00000615 50                  <1> 	push	ax
     7 00000616 52                  <1> 	push	dx
     8 00000617 53                  <1> 	push	bx
     9 00000618 57                  <1> 	push	di
    10                              <1> 
    11 00000619 8B7604              <1> 	mov	si, [bp + 4]
    12 0000061C 8B7E06              <1> 	mov	di, [bp + 6]
    13                              <1> 
    14 0000061F 8A4404              <1> 	mov	al, [si + drive.head]
    15 00000622 F66406              <1> 	mul	byte [si + drive.sect]	; ax *= drive_param.sect
    16 00000625 89C3                <1> 	mov	bx, ax			; bx is sectors per cylynder
    17                              <1> 
    18 00000627 BA0000              <1> 	mov	dx, 0
    19 0000062A 8B4608              <1> 	mov	ax, [bp + 8]		; DIV --> DX:AX
    20 0000062D F7F3                <1> 	div	bx			; DX = DX:AX % BX
    21                              <1> 					; AX = DX:AX / BX
    22                              <1> 	
    23 0000062F 894502              <1> 	mov	[di + drive.cyln], ax
    24                              <1> 	
    25 00000632 89D0                <1> 	mov	ax,dx			
    26 00000634 F67406              <1> 	div	byte [si + drive.sect]	; DIV(byte) --> AX  (not use DX:AX)
    27                              <1> 					; AH = AX % sects
    28                              <1> 					; AL = AX / sects
    29                              <1> 
    30 00000637 0FB6D4              <1> 	movzx	dx, ah
    31 0000063A 42                  <1> 	inc	dx
    32                              <1> 
    33 0000063B B400                <1> 	mov	ah, 0x00		; because, We want to access AX,DX
    34                              <1> 
    35 0000063D 894504              <1> 	mov	[di + drive.head], ax	; ah = 0 so AX = AL
    36 00000640 895506              <1> 	mov	[di + drive.sect], dx
    37                              <1> 	
    38 00000643 5F                  <1> 	pop	di
    39 00000644 5B                  <1> 	pop	bx
    40 00000645 5A                  <1> 	pop	dx
    41 00000646 58                  <1> 	pop	ax
    42 00000647 5E                  <1> 	pop	si
    43                              <1> 
    44 00000648 89EC                <1> 	mov	sp,bp
    45 0000064A 5D                  <1> 	pop	bp
    46                              <1> 
    47 0000064B C3                  <1> 	ret
    91                                   %include	"../modules/real/read_lba.s"
     1                              <1> read_lba:	; read_lba(drive_param, lba, sect, dst)
     2                              <1> 	  	; lba : start addres, sect : how many
     3 0000064C 55                  <1> 	push	bp
     4 0000064D 89E5                <1> 	mov	bp,sp
     5 0000064F 56                  <1> 	push	si
     6                              <1> 	; not push ax. ax is return value
     7                              <1> 
     8 00000650 8B7604              <1> 	mov	si, [bp + 4]
     9 00000653 8B4606              <1> 	mov	ax, [bp + 6]
    10                              <1> 	
    11                              <1> 
    12 00000656 5068[7A06]56E8B3FF- <1> 	cdecl	lba_chs, word si, .chs, word ax
    12 0000065E 83C406              <1>
    13                              <1> 
    14 00000661 8A04                <1> 	mov	al, [si + drive.no]
    15 00000663 A2[7A06]            <1> 	mov	[.chs + drive.no], al
    16                              <1> 
    17 00000666 FF760AFF760868-     <1> 	cdecl	read_chs, .chs, word [bp + 8], word [bp + 10]
    17 0000066D [7A06]E88CFA83C406  <1>
    18                              <1> 
    19 00000675 5E                  <1> 	pop	si
    20 00000676 89EC                <1> 	mov	sp, bp
    21 00000678 5D                  <1> 	pop	bp
    22                              <1> 
    23 00000679 C3                  <1> 	ret
    24                              <1> ALIGN 2
    25 0000067A 00<rept>            <1> .chs:	times	drive_size	db	0
    92                                   %include	"../modules/real/memcpy.s"
     1                              <1> memcpy:	;memcpy(void* dest,void* src,size_t size);
     2 00000682 55                  <1> 	push	bp
     3 00000683 89E5                <1> 	mov	bp,sp
     4                              <1> 
     5 00000685 57                  <1> 	push	di
     6 00000686 56                  <1> 	push	si
     7 00000687 51                  <1> 	push	cx
     8                              <1> 
     9 00000688 FC                  <1> 	cld
    10 00000689 8B7E04              <1> 	mov	di,[bp + 4]
    11 0000068C 8B7606              <1> 	mov	si,[bp + 6]
    12 0000068F 8B4E08              <1> 	mov	cx,[bp + 8]
    13                              <1> 
    14 00000692 F3A4                <1> 	rep	movsb
    15                              <1> 
    16 00000694 59                  <1> 	pop	cx
    17 00000695 5E                  <1> 	pop	si
    18 00000696 5F                  <1> 	pop	di
    19                              <1> 
    20 00000697 89EC                <1> 	mov	sp,bp
    21 00000699 5D                  <1> 	pop	bp
    22                              <1> 
    23 0000069A C3                  <1> 	ret
    93                                  
    94                                  stage_2:
    95                                  
    96 0000069B 68[1507]E8FFF983C4-     	cdecl	puts,.s0
    96 000006A3 02                 
    97                                  
    98 000006A4 68[9800]E8E2FB83C4-     	cdecl	get_drive_param, BOOT
    98 000006AC 02                 
    99 000006AD 83F800                  	cmp	ax,0
   100 000006B0 750C                    	jne	.10E
   101 000006B2 68[4A07]E8E8F983C4-     	cdecl	puts,.e0
   101 000006BA 02                 
   102 000006BB E801FA                  	call	reboot
   103                                  .10E:
   104                                  
   105 000006BE A1[9800]                	mov	ax,[BOOT + drive.no]
   106 000006C1 6A046A106A0268-         	cdecl	itoa, ax, .p1, 2, 16, 0b0100
   106 000006C8 [2E07]50E83EFB83C4-
   106 000006D0 0A                 
   107 000006D1 A1[9A00]                	mov	ax,[BOOT + drive.cyln]
   108 000006D4 6A046A106A0468-         	cdecl	itoa, ax, .p2, 4, 16, 0b0100
   108 000006DB [3507]50E82BFB83C4-
   108 000006E3 0A                 
   109 000006E4 A1[9C00]                	mov	ax,[BOOT + drive.head]
   110 000006E7 6A046A106A0268-         	cdecl	itoa, ax, .p3, 2, 16, 0b0100
   110 000006EE [3E07]50E818FB83C4-
   110 000006F6 0A                 
   111 000006F7 A1[9E00]                	mov	ax,[BOOT + drive.sect]
   112 000006FA 6A046A106A0268-         	cdecl	itoa, ax, .p4, 2, 16, 0b0100
   112 00000701 [4507]50E805FB83C4-
   112 00000709 0A                 
   113                                  
   114 0000070A 68[2407]E890F983C4-     	cdecl	puts,.s1
   114 00000712 02                 
   115                                  
   116 00000713 EB50                    	jmp	stage_3
   117                                  
   118                                  
   119 00000715 326E64207374616765-     .s0	db	"2nd stage...",0x0A,0x0D,0
   119 0000071E 2E2E2E0A0D00       
   120                                  
   121 00000724 2044726976653A3A30-     .s1	db	" Drive::0x"
   121 0000072D 78                 
   122 0000072E 2D2D2C433A3078          .p1	db	"--,C:0x"
   123 00000735 2D2D2D2D2C483A3078      .p2	db	"----,H:0x"
   124 0000073E 2D2D2C533A3078          .p3	db	"--,S:0x"
   125 00000745 2D2D0A0D00              .p4	db	"--",0x0A,0x0D,0
   126                                  
   127 0000074A 43616E277420676574-     .e0	db	"Can't get drive parameter.",0
   127 00000753 206472697665207061-
   127 0000075C 72616D657465722E00 
   128                                  
   129                                  stage_3:
   130                                  
   131 00000765 68[E207]E835F983C4-     	cdecl	puts,.s0
   131 0000076D 02                 
   132 0000076E 68[0002]E867FB83C4-     	cdecl	get_font_adr,FONT
   132 00000776 02                 
   133 00000777 6A046A106A0468-         	cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   133 0000077E [0108]FF36[0002]E8-
   133 00000785 85FA83C40A         
   134 0000078A 6A046A106A0468-         	cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   134 00000791 [0608]FF36[0202]E8-
   134 00000798 72FA83C40A         
   135                                  
   136 0000079D 68[F307]E8FDF883C4-     	cdecl	puts,.s1
   136 000007A5 02                 
   137                                  
   138 000007A6 E852FB                  	cdecl	get_mem_info
   139 000007A9 66A1[0402]              	mov	eax, [ACPI_DATA.adr]
   140 000007AD 6683F800                	cmp	eax, 0
   141 000007B1 742D                    	je	.10E
   142                                  
   143 000007B3 6A046A106A0468-         	cdecl	itoa, ax, .p4, 4, 16, 0b0100
   143 000007BA [1F08]50E84CFA83C4-
   143 000007C2 0A                 
   144 000007C3 66C1E810                	shr	eax, 16
   145 000007C7 6A046A106A0468-         	cdecl	itoa, ax, .p3, 4, 16, 0b0100
   145 000007CE [1B08]50E838FA83C4-
   145 000007D6 0A                 
   146 000007D7 68[1008]E8C3F883C4-     	cdecl	puts, .s2
   146 000007DF 02                 
   147                                  .10E:
   148                                  
   149 000007E0 EB4F                    	jmp	stage_4
   150                                  
   151 000007E2 337264207374616765-     .s0:	db	"3rd stage...",0x0A,0x0D,0
   151 000007EB 2E2E2E0A0D00       
   152                                  
   153 000007F1 0000                    .key:	dw	0
   154                                  
   155 000007F3 20466F6E7420416464-     .s1	db	" Font Address="
   155 000007FC 726573733D         
   156 00000801 5A5A5A5A3A              .p1	db	"ZZZZ:"			; segment
   157 00000806 5A5A5A5A0A0D00          .p2	db	"ZZZZ", 0x0A, 0x0D, 0	; offset
   158 0000080D 0A0D00                  	db	0x0A,0x0D,0
   159                                  
   160 00000810 204143504920646174-     .s2	db	" ACPI data="
   160 00000819 613D               
   161 0000081B 5A5A5A5A                .p3	db	"ZZZZ"
   162 0000081F 5A5A5A5A0A0D00          .p4	db	"ZZZZ",0x0A,0x0D,0
   163                                  
   164 00000826 2D2D2D2D2D2D2D2D0A-     .t0	db	"--------",0x0A,0x0D,0
   164 0000082F 0D00               
   165                                  
   166                                  
   167                                  stage_4:
   168                                  
   169 00000831 68[0509]E869F883C4-     	cdecl	puts, .s0
   169 00000839 02                 
   170                                  
   171                                  
   172                                  	
   173 0000083A FA                      	cli
   174 0000083B 68AD00E890FD83C402      	cdecl	KBC_Cmd_Write,	0xAD
   175 00000844 68D000E887FD83C402      	cdecl	KBC_Cmd_Write,	0xD0
   176 0000084D 68[4D09]E89CFD83C4-     	cdecl	KBC_Data_Read,	.key
   176 00000855 02                 
   177                                  	
   178 00000856 8A1E[4D09]              	mov	bl, [.key]
   179 0000085A 80CB02                  	or	bl, 0x02
   180                                  
   181 0000085D 68D100E86EFD83C402      	cdecl	KBC_Cmd_Write, 0xD1
   182 00000866 53E885FD83C402          	cdecl	KBC_Data_Read, bx
   183                                  
   184 0000086D 68AE00E85EFD83C402      	cdecl	KBC_Cmd_Write, 0xAE
   185                                  
   186 00000876 FB                      	sti
   187                                  
   188 00000877 68[1409]E823F883C4-     	cdecl	puts, .s1
   188 0000087F 02                 
   189                                  
   190 00000880 68[2809]E81AF883C4-     	cdecl	puts, .s2
   190 00000888 02                 
   191                                  
   192 00000889 BB0000                  	mov	bx, 0
   193                                  .10L:
   194 0000088C B400                    	mov	ah,0x00		; wait key
   195 0000088E CD16                    	int	0x16
   196                                  
   197 00000890 3C31                    	cmp	al,'1'
   198 00000892 7266                    	jb	.10E		; al < '1'
   199 00000894 3C33                    	cmp	al,'3'
   200 00000896 7762                    	ja	.10E		; '3' < al
   201                                  
   202 00000898 88C1                    	mov	cl, al
   203 0000089A FEC9                    	dec	cl
   204 0000089C 80E103                  	and	cl, 0x03
   205 0000089F B80100                  	mov	ax, 0x0001
   206 000008A2 D3E0                    	shl	ax, cl		; ax = 2 ^ cl
   207 000008A4 31C3                    	xor	bx, ax		; bx initialization is out of loop
   208                                  
   209 000008A6 FA                      	cli
   210                                  
   211 000008A7 68AD00E824FD83C402      	cdecl	KBC_Cmd_Write, 0xAD
   212 000008B0 68ED00E8FDFC83C402      	cdecl	KBC_Data_Write, 0xED	; LED command
   213 000008B9 68[4D09]E830FD83C4-     	cdecl	KBC_Data_Read, .key
   213 000008C1 02                 
   214                                  
   215 000008C2 803E[4D09]FA            	cmp	[.key], byte 0xFA	; 0xFA is ACK
   216 000008C7 7509                    	jne	.11F			; not ACK
   217                                  
   218 000008C9 53E8E6FC83C402          	cdecl	KBC_Data_Write, bx
   219 000008D0 EB1C                    	jmp	.11E
   220                                  .11F:
   221 000008D2 6A046A106A0268-         	cdecl	itoa, word [.key], .e1, 2, 16, 0b0100
   221 000008D9 [4909]FF36[4D09]E8-
   221 000008E0 2AF983C40A         
   222 000008E5 68[4809]E8B5F783C4-     	cdecl	puts, .e0
   222 000008ED 02                 
   223                                  .11E:
   224 000008EE 68AE00E8DDFC83C402      	cdecl	KBC_Cmd_Write, 0xAE
   225                                  
   226 000008F7 FB                      	sti
   227                                  
   228 000008F8 EB92                    	jmp	.10L
   229                                  .10E:
   230 000008FA 68[3E09]E8A0F783C4-     	cdecl	puts, .s3
   230 00000902 02                 
   231                                  
   232 00000903 EB4A                    	jmp	stage_5
   233                                  
   234 00000905 347468207374616765-     .s0:	db	"4th stage...",0x0A,0x0D,0
   234 0000090E 2E2E2E0A0D00       
   235 00000914 413230204761746520-     .s1:	db	"A20 Gate enabled.",0x0A,0x0D,0
   235 0000091D 656E61626C65642E0A-
   235 00000926 0D00               
   236 00000928 204B6579626F617264-     .s2:	db	" Keyboard LED test...",0
   236 00000931 204C45442074657374-
   236 0000093A 2E2E2E00           
   237 0000093E 2028646F6E65290A0D-     .s3:	db	" (done)",0x0A,0x0D,0
   237 00000947 00                 
   238 00000948 5B                      .e0:	db	"["
   239 00000949 5A5A5D00                .e1:	db	"ZZ]", 0
   240                                  
   241 0000094D 0000                    .key:	dw	00
   242                                  
   243                                  stage_5:
   244 0000094F 68[7B09]E84BF783C4-     	cdecl	puts, .s0
   244 00000957 02                 
   245                                  
   246 00000958 68009C6A106A1068-       	cdecl	read_lba, BOOT, BOOT_SECT, KERNEL_SECT,BOOT_END	; read kernel and put end of BOOT
   246 00000960 [9800]E8E7FC83C408 
   247 00000968 83F810                  	cmp	ax, KERNEL_SECT
   248 0000096B 740C                    	jz	.10E		; Seccess
   249 0000096D 68[8A09]E82DF783C4-     	cdecl	puts, .e0
   249 00000975 02                 
   250 00000976 E846F7                  	call	reboot
   251                                  .10E:
   252                                  	
   253 00000979 EB29                    	jmp	stage_6
   254                                  
   255 0000097B 357468207374616765-     .s0:	db	"5th stage...",0x0A,0x0D,0
   255 00000984 2E2E2E0A0D00       
   256 0000098A 204661696C75726520-     .e0:	db	" Failure load kernel...",0x0A,0x0D,0
   256 00000993 6C6F6164206B65726E-
   256 0000099C 656C2E2E2E0A0D00   
   257                                  
   258                                  
   259                                  stage_6:
   260 000009A4 68[BC09]E8F6F683C4-     	cdecl	puts, .s0
   260 000009AC 02                 
   261                                  
   262                                  .10L:
   263 000009AD B400                    	mov	ah, 0
   264 000009AF CD16                    	int	0x16
   265 000009B1 3C20                    	cmp	al, ' '
   266 000009B3 75F8                    	jnz	.10L
   267                                  
   268 000009B5 B81200                  	mov	ax,0x0012
   269 000009B8 CD10                    	int	0x10
   270                                  
   271 000009BA EB5C                    	jmp	stage_7
   272                                  
   273 000009BC 367468207374616765-     .s0:	db	"6th stage...",0x0A,0x0D,0x0A,0x0D
   273 000009C5 2E2E2E0A0D0A0D     
   274 000009CC 205075736820535041-     	db	" Push SPACE key to protect mode...",0x0A,0x0D,00
   274 000009D5 4345206B657920746F-
   274 000009DE 2070726F7465637420-
   274 000009E7 6D6F64652E2E2E0A0D-
   274 000009F0 00                 
   275                                  
   276                                  
   277 000009F1 00<rept>                ALIGN	4,	db	0
   278 000009F4 0000000000000000        GDT:	dq	0x00_0000_000000_0000	; NULL
   279 000009FC FFFF0000009ACF00        .cs	dq	0x00_CF9A_000000_FFFF	; CODE 4G
   280 00000A04 FFFF00000092CF00        .ds	dq	0x00_CF92_000000_FFFF	; DATA 4G
   281                                  .gdt_end:
   282                                  
   283                                  SEL_CODE		equ	GDT.cs - GDT
   284                                  SEL_DATA		equ	GDT.ds - GDT
   285                                  
   286 00000A0C 1700                    GDTR:	dw	GDT.gdt_end - GDT - 1	; (Size 1)'s limit is 0
   287 00000A0E [F4090000]              	dd	GDT
   288                                  
   289 00000A12 0000                    IDTR:	dw	0
   290 00000A14 00000000                	dd	0
   291                                  
   292                                  
   293                                  stage_7:
   294 00000A18 FA                      	cli
   295 00000A19 0F0116[0C0A]            	lgdt	[GDTR]
   296 00000A1E 0F011E[120A]            	lidt	[IDTR]
   297                                  
   298 00000A23 0F20C0                  	mov	eax, cr0
   299 00000A26 6683C801                	or	eax, 1
   300 00000A2A 0F22C0                  	mov	cr0, eax
   301                                  
   302 00000A2D EB00                    	jmp	$ + 2			; pipe line instruction delete
   303                                  	
   304                                  [BITS 32]
   305 00000A2F 66                      	db	0x66			; override prefix
   306 00000A30 EA[370A0000]0800        	jmp	SEL_CODE:CODE_32	; SEL_CODE is ""INDEX""
   307                                  
   308                                  CODE_32:
   309 00000A37 66B81000                	mov	ax,  SEL_DATA
   310 00000A3B 8ED8                    	mov	ds, ax
   311 00000A3D 8EC0                    	mov	es, ax
   312 00000A3F 8EE0                    	mov	fs, ax
   313 00000A41 8EE8                    	mov	gs, ax
   314 00000A43 8ED0                    	mov	ss, ax
   315                                  
   316 00000A45 B900080000              	mov	ecx, (KERNEL_SIZE) / 4	; "/ 4" byte
   317 00000A4A BE009C0000              	mov	esi, BOOT_END		; from
   318 00000A4F BF00101000              	mov	edi, KERNEL_LOAD	; to
   319 00000A54 FC                      	cld
   320 00000A55 F3A5                    	rep	movsd
   321                                  
   322 00000A57 E9(00101000)            	jmp	KERNEL_LOAD
   323                                  
   324                                  
   325                                  
   326                                  TO_REAL_MODE:
   327 00000A5C 55                      	push	ebp
   328 00000A5D 89E5                    	mov	ebp, esp
   329                                  
   330 00000A5F 60                      	pusha
   331                                  
   332                                  	; cli
   333                                  
   334 00000A60 0F20C0                  	mov	eax, cr0
   335 00000A63 A3[F50A0000]            	mov	[.cr0_saved], eax
   336 00000A68 8925[F90A0000]          	mov	[.esp_saved], esp
   337 00000A6E 0F010D[EF0A0000]        	sidt	[.idtr_save]
   338 00000A75 0F011D[E90A0000]        	lidt	[.idtr_real]
   339                                  	
   340 00000A7C EA[830A0000]1800        	jmp	0x0018:.bit16	; 16 bit segment selector(D/B bit)
   341                                  [BITS 16]
   342                                  .bit16:
   343 00000A83 B82000                  	mov	ax, 0x0020
   344 00000A86 8ED8                    	mov	ds, ax
   345 00000A88 8EC0                    	mov	es, ax
   346 00000A8A 8ED0                    	mov	ss, ax
   347                                  
   348 00000A8C 0F20C0                  	mov	eax, cr0
   349 00000A8F 6625FEFFFF7F            	and	eax, 0x7FFF_FFFE	; disable PG,PE
   350 00000A95 0F22C0                  	mov	cr0, eax	; real mode
   351 00000A98 EB00                    	jmp	$ + 2
   352                                  
   353 00000A9A EA[9F0A]0000            	jmp	0:.real
   354                                  .real:
   355 00000A9F B80000                  	mov	ax, 0x0000
   356 00000AA2 8ED8                    	mov	ds, ax
   357 00000AA4 8EC0                    	mov	es, ax
   358 00000AA6 8ED0                    	mov	ss, ax
   359 00000AA8 BC007C                  	mov	sp, 0x7C00
   360                                  
   361 00000AAB E84F00                  	cdecl	read_file
   362                                  
   363 00000AAE 0F20C0                  	mov	eax, cr0
   364 00000AB1 6683C801                	or	eax, 1		; 16bit protect mode
   365 00000AB5 0F22C0                  	mov	cr0, eax
   366                                  
   367 00000AB8 EB00                    	jmp	$ + 2
   368                                  
   369 00000ABA 66                      	db	0x66
   370                                  [BITS 32]
   371 00000ABB EA[C20A0000]0800        	jmp	0x0008:.bit32
   372                                  .bit32:
   373 00000AC2 66B81000                	mov	ax, 0x0010
   374 00000AC6 8ED8                    	mov	ds, ax
   375 00000AC8 8EC0                    	mov	es, ax
   376 00000ACA 8ED0                    	mov	ss, ax
   377                                  
   378 00000ACC 8B25[F90A0000]          	mov	esp, [.esp_saved]
   379 00000AD2 A1[F50A0000]            	mov	eax, [.cr0_saved]
   380 00000AD7 0F22C0                  	mov	cr0, eax
   381                                  	
   382 00000ADA EB00                    	jmp	$ + 2
   383                                  
   384 00000ADC 0F011D[EF0A0000]        	lidt	[.idtr_save]
   385                                  
   386 00000AE3 FB                      	sti
   387 00000AE4 61                      	popa
   388 00000AE5 89EC                    	mov	esp, ebp
   389 00000AE7 5D                      	pop	ebp
   390                                  
   391                                  	
   392 00000AE8 C3                      	ret
   393                                  
   394                                  .idtr_real:
   395 00000AE9 FF03                    	dw	0x3FF
   396 00000AEB 00000000                	dd	0
   397                                  
   398                                  .idtr_save:
   399 00000AEF 0000                    	dw	0
   400 00000AF1 00000000                	dd	0
   401                                  
   402                                  .cr0_saved:
   403 00000AF5 00000000                	dd	0
   404                                  
   405                                  .esp_saved:
   406 00000AF9 00000000                	dd	0
   407                                  
   408                                  
   409                                  [BITS 16]
   410                                  read_file:
   411 00000AFD 6A0F68[0C0B]680078-     	cdecl	memcpy, 0x7800, .s0, .s1 - .s0
   411 00000B05 E87AFB83C406       
   412                                  
   413 00000B0B C3                      	ret
   414                                  
   415 00000B0C 46696C65206E6F7420-     .s0:	db	'File not found', 0
   415 00000B15 666F756E6400       
   416                                  .s1:
   417                                  
   418 00000B1B 00<rept>                	times BOOT_SIZE - ($ - $$) - 16	db	0
   419                                  
   420 00001FF0 [5C0A0000]              	dd	TO_REAL_MODE
   421                                  	
   422 00001FF4 00<rept>                	times BOOT_SIZE - ($ - $$)	db	0
