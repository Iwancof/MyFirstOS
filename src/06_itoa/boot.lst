     1                                  %include "../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     2                                  
     3                                  BOOT_LOAD	equ	0x7c00
     4                                  ORG		BOOT_LOAD
     5                                  
     6                                  
     7                                  entry:
     8 00000000 EB58                    	jmp	ipl
     9 00000002 90<rept>                	times 	90 - ($ - $$) db 0x90
    10                                  
    11                                  ipl:
    12 0000005A FA                      	cli
    13                                  
    14 0000005B B80000                  	mov	ax,0x0000
    15 0000005E 8ED8                    	mov	ds,ax
    16 00000060 8EC0                    	mov	es,ax
    17 00000062 8ED0                    	mov	ss,ax
    18 00000064 BC007C                  	mov	sp,BOOT_LOAD
    19                                  
    20 00000067 FB                      	sti
    21                                  
    22 00000068 8816[9400]              	mov	[BOOT.DRIVE], dl
    23                                  
    24 0000006C 6A046A006A0868-         	cdecl	itoa,12,.s1,8,0,0b0100
    24 00000073 [8800]6A0CE8500083-
    24 0000007B C40A               
    25 0000007D 68[8800]E8280083C4-     	cdecl	puts, .s1
    25 00000085 02                 
    26                                  
    27 00000086 EBFE                    	jmp	$
    28                                  
    29 00000088 2D2D2D2D2D2D2D2D0A-     .s1	db "--------", 0x0A,0x0D,0
    29 00000091 0D00               
    30                                  
    31                                  
    32 00000093 00                      ALIGN	2,db 0
    33                                  BOOT:
    34                                  .DRIVE:
    35 00000094 0000                    	dw 0
    36                                  
    37                                  %include	"../modules/real/putc.s"
     1                              <1> putc:
     2 00000096 55                  <1> 	push	bp
     3 00000097 89E5                <1> 	mov	bp,sp
     4                              <1> 
     5 00000099 50                  <1> 	push	ax
     6 0000009A 53                  <1> 	push	bx
     7                              <1> 
     8 0000009B 8A4604              <1> 	mov	al,[bp + 4]
     9 0000009E B40E                <1> 	mov	ah,0x0E
    10 000000A0 BB0000              <1> 	mov	bx,0x0000
    11 000000A3 CD10                <1> 	int	0x10
    12                              <1> 
    13 000000A5 5B                  <1> 	pop	bx
    14 000000A6 58                  <1> 	pop	ax
    15                              <1> 
    16 000000A7 89EC                <1> 	mov	sp,bp
    17 000000A9 5D                  <1> 	pop	bp
    18                              <1> 
    19 000000AA C3                  <1> 	ret
    38                                  %include	"../modules/real/puts.s"
     1                              <1> puts:
     2 000000AB 55                  <1> 	push	bp
     3 000000AC 89E5                <1> 	mov	bp,sp
     4                              <1> 
     5 000000AE 50                  <1> 	push	ax
     6 000000AF 53                  <1> 	push	bx
     7 000000B0 56                  <1> 	push	si
     8                              <1> 
     9 000000B1 8B7604              <1> 	mov	si,[bp + 4] ;si : Dist
    10                              <1> 	
    11 000000B4 B40E                <1> 	mov	ah,0x0E
    12 000000B6 BB0000              <1> 	mov	bx,0x0000
    13 000000B9 FC                  <1> 	cld
    14                              <1> .10L:
    15 000000BA AC                  <1> 	lodsb	;al = *si;si++
    16                              <1> 
    17 000000BB 3C00                <1> 	cmp 	al,0
    18 000000BD 7404                <1> 	je	.10E ; exit
    19                              <1> 
    20 000000BF CD10                <1> 	int	0x10
    21 000000C1 EBF7                <1> 	jmp	.10L ; loop
    22                              <1> .10E:
    23                              <1> 
    24 000000C3 5E                  <1> 	pop 	si
    25 000000C4 5B                  <1> 	pop	bx
    26 000000C5 58                  <1> 	pop	ax
    27                              <1> 
    28 000000C6 89EC                <1> 	mov	sp,bp
    29 000000C8 5D                  <1> 	pop	bp
    30                              <1> 
    31 000000C9 C3                  <1> 	ret
    39                                  %include	"../modules/real/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 000000CA 55                  <1> 	push 	bp
     3 000000CB 89E5                <1> 	mov	bp,sp
     4                              <1> 
     5                              <1> 	
     6 000000CD 50                  <1> 	push	ax
     7 000000CE 53                  <1> 	push	bx
     8 000000CF 51                  <1> 	push	cx
     9 000000D0 52                  <1> 	push	dx
    10 000000D1 56                  <1> 	push	si
    11 000000D2 57                  <1> 	push	di
    12                              <1> 
    13                              <1> 
    14                              <1> 	;init
    15 000000D3 8B5E0C              <1> 	mov	bx, word [bp + 12]	; bx = flag
    16 000000D6 8B4E08              <1> 	mov	cx,	 [bp + 8]	; cx = size
    17 000000D9 8B7606              <1> 	mov	si,	 [bp + 6]	; si = dist
    18                              <1> 
    19 000000DC 89F7                <1> 	mov	di,si
    20                              <1> 
    21                              <1> 	;cmp	cx,0
    22                              <1> 	;jg	.10A
    23                              <1> 	;jmp	.40A		; no buffer
    24                              <1> 
    25                              <1> .10A:				; start
    26                              <1> 
    27 000000DE B020                <1> 	mov	al,' '
    28 000000E0 F7C30400            <1> 	test	bx, 0b0100
    29 000000E4 7402                <1> 	je	.42E
    30 000000E6 B030                <1> 	mov	al,'0'
    31                              <1> .42E:
    32                              <1> 
    33                              <1> 
    34 000000E8 FC                  <1> 	cld
    35 000000E9 F3AA                <1> 	rep	stosb
    36                              <1> 
    37 000000EB 8B4604              <1> 	mov	ax,[bp + 4]	; ax = num	
    38 000000EE 8B4E08              <1> 	mov	cx,[bp + 8]	; cx = size
    39 000000F1 89F7                <1> 	mov	di,si
    40 000000F3 01CF                <1> 	add	di,cx		; di is tail of buffer
    41 000000F5 4F                  <1> 	dec	di
    42                              <1> 
    43 000000F6 F7C30100            <1> 	test	bx,0b0001	; tmp flag.is_signed
    44 000000FA 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    45 000000FC 83F800              <1>   	cmp	ax,0		; check(ax - 0)
    46 000000FF 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    47 00000101 83CB02              <1> 	or	bx,0b0010	; flag |= print_sign
    48                              <1> .12E:
    49                              <1> .10E:
    50                              <1> 	
    51                              <1> 
    52 00000104 F7C30200            <1> 	test	bx,0b0010	; if flag.print_size
    53 00000108 7410                <1> .20Q:	je	.20E		; not print sign
    54 0000010A 83F800              <1> 	cmp 	ax,0		; check(ax - 0)
    55 0000010D 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    56 0000010F F7D8                <1> 	neg	ax		; ax *= -1
    57 00000111 C6042D              <1> 	mov	[si],byte '-'
    58 00000114 EB03                <1> 	jmp	.22E
    59 00000116 C6042B              <1> .22F:	mov	[si],byte '+'
    60 00000119 49                  <1> .22E:	dec	cx		; finaly
    61                              <1> .20E:
    62                              <1> 
    63 0000011A 8B5E0A              <1> 	mov	bx,[bp + 10]	; bx = radix
    64                              <1> .30L:
    65                              <1> 	
    66 0000011D BA0000              <1> 	mov	dx, 0
    67 00000120 F7F3                <1> 	div	bx		; DX = AX % radix
    68                              <1> 				; AX = AX / radix
    69                              <1> 
    70 00000122 89D6                <1> 	mov	si,dx
    71 00000124 8A94[3A01]          <1> 	mov	dl,byte[.ascii + si]	; DL = ASCII[DX]
    72                              <1> 
    73 00000128 8815                <1> 	mov	[di],dl		; start writing in tail of buffer
    74 0000012A 4F                  <1> 	dec	di
    75                              <1> 
    76 0000012B 83F800              <1> 	cmp	ax,0
    77 0000012E E0ED                <1> 	loopnz	.30L
    78                              <1> 
    79                              <1> .40A:
    80                              <1> 
    81 00000130 5F                  <1> 	pop	di
    82 00000131 5E                  <1> 	pop	si
    83 00000132 5A                  <1> 	pop	dx
    84 00000133 59                  <1> 	pop	cx
    85 00000134 5B                  <1> 	pop	bx
    86 00000135 58                  <1> 	pop	ax
    87                              <1> 
    88 00000136 89EC                <1> 	mov	sp,bp
    89 00000138 5D                  <1> 	pop	bp
    90                              <1> 
    91 00000139 C3                  <1> 	ret
    92                              <1> 
    93 0000013A 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    93 00000143 39414243444546      <1>
    94                              <1> 
    95                              <1> 	
    96                              <1> 	
    97                              <1> 	
    40                                  
    41 0000014A 00<rept>                	times	510 - ($ - $$) db 0x00
    42 000001FE 55AA                    	db	0x55,0xAA
