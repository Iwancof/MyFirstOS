     1                                  %define		USE_SYSTEM_CALL
     2                                  %define		USE_TEST_AND_SET
     3                                  
     4                                  %include	"../include/define.s"
     1                              <1> VECT_BASE		equ	0x0010_0000
     2                              <1> KERNEL_LOAD		equ	0x0010_1000
     3                              <1> STACK_BASE		equ	0x0010_3000
     4                              <1> CR3_BASE		equ	0x0010_5000
     5                              <1> 
     6                              <1> BOOT_LOAD		equ	0x7c00
     7                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     8                              <1> 
     9                              <1> BOOT_SIZE		equ	(1024 * 8)
    10                              <1> SECT_SIZE		equ	(512)
    11                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
    12                              <1> 
    13                              <1> E820_RECORD_SIZE	equ	20
    14                              <1> 
    15                              <1> KERNEL_SIZE		equ	(1024 * 8)
    16                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    17                              <1> 
    18                              <1> 
    19                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    20                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    21                              <1> 
    22                              <1> struc			ring_buff		; for keyboard
    23 00000000 <res 00000004>      <1> 				.rp	resd	1
    24 00000004 <res 00000004>      <1> 				.wp	resd	1
    25 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    26                              <1> endstruc
    27                              <1> 
    28                              <1> struc			rose
    29 00000000 <res 00000004>      <1> 				.x0		resd	1
    30 00000004 <res 00000004>      <1> 				.y0		resd	1
    31 00000008 <res 00000004>      <1> 				.x1		resd	1
    32 0000000C <res 00000004>      <1> 				.y1		resd	1
    33                              <1> 
    34 00000010 <res 00000004>      <1> 				.n		resd	1
    35 00000014 <res 00000004>      <1> 				.d		resd	1
    36                              <1> 
    37 00000018 <res 00000004>      <1> 				.color_x	resd	1
    38 0000001C <res 00000004>      <1> 				.color_y	resd	1
    39 00000020 <res 00000004>      <1> 				.color_z	resd	1
    40 00000024 <res 00000004>      <1> 				.color_s	resd	1
    41 00000028 <res 00000004>      <1> 				.color_f	resd	1
    42 0000002C <res 00000004>      <1> 				.color_b	resd	1
    43                              <1> 				
    44 00000030 <res 00000010>      <1> 				.title		resb	16
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;struc ring_buff
    48                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    49                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    50                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    51                              <1> ;endstruc
    52                              <1> 
    53                              <1> STACK_SIZE		equ	1024
    54                              <1> 
    55                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    56                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
    57                              <1> SP_TASK_2		equ	STACK_BASE + (STACK_SIZE * 3)
    58                              <1> SP_TASK_3		equ	STACK_BASE + (STACK_SIZE * 4)
    59                              <1> SP_TASK_4		equ	STACK_BASE + (STACK_SIZE * 5)
    60                              <1> SP_TASK_5		equ	STACK_BASE + (STACK_SIZE * 6)
    61                              <1> SP_TASK_6		equ	STACK_BASE + (STACK_SIZE * 7)
    62                              <1> 
    63                              <1> PARAM_TASK_4		equ	0x0010_8000
    64                              <1> PARAM_TASK_5		equ	0x0010_9000
    65                              <1> PARAM_TASK_6		equ	0x0010_A000
    66                              <1> 
    67                              <1> CR3_TASK_4		equ	0x0020_0000
    68                              <1> CR3_TASK_5		equ	0x0020_2000
    69                              <1> CR3_TASK_6		equ	0x0020_4000
    70                              <1> 
     5                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     6                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     7                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     8                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     9                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
    10                                  %include	"../include/set_gate.s"
     1                              <1> %macro	set_gate 2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	mov	[edi + 0], ax
     9                              <1> 	shr	eax, 16
    10                              <1> 	mov	[edi + 6], ax
    11                              <1> 	
    12                              <1> 	pop	edi
    13                              <1> 	pop	eax
    14                              <1> %endmacro
    11                                  ;%include	"../../../../testOS/src/include/macro.s"
    12                                  
    13                                  ORG	KERNEL_LOAD
    14                                  
    15                                  ALIGN	4
    16 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    17 00000002 00001000                	dd	VECT_BASE
    18                                  
    19                                  
    20                                  [BITS 32]
    21                                  
    22                                  
    23                                  kernel:
    24 00000006 FA                      	cli
    25                                  
    26 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    27 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    28 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    29 00000013 C1E004                  	shl	eax, 4
    30 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    31 00000018 A3[C0020000]            	mov	[FONT_ADR], eax
    32                                  	
    33                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    33 0000001D 50                  <1>  push eax
    33 0000001E 57                  <1>  push edi
    33                              <1> 
    33 0000001F BF[600F0000]        <1>  mov edi, %1
    33 00000024 B8[E80E0000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if %0 == 3
    33 00000029 66C7075F00          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000002E 66894702            <1>  mov [edi + 2], ax
    33 00000032 C1E810              <1>  shr eax, 16
    33 00000035 884704              <1>  mov [edi + 4], al
    33 00000038 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000003B 5F                  <1>  pop edi
    33 0000003C 58                  <1>  pop eax
    34                                  	set_desc	GDT.tss_0, TSS_0
    34 0000003D 50                  <1>  push eax
    34 0000003E 57                  <1>  push edi
    34                              <1> 
    34 0000003F BF[680F0000]        <1>  mov edi, %1
    34 00000044 B8[AE0F0000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if %0 == 3
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 00000049 66894702            <1>  mov [edi + 2], ax
    34 0000004D C1E810              <1>  shr eax, 16
    34 00000050 884704              <1>  mov [edi + 4], al
    34 00000053 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 00000056 5F                  <1>  pop edi
    34 00000057 58                  <1>  pop eax
    35                                  	set_desc	GDT.tss_1, TSS_1
    35 00000058 50                  <1>  push eax
    35 00000059 57                  <1>  push edi
    35                              <1> 
    35 0000005A BF[700F0000]        <1>  mov edi, %1
    35 0000005F B8[86100000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if %0 == 3
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 00000064 66894702            <1>  mov [edi + 2], ax
    35 00000068 C1E810              <1>  shr eax, 16
    35 0000006B 884704              <1>  mov [edi + 4], al
    35 0000006E 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 00000071 5F                  <1>  pop edi
    35 00000072 58                  <1>  pop eax
    36                                  	set_desc	GDT.tss_2, TSS_2
    36 00000073 50                  <1>  push eax
    36 00000074 57                  <1>  push edi
    36                              <1> 
    36 00000075 BF[780F0000]        <1>  mov edi, %1
    36 0000007A B8[5E110000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if %0 == 3
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 0000007F 66894702            <1>  mov [edi + 2], ax
    36 00000083 C1E810              <1>  shr eax, 16
    36 00000086 884704              <1>  mov [edi + 4], al
    36 00000089 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000008C 5F                  <1>  pop edi
    36 0000008D 58                  <1>  pop eax
    37                                  	set_desc	GDT.tss_3, TSS_3
    37 0000008E 50                  <1>  push eax
    37 0000008F 57                  <1>  push edi
    37                              <1> 
    37 00000090 BF[800F0000]        <1>  mov edi, %1
    37 00000095 B8[36120000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if %0 == 3
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000009A 66894702            <1>  mov [edi + 2], ax
    37 0000009E C1E810              <1>  shr eax, 16
    37 000000A1 884704              <1>  mov [edi + 4], al
    37 000000A4 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 000000A7 5F                  <1>  pop edi
    37 000000A8 58                  <1>  pop eax
    38                                  	set_desc	GDT.tss_4, TSS_4
    38 000000A9 50                  <1>  push eax
    38 000000AA 57                  <1>  push edi
    38                              <1> 
    38 000000AB BF[880F0000]        <1>  mov edi, %1
    38 000000B0 B8[0E130000]        <1>  mov eax, %2
    38                              <1> 
    38                              <1>  %if %0 == 3
    38                              <1>  mov [edi + 0], %3
    38                              <1>  %endif
    38                              <1> 
    38 000000B5 66894702            <1>  mov [edi + 2], ax
    38 000000B9 C1E810              <1>  shr eax, 16
    38 000000BC 884704              <1>  mov [edi + 4], al
    38 000000BF 886707              <1>  mov [edi + 7], ah
    38                              <1> 
    38 000000C2 5F                  <1>  pop edi
    38 000000C3 58                  <1>  pop eax
    39                                  	set_desc	GDT.tss_5, TSS_5
    39 000000C4 50                  <1>  push eax
    39 000000C5 57                  <1>  push edi
    39                              <1> 
    39 000000C6 BF[900F0000]        <1>  mov edi, %1
    39 000000CB B8[E6130000]        <1>  mov eax, %2
    39                              <1> 
    39                              <1>  %if %0 == 3
    39                              <1>  mov [edi + 0], %3
    39                              <1>  %endif
    39                              <1> 
    39 000000D0 66894702            <1>  mov [edi + 2], ax
    39 000000D4 C1E810              <1>  shr eax, 16
    39 000000D7 884704              <1>  mov [edi + 4], al
    39 000000DA 886707              <1>  mov [edi + 7], ah
    39                              <1> 
    39 000000DD 5F                  <1>  pop edi
    39 000000DE 58                  <1>  pop eax
    40                                  	set_desc	GDT.tss_6, TSS_6
    40 000000DF 50                  <1>  push eax
    40 000000E0 57                  <1>  push edi
    40                              <1> 
    40 000000E1 BF[980F0000]        <1>  mov edi, %1
    40 000000E6 B8[BE140000]        <1>  mov eax, %2
    40                              <1> 
    40                              <1>  %if %0 == 3
    40                              <1>  mov [edi + 0], %3
    40                              <1>  %endif
    40                              <1> 
    40 000000EB 66894702            <1>  mov [edi + 2], ax
    40 000000EF C1E810              <1>  shr eax, 16
    40 000000F2 884704              <1>  mov [edi + 4], al
    40 000000F5 886707              <1>  mov [edi + 7], ah
    40                              <1> 
    40 000000F8 5F                  <1>  pop edi
    40 000000F9 58                  <1>  pop eax
    41 000000FA 0F0115[A80F0000]        	lgdt		[GDTR]
    42                                  
    43 00000101 BC00341000              	mov	esp, SP_TASK_0
    44 00000106 66B82000                	mov	ax, SS_TASK_0	; set tss0
    45 0000010A 0F00D8                  	ltr	ax
    46                                  	; say "this process is task 0" to CPU
    47                                  
    48                                  
    49 0000010D E8F1080000              	cdecl	init_int
    50 00000112 E88A070000              	cdecl	init_pic
    51                                  
    52 00000117 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    52 0000011F [3A0A0000]668907C1-
    52 00000127 E810668947065F58   
    53 0000012F 5057BF70001000B8-       	set_vect	0x0E, int_pf
    53 00000137 [A40D0000]668907C1-
    53 0000013F E810668947065F58   
    54 00000147 5057BF38001000B8-       	set_vect	0x07, int_nm
    54 0000014F [3B0C0000]668907C1-
    54 00000157 E810668947065F58   
    55 0000015F 5057BF00011000B8-       	set_vect	0x20, int_timer
    55 00000167 [0A0E0000]668907C1-
    55 0000016F E810668947065F58   
    56 00000177 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    56 0000017F [580A0000]668907C1-
    56 00000187 E810668947065F58   
    57 0000018F 5057BF40011000B8-       	set_vect	0x28, int_rtc
    57 00000197 [64080000]668907C1-
    57 0000019F E810668947065F58   
    58 000001A7 5057BF08041000B8-       	set_vect	0x81, trap_gate_81, word 0xEF00	; type = trap
    58 000001AF [930B0000]66C74704-
    58 000001B7 00EF668907C1E81066-
    58 000001C0 8947065F58         
    59 000001C5 5057BF10041000B8-       	set_vect	0x82, trap_gate_82, word 0xEF00
    59 000001CD [B90B0000]66C74704-
    59 000001D5 00EF668907C1E81066-
    59 000001DE 8947065F58         
    60                                  
    61 000001E3 E81A0B0000              	cdecl	init_page
    62                                  
    63 000001E8 B800501000              	mov	eax, CR3_BASE
    64 000001ED 0F22D8                  	mov	cr3, eax
    65                                  	
    66 000001F0 0F20C0                  	mov	eax, cr0
    67 000001F3 0D00000080              	or	eax, (1 << 31)
    68 000001F8 0F22C0                  	mov	cr0, eax
    69 000001FB EB00                    	jmp	$ + 2
    70                                  
    71                                  	;mov	eax, 0xffff00
    72                                  	;mov	[eax], dword 1
    73                                  	;cdecl	itoa, dword [eax], .t1, 16, 16, 0b0100
    74                                  	;cdecl	draw_str, 0, 10, 0x010F, .t1
    75                                  
    76                                  	set_gate	GDT.call_gate, call_gate
    76 000001FD 50                  <1>  push eax
    76 000001FE 57                  <1>  push edi
    76                              <1> 
    76 000001FF BF[A00F0000]        <1>  mov edi, %1
    76 00000204 B8[430B0000]        <1>  mov eax, %2
    76                              <1> 
    76 00000209 668907              <1>  mov [edi + 0], ax
    76 0000020C C1E810              <1>  shr eax, 16
    76 0000020F 66894706            <1>  mov [edi + 6], ax
    76                              <1> 
    76 00000213 5F                  <1>  pop edi
    76 00000214 58                  <1>  pop eax
    77                                  	
    78 00000215 6A10E8710600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    78 0000021E C404               
    79 00000220 E86F0C0000              	cdecl	int_en_timer
    80                                  	
    81                                  	outp	0x21, 0b1111_1000	; slave
    81 00000225 B0F8                <1>  mov al, %2
    81 00000227 E621                <1>  out %1, al
    82                                  	outp	0xA1, 0b1111_1110	; rtc
    82 00000229 B0FE                <1>  mov al, %2
    82 0000022B E6A1                <1>  out %1, al
    83                                  	
    84 0000022D FB                      	sti
    85                                  	
    86 0000022E 6A0D6A3FE821020000-     	cdecl	draw_font, 63, 13
    86 00000237 6683C408           
    87 0000023B 6A046A3FE88D020000-     	cdecl	draw_color_bar, 63, 4
    87 00000244 6683C408           
    88                                  
    89 00000248 68[92020000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    89 00000250 00006A0E6A19E83802-
    89 00000259 00006683C410       
    90                                  	
    91                                  	;jmp	SS_TASK_1:10000
    92                                  .10L:
    93                                  
    94 0000025F E8450C0000              	cdecl	draw_rotation_bar
    95                                  
    96 00000264 68[B9020000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
    96 0000026A [7C0A0000]E8210800-
    96 00000272 006683C408         
    97 00000277 83F800                  	cmp	eax, 0
    98 0000027A 74E3                    	je	.10L
    99                                  
   100 0000027C 68[7C0A0000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
   100 00000284 02E8660800006683C4-
   100 0000028D 0C                 
   101                                  
   102 0000028E EBCF                    	jmp	.10L
   103                                  
   104 00000290 EBFE                    	jmp	$
   105                                  	
   106                                  	
   107 00000292 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   107 0000029B 65726E656C212000   
   108 000002A3 2D2D2D2D00              .t0:	db	"----",0
   109 000002A8 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
   109 000002B1 2D2D2D2D2D2D2D00   
   110 000002B9 00000000                .int_key:	dd	0
   111                                  
   112 000002BD 00<rept>                ALIGN	4,	db	0
   113 000002C0 00000000                FONT_ADR:	dd	0
   114 000002C4 00000000                RTC_TIME:	dd	0
   115                                  
   116                                  
   117                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 000002C8 55                  <1> 	push	ebp
     4 000002C9 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 000002CB 50                  <1> 	push	eax
     7 000002CC 52                  <1> 	push	edx
     8                              <1> 
     9 000002CD 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 000002D0 80E403              <1> 	and	ah, 0x03
    11 000002D3 B004                <1> 	mov	al, 0x04	; read map
    12 000002D5 66BACE03            <1> 	mov	dx, 0x03CE
    13 000002D9 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 000002DB 5A                  <1> 	pop	edx
    16 000002DC 58                  <1> 	pop	eax
    17                              <1> 
    18 000002DD 89EC                <1> 	mov	esp,ebp
    19 000002DF 5D                  <1> 	pop	ebp
    20                              <1> 
    21 000002E0 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 000002E1 55                  <1> 	push	ebp
    25 000002E2 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 000002E4 50                  <1> 	push	eax
    28 000002E5 52                  <1> 	push	edx
    29                              <1> 
    30 000002E6 8A6508              <1> 	mov	ah, [ebp + 8]
    31 000002E9 80E40F              <1> 	and	ah, 0x0F
    32 000002EC B002                <1> 	mov	al, 0x02		; write select
    33 000002EE 66BAC403            <1> 	mov	dx, 0x03C4
    34 000002F2 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 000002F4 5A                  <1> 	pop	edx
    37 000002F5 58                  <1> 	pop	eax
    38                              <1> 
    39 000002F6 89EC                <1> 	mov	esp, ebp
    40 000002F8 5D                  <1> 	pop	ebp
    41                              <1> 
    42 000002F9 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 000002FA 55                  <1> 	push	ebp
    51 000002FB 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 000002FD 50                  <1> 	push	eax
    54 000002FE 53                  <1> 	push	ebx
    55 000002FF 51                  <1> 	push	ecx
    56 00000300 52                  <1> 	push	edx
    57 00000301 56                  <1> 	push	esi
    58 00000302 57                  <1> 	push	edi
    59                              <1> 
    60 00000303 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 00000306 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 00000309 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 0000030D 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 00000311 84C7                <1> 	test	bh, al			; BACK
    67 00000313 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 00000316 FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 00000318 84C3                <1> 	test	bl, al			; FORWARD
    71 0000031A 0F94C2              <1> 	setz	dl
    72 0000031D FECA                <1> 	dec	dl
    73                              <1> 
    74 0000031F FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 00000320 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 00000325 AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 00000326 88C4                <1> 	mov	ah, al			; AL is font data
    80 00000328 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 0000032A 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 0000032C F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 00000332 7404                <1> 	jz	.11F
    86 00000334 2227                <1> 	and	ah, [edi]
    87 00000336 EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 00000338 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 0000033A 08E0                <1> 	or	al,ah
    92 0000033C 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 0000033E 83C750              <1> 	add	edi,80			; next
    95 00000341 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 00000343 5F                  <1> 	pop	edi
    99 00000344 5E                  <1> 	pop	esi
   100 00000345 5A                  <1> 	pop	edx
   101 00000346 59                  <1> 	pop	ecx
   102 00000347 5B                  <1> 	pop	ebx
   103 00000348 58                  <1> 	pop	eax
   104                              <1> 
   105 00000349 89EC                <1> 	mov	esp, ebp
   106 0000034B 5D                  <1> 	pop	ebp
   107                              <1> 
   108 0000034C C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 0000034D 55                  <1> 	push	ebp
   113 0000034E 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 00000350 57                  <1> 	push	edi
   116 00000351 50                  <1> 	push	eax
   117 00000352 53                  <1> 	push	ebx
   118                              <1> 
   119 00000353 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 00000356 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 0000035A 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 0000035E 84C3                <1> 	test	bl, al
   124 00000360 0F94C3              <1> 	setz	bl
   125 00000363 FECB                <1> 	dec	bl
   126                              <1> 
   127 00000365 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 00000368 88C4                <1> 	mov	ah, al
   129 0000036A F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 0000036C 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 0000036E 20D8                <1> 	and	al, bl
   134 00000370 08E0                <1> 	or	al, ah
   135 00000372 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 00000374 5B                  <1> 	pop	ebx
   138 00000375 58                  <1> 	pop	eax
   139 00000376 5F                  <1> 	pop	edi
   140                              <1> 
   141 00000377 89EC                <1> 	mov	esp, ebp
   142 00000379 5D                  <1> 	pop	ebp
   143                              <1> 
   144 0000037A C3                  <1> 	ret
   145                              <1> 
   118                                  %include	"../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2 0000037B 55                  <1> 	push	ebp
     3 0000037C 89E5                <1> 	mov	ebp,esp
     4                              <1> 
     5 0000037E 57                  <1> 	push	edi
     6 0000037F 56                  <1> 	push	esi
     7 00000380 51                  <1> 	push	ecx
     8                              <1> 
     9 00000381 FC                  <1> 	cld
    10 00000382 8B7D08              <1> 	mov	edi,[ebp + 8]
    11 00000385 8B750C              <1> 	mov	esi,[ebp + 12]
    12 00000388 8B4D10              <1> 	mov	ecx,[ebp + 16]
    13                              <1> 
    14 0000038B F3A4                <1> 	rep	movsb
    15                              <1> 
    16 0000038D 59                  <1> 	pop	ecx
    17 0000038E 5E                  <1> 	pop	esi
    18 0000038F 5F                  <1> 	pop	edi
    19                              <1> 
    20 00000390 89EC                <1> 	mov	esp,ebp
    21 00000392 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00000393 C3                  <1> 	ret
    24                              <1> 
   119                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 00000394 55                  <1> 	push	ebp
     4 00000395 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000397 56                  <1> 	push	esi
     7 00000398 57                  <1> 	push	edi
     8 00000399 50                  <1> 	push	eax
     9 0000039A 53                  <1> 	push	ebx
    10 0000039B 51                  <1> 	push	ecx
    11 0000039C 52                  <1> 	push	edx
    12                              <1> 
    13 0000039D 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 000003A1 C1E604              <1> 	shl	esi, 4
    15 000003A4 0335[C0020000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 000003AA 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 000003AD C1E708              <1> 	shl	edi, 8
    19 000003B0 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 000003B7 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 000003BA 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 000003BE 6A03E803FFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 000003C7 C404                <1>
    25 000003C9 6A08E811FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 000003D2 C404                <1>
    26 000003D4 536A085756E81CFFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 000003DD FF6683C410          <1>
    27                              <1> 
    28 000003E2 6A02E8DFFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 000003EB C404                <1>
    29 000003ED 6A04E8EDFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 000003F6 C404                <1>
    30 000003F8 536A045756E8F8FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 00000401 FF6683C410          <1>
    31                              <1> 
    32 00000406 6A01E8BBFEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 0000040F C404                <1>
    33 00000411 6A02E8C9FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 0000041A C404                <1>
    34 0000041C 536A025756E8D4FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 00000425 FF6683C410          <1>
    35                              <1> 	
    36 0000042A 6A00E897FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 00000433 C404                <1>
    37 00000435 6A01E8A5FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 0000043E C404                <1>
    38 00000440 536A015756E8B0FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 00000449 FF6683C410          <1>
    39                              <1> 
    40 0000044E 5A                  <1> 	pop	edx
    41 0000044F 59                  <1> 	pop	ecx
    42 00000450 5B                  <1> 	pop	ebx
    43 00000451 58                  <1> 	pop	eax
    44 00000452 5F                  <1> 	pop	edi
    45 00000453 5E                  <1> 	pop	esi
    46                              <1> 
    47 00000454 89EC                <1> 	mov	esp, ebp
    48 00000456 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000457 C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
   120                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 00000458 55                  <1> 	push	ebp
     3 00000459 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000045B 50                  <1> 	push	eax
     6 0000045C 53                  <1> 	push	ebx
     7 0000045D 51                  <1> 	push	ecx
     8                              <1> 
     9 0000045E B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 00000463 81F900010000        <1> 	cmp	ecx,256
    12 00000469 7321                <1> 	jae	.10E
    13                              <1> 
    14 0000046B 89C8                <1> 	mov	eax, ecx
    15 0000046D 83E00F              <1> 	and	eax, 0b00001111
    16 00000470 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 00000473 89CB                <1> 	mov	ebx, ecx
    19 00000475 C1EB04              <1> 	shr	ebx, 4
    20 00000478 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 0000047B 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 00000484 FF6683C410          <1>
    23                              <1> 	
    24 00000489 41                  <1> 	inc	ecx
    25 0000048A EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 0000048C 59                  <1> 	pop	ecx
    30 0000048D 5B                  <1> 	pop	ebx
    31 0000048E 58                  <1> 	pop	eax
    32                              <1> 
    33 0000048F 89EC                <1> 	mov	esp, ebp
    34 00000491 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000492 C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
   121                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 00000493 55                  <1> 	push	ebp
     3 00000494 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000496 50                  <1> 	push	eax
     6 00000497 53                  <1> 	push	ebx
     7 00000498 51                  <1> 	push	ecx
     8 00000499 52                  <1> 	push	edx
     9 0000049A 56                  <1> 	push	esi
    10                              <1> 
    11 0000049B 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 0000049E 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 000004A1 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 000004A5 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 000004A8 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 000004A9 AC                  <1> 	lodsb
    20 000004AA 3C00                <1> 	cmp	al, 0
    21 000004AC 741A                <1> 	je	.10E
    22                              <1> %ifdef	USE_SYSTEM_CALL
    23 000004AE CD81                <1> 	int 0x81
    24                              <1> %else
    25                              <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    26                              <1> %endif
    27 000004B0 43                  <1> 	inc	ebx
    28 000004B1 83FB50              <1> 	cmp	ebx, 80
    29 000004B4 7CF3                <1> 	jl	.10L
    30 000004B6 BB00000000          <1> 	mov	ebx, 0
    31 000004BB 41                  <1> 	inc	ecx
    32 000004BC 83F91E              <1> 	cmp	ecx, 30
    33 000004BF 7CE8                <1> 	jl	.10L
    34 000004C1 B900000000          <1> 	mov	ecx, 0
    35                              <1> 	
    36 000004C6 EBE1                <1> 	jmp	.10L
    37                              <1> .10E:
    38                              <1> 
    39 000004C8 5E                  <1> 	pop	esi
    40 000004C9 5A                  <1> 	pop	edx
    41 000004CA 59                  <1> 	pop	ecx
    42 000004CB 5B                  <1> 	pop	ebx
    43 000004CC 58                  <1> 	pop	eax
    44                              <1> 
    45 000004CD 89EC                <1> 	mov	esp, ebp
    46 000004CF 5D                  <1> 	pop	ebp
    47                              <1> 
    48 000004D0 C3                  <1> 	ret
   122                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 000004D1 55                  <1> 	push	ebp
     3 000004D2 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000004D4 56                  <1> 	push	esi
     6 000004D5 57                  <1> 	push	edi
     7 000004D6 50                  <1> 	push	eax
     8 000004D7 53                  <1> 	push	ebx
     9 000004D8 51                  <1> 	push	ecx
    10 000004D9 52                  <1> 	push	edx
    11                              <1> 
    12 000004DA 8B7508              <1> 	mov	esi, [ebp + 8]
    13 000004DD 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 000004E0 B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 000004E5 83F910              <1> 	cmp	ecx, 16
    18 000004E8 732E                <1> 	jae	.10E
    19                              <1> 
    20 000004EA 89C8                <1> 	mov	eax, ecx
    21 000004EC 83E001              <1> 	and	eax, 0x01	; % 2
    22 000004EF C1E003              <1> 	shl	eax, 3		; *= 8
    23 000004F2 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 000004F4 89CB                <1> 	mov	ebx, ecx
    26 000004F6 D1EB                <1> 	shr	ebx, 1		; / 2
    27 000004F8 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 000004FA 89CA                <1> 	mov	edx, ecx
    32 000004FC D1E2                <1> 	shl	edx, 1
    33 000004FE 8B92[2B050000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 00000504 68[22050000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 0000050C E882FFFFFF6683C410  <1>
    36                              <1> 
    37 00000515 41                  <1> 	inc	ecx
    38 00000516 EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 00000518 52                  <1> 	push	edx	
    42 00000519 51                  <1> 	push	ecx	
    43 0000051A 53                  <1> 	push	ebx	
    44 0000051B 50                  <1> 	push	eax	
    45 0000051C 57                  <1> 	push	edi	
    46 0000051D 56                  <1> 	push	esi	
    47                              <1> 
    48 0000051E 89EC                <1> 	mov	esp, ebp
    49 00000520 5D                  <1> 	pop	ebp
    50                              <1> 
    51 00000521 C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 00000522 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 0000052B 00000008            <1> .t0:	dw 0x0000,0x0800
    57 0000052F 00010009            <1> 	dw 0x0100,0x0900
    58 00000533 0002000A            <1> 	dw 0x0200,0x0A00
    59 00000537 0003000B            <1> 	dw 0x0300,0x0B00
    60 0000053B 0004000C            <1> 	dw 0x0400,0x0C00
    61 0000053F 0005000D            <1> 	dw 0x0500,0x0D00
    62 00000543 0006000E            <1> 	dw 0x0600,0x0E00
    63 00000547 0007000F            <1> 	dw 0x0700,0x0F00
   123                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 0000054B 55                  <1> 	push	ebp
     4 0000054C 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 0000054E 57                  <1> 	push	edi
     7 0000054F 53                  <1> 	push	ebx
     8 00000550 51                  <1> 	push	ecx
     9                              <1> 
    10 00000551 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 00000554 C1E704              <1> 	shl	edi, 4
    12 00000557 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 0000055E 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 00000561 89D9                <1> 	mov	ecx, ebx
    16 00000563 C1EB03              <1> 	shr	ebx, 3
    17 00000566 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 00000568 83E107              <1> 	and	ecx, 0x07
    20 0000056B BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 00000570 D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 00000572 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 00000575 6A03E84CFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 0000057E C404                <1>
    28 00000580 6A08E85AFDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 00000589 C404                <1>
    29 0000058B 516A085753E8B8FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 00000594 FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 00000599 6A02E828FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 000005A2 C404                <1>
    34 000005A4 6A04E836FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 000005AD C404                <1>
    35 000005AF 516A045753E894FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 000005B8 FF6683C410          <1>
    36                              <1> 	
    37 000005BD 6A01E804FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 000005C6 C404                <1>
    38 000005C8 6A02E812FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 000005D1 C404                <1>
    39 000005D3 516A025753E870FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 000005DC FF6683C410          <1>
    40                              <1> 	
    41 000005E1 6A00E8E0FCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 000005EA C404                <1>
    42 000005EC 6A01E8EEFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 000005F5 C404                <1>
    43 000005F7 516A015753E84CFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 00000600 FF6683C410          <1>
    44                              <1> 
    45 00000605 59                  <1> 	pop	ecx
    46 00000606 5B                  <1> 	pop	ebx
    47 00000607 5F                  <1> 	pop	edi
    48                              <1> 
    49 00000608 89EC                <1> 	mov	esp, ebp
    50 0000060A 5D                  <1> 	pop	ebp
    51                              <1> 
    52 0000060B C3                  <1> 	ret
    53                              <1> 
   124                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 0000060C 55                  <1> 	push	ebp
     3 0000060D 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000060F 6A00                <1> 	push	dword 0	; SUM: - 4
     6 00000611 6A00                <1> 	push	dword 0	; x0 : - 8
     7 00000613 6A00                <1> 	push	dword 0	; wid: -12
     8 00000615 6A00                <1> 	push	dword 0	; inx: -16
     9 00000617 6A00                <1> 	push	dword 0	; y0 : -20
    10 00000619 6A00                <1> 	push	dword 0	; hei: -24
    11 0000061B 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 0000061D 50                  <1> 	push	eax
    14 0000061E 53                  <1> 	push	ebx
    15 0000061F 51                  <1> 	push	ecx
    16 00000620 52                  <1> 	push	edx
    17 00000621 56                  <1> 	push	esi
    18 00000622 57                  <1> 	push	edi
    19                              <1> 
    20 00000623 8B4508              <1> 	mov	eax, [ebp + 8]
    21 00000626 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 00000629 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 0000062B 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 0000062D F7DB                <1> 	neg	ebx
    26 0000062F BEFFFFFFFF          <1> 	mov	esi, -1
    27 00000634 EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 00000636 BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 0000063B 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 0000063E 8B5514              <1> 	mov	edx, [ebp +20]
    34 00000641 29CA                <1> 	sub	edx, ecx
    35 00000643 7D09                <1> 	jge	.20F
    36                              <1> 
    37 00000645 F7DA                <1> 	neg	edx
    38 00000647 BFFFFFFFFF          <1> 	mov	edi, -1
    39 0000064C EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 0000064E BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 00000653 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 00000656 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 00000659 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 0000065C 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 0000065F 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 00000662 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 00000665 39D3                <1> 	cmp	ebx, edx
    53 00000667 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 00000669 8D75EC              <1> 	lea	esi, [ebp -20]
    56 0000066C 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 0000066F EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 00000671 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 00000674 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 00000677 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 0000067A 83F900              <1> 	cmp	ecx, 0
    67 0000067D 7505                <1> 	jnz	.30E
    68 0000067F B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75                              <1> %ifdef	USE_SYSTEM_CALL
    76 00000684 51                  <1> 	push	ecx
    77 00000685 52                  <1> 	push	edx
    78 00000686 53                  <1> 	push	ebx
    79                              <1> 
    80 00000687 8B4DF8              <1> 	mov	ecx, [ebp - 8]
    81 0000068A 8B55EC              <1> 	mov	edx, [ebp -20]
    82 0000068D 8B5D18              <1> 	mov	ebx, [ebp +24]
    83                              <1> 
    84 00000690 CD82                <1> 	int	0x82
    85                              <1> 
    86 00000692 5B                  <1> 	pop	ebx
    87 00000693 5A                  <1> 	pop	edx
    88 00000694 59                  <1> 	pop	ecx
    89                              <1> %else	
    90                              <1> 	cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    91                              <1> %endif
    92                              <1> 	
    93                              <1> 	; update coordinate
    94 00000695 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    95 00000698 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    96                              <1> 
    97 0000069A 8B45FC              <1> 	mov	eax, [ebp - 4]
    98 0000069D 0347FC              <1> 	add	eax, [edi - 4]
    99 000006A0 8B5EFC              <1> 	mov	ebx, [esi - 4]
   100                              <1> 
   101 000006A3 39D8                <1> 	cmp	eax, ebx
   102 000006A5 7C07                <1> 	jl	.52E
   103 000006A7 29D8                <1> 	sub	eax, ebx	; sum -= wid
   104                              <1> 	; sum can only add -1 or 1
   105                              <1> 	; so. not be  "dif * 2 < sum" 
   106                              <1> 
   107 000006A9 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
   108 000006AC 011F                <1> 	add	[edi - 0], ebx
   109                              <1> .52E:
   110 000006AE 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
   111                              <1> 
   112 000006B1 E2D1                <1> 	loop	.50L
   113                              <1> .50E:
   114                              <1> 
   115                              <1> 
   116 000006B3 5F                  <1> 	pop	edi
   117 000006B4 5E                  <1> 	pop	esi
   118 000006B5 5A                  <1> 	pop	edx
   119 000006B6 59                  <1> 	pop	ecx
   120 000006B7 5B                  <1> 	pop	ebx
   121 000006B8 58                  <1> 	pop	eax
   122                              <1> 
   123 000006B9 89EC                <1> 	mov	esp, ebp
   124 000006BB 5D                  <1> 	pop	ebp
   125                              <1> 
   126 000006BC C3                  <1> 	ret
   127                              <1> 
   128                              <1> 
   125                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 000006BD 55                  <1> 	push	ebp
     3 000006BE 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000006C0 50                  <1> 	push	eax
     6 000006C1 53                  <1> 	push	ebx
     7 000006C2 51                  <1> 	push	ecx
     8 000006C3 52                  <1> 	push	edx
     9 000006C4 56                  <1> 	push	esi
    10                              <1> 
    11 000006C5 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 000006C8 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 000006CB 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 000006CE 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 000006D1 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 000006D4 39C8                <1> 	cmp	eax, ecx
    21 000006D6 7C01                <1> 	jl	.10E		; OK
    22 000006D8 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 000006D9 39D3                <1> 	cmp	ebx, edx
    25 000006DB 7C02                <1> 	jl	.20E		; OK
    26 000006DD 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 000006DF 5653515350E823FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 000006E8 FF6683C414          <1>
    36 000006ED 5652505350E815FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 000006F6 FF6683C414          <1>
    37                              <1> 
    38 000006FB 4A                  <1> 	dec	edx
    39 000006FC 5652515250E806FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 00000705 FF6683C414          <1>
    40 0000070A 42                  <1> 	inc	edx
    41                              <1> 
    42 0000070B 49                  <1> 	dec	ecx
    43 0000070C 5652515351E8F6FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 00000715 FF6683C414          <1>
    44                              <1> 
    45 0000071A 5E                  <1> 	pop	esi
    46 0000071B 5A                  <1> 	pop	edx
    47 0000071C 59                  <1> 	pop	ecx
    48 0000071D 5B                  <1> 	pop	ebx
    49 0000071E 58                  <1> 	pop	eax
    50                              <1> 
    51 0000071F 89EC                <1> 	mov	esp, ebp
    52 00000721 5D                  <1> 	pop	ebp
    53                              <1> 
    54 00000722 C3                  <1> 	ret
    55                              <1> 
   126                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 00000723 55                  <1> 	push 	ebp
     3 00000724 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000726 50                  <1> 	push	eax
     6 00000727 53                  <1> 	push	ebx
     7 00000728 51                  <1> 	push	ecx
     8 00000729 52                  <1> 	push	edx
     9 0000072A 56                  <1> 	push	esi
    10 0000072B 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 0000072C 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 00000730 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 00000733 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 00000736 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 00000738 B020                <1> 	mov	al,' '
    27 0000073A F7C304000000        <1> 	test	ebx, 0b0100
    28 00000740 7402                <1> 	je	.42E
    29 00000742 B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 00000744 FC                  <1> 	cld
    32 00000745 F3AA                <1> 	rep	stosb
    33                              <1> 
    34 00000747 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 0000074A 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 0000074D 89F7                <1> 	mov	edi, esi
    37 0000074F 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 00000751 4F                  <1> 	dec	edi
    39                              <1> 
    40 00000752 F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 00000758 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 0000075A 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 0000075D 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 0000075F 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 00000762 F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 00000768 7410                <1> .20Q:	je	.20E		; not print sign
    51 0000076A 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 0000076D 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 0000076F F7D8                <1> 	neg	eax		; ax *= -1
    54 00000771 C6062D              <1> 	mov	[esi], byte '-'
    55 00000774 EB03                <1> 	jmp	.22E
    56 00000776 C6062B              <1> .22F:	mov	[esi], byte '+'
    57 00000779 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 0000077A 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 0000077D BA00000000          <1> 	mov	edx, 0
    64 00000782 F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 00000784 89D6                <1> 	mov	esi, edx
    68 00000786 8A96[9E070000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 0000078C 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 0000078E 4F                  <1> 	dec	edi
    72                              <1> 
    73 0000078F 83F800              <1> 	cmp	eax,0
    74 00000792 E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 00000794 5F                  <1> 	pop	edi
    79 00000795 5E                  <1> 	pop	esi
    80 00000796 5A                  <1> 	pop	edx
    81 00000797 59                  <1> 	pop	ecx
    82 00000798 5B                  <1> 	pop	ebx
    83 00000799 58                  <1> 	pop	eax
    84                              <1> 
    85 0000079A 89EC                <1> 	mov	esp, ebp
    86 0000079C 5D                  <1> 	pop	ebp
    87                              <1> 
    88 0000079D C3                  <1> 	ret
    89                              <1> 
    90 0000079E 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 000007A7 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   127                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 000007AE 55                  <1> 	push	ebp
     3 000007AF 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000007B1 50                  <1> 	push	eax
     6 000007B2 53                  <1> 	push	ebx
     7                              <1> 
     8 000007B3 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 000007B6 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 000007B9 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 000007C0 [20080000]53E859FF- <1>
    10 000007C8 FFFF6683C414        <1>
    11                              <1> 
    12 000007CE 88E3                <1> 	mov	bl, ah
    13 000007D0 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 000007D7 [1D080000]53E842FF- <1>
    13 000007DF FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 000007E5 C1E810              <1> 	shr	eax, 16
    17 000007E8 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 000007EF [1A080000]50E82AFF- <1>
    17 000007F7 FFFF6683C414        <1>
    18                              <1> 
    19 000007FD 68[1A080000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 00000805 FF750CFF7508E883FC- <1>
    19 0000080E FFFF6683C410        <1>
    20                              <1> 
    21 00000814 5B                  <1> 	pop	ebx
    22 00000815 58                  <1> 	pop	eax
    23                              <1> 
    24 00000816 89EC                <1> 	mov	esp, ebp
    25 00000818 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000819 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 0000081A 5A5A3A              <1> .hour:	db	"ZZ:"
    31 0000081D 5A5A3A              <1> .min:	db	"ZZ:"
    32 00000820 5A5A00              <1> .sec:	db	"ZZ", 0
   128                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 00000823 55                  <1> 	push	ebp
     3 00000824 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000826 53                  <1> 	push	ebx
     6                              <1> 
     7 00000827 B00A                <1> 	mov	al, 0x0A
     8 00000829 E670                <1> 	out	0x70, al
     9 0000082B E471                <1> 	in	al, 0x71
    10                              <1> 
    11 0000082D A880                <1> 	test	al, 0x80
    12 0000082F 7407                <1> 	je	.10F
    13 00000831 B801000000          <1> 	mov	eax, 1		; data updating. error
    14 00000836 EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 00000838 B004                <1> 	mov	al, 0x04	; Hour
    17 0000083A E670                <1> 	out	0x70, al
    18 0000083C E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 0000083E C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 00000841 B002                <1> 	mov	al, 0x02
    23 00000843 E670                <1> 	out	0x70, al
    24 00000845 E471                <1> 	in	al, 0x71
    25                              <1> 
    26 00000847 C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 0000084A B000                <1> 	mov	al, 0x00
    29 0000084C E670                <1> 	out	0x70, al
    30 0000084E E471                <1> 	in	al, 0x71
    31                              <1> 
    32 00000850 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 00000855 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 00000858 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 0000085A B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 0000085F 5B                  <1> 	pop	ebx
    45                              <1> 
    46 00000860 89EC                <1> 	mov	esp, ebp
    47 00000862 5D                  <1> 	pop	ebp
    48                              <1> 
    49 00000863 C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   129                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 00000864 60                  <1> 	pusha		; all registers in stack
     3 00000865 1E                  <1> 	push	ds
     4 00000866 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 00000867 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 0000086B 8ED8                <1> 	mov	ds, ax
     9 0000086D 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 0000086F 68[C4020000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 00000877 FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 0000087D B00C                <2>  mov al, %2
    13 0000087F E670                <2>  out %1, al
    14 00000881 E471                <1> 	in	al, 0x71
    15                              <1> 
    16 00000883 B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 00000885 E620                <1> 	out	0x20, al
    18 00000887 E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 00000889 07                  <1> 	pop	es
    21 0000088A 1F                  <1> 	pop	ds
    22 0000088B 61                  <1> 	popa
    23                              <1> 
    24 0000088C CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 0000088D 55                  <1> 	push	ebp
    28 0000088E 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 00000890 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 00000891 B00B                <2>  mov al, %2
    32 00000893 E670                <2>  out %1, al
    33                              <1> 
    34 00000895 E471                <1> 	in	al, 0x71
    35 00000897 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 0000089A E671                <1> 	out	0x71, al
    38                              <1> 
    39 0000089C 58                  <1> 	pop	eax
    40                              <1> 
    41 0000089D 89EC                <1> 	mov	esp, ebp
    42 0000089F 5D                  <1> 	pop	ebp
    43                              <1> 
    44 000008A0 C3                  <1> 	ret
    45                              <1> 
   130                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 000008A1 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 000008A2 B011                <2>  mov al, %2
     6 000008A4 E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 000008A6 B020                <2>  mov al, %2
     7 000008A8 E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 000008AA B004                <2>  mov al, %2
     8 000008AC E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 000008AE B005                <2>  mov al, %2
     9 000008B0 E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 000008B2 B0FF                <2>  mov al, %2
    10 000008B4 E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 000008B6 B011                <2>  mov al, %2
    12 000008B8 E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 000008BA B028                <2>  mov al, %2
    13 000008BC E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 000008BE B002                <2>  mov al, %2
    14 000008C0 E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 000008C2 B001                <2>  mov al, %2
    15 000008C4 E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 000008C6 B0FF                <2>  mov al, %2
    16 000008C8 E6A1                <2>  out %1, al
    17                              <1> 
    18 000008CA 58                  <1> 	pop	eax
    19                              <1> 
    20 000008CB C3                  <1> 	ret
   131                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 000008CC FB                  <1> 	sti
     3                              <1> 
     4 000008CD 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 000008D6 19E8B7FBFFFF6683C4- <1>
     4 000008DF 10                  <1>
     5                              <1> 
     6 000008E0 8B0424              <1> 	mov	eax, [esp + 0]
     7 000008E3 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 000008EA [A8090000]50E82FFE- <1>
     7 000008F2 FFFF6683C414        <1>
     8                              <1> 	
     9 000008F8 8B442404            <1> 	mov	eax, [esp + 4]
    10 000008FC 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 00000903 [B9090000]50E816FE- <1>
    10 0000090B FFFF6683C414        <1>
    11                              <1> 	
    12 00000911 8B442408            <1> 	mov	eax, [esp + 8]
    13 00000915 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 0000091C [CA090000]50E8FDFD- <1>
    13 00000924 FFFF6683C414        <1>
    14                              <1> 	
    15 0000092A 8B44240C            <1> 	mov	eax, [esp +12]
    16 0000092E 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 00000935 [DB090000]50E8E4FD- <1>
    16 0000093D FFFF6683C414        <1>
    17                              <1> 
    18 00000943 68[A1090000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 0000094B 00006A106A19E83DFB- <1>
    18 00000954 FFFF6683C410        <1>
    19 0000095A 68[B2090000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 00000962 00006A116A19E826FB- <1>
    19 0000096B FFFF6683C410        <1>
    20 00000971 68[C3090000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 00000979 00006A126A19E80FFB- <1>
    20 00000982 FFFF6683C410        <1>
    21 00000988 68[D4090000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 00000990 00006A136A19E8F8FA- <1>
    21 00000999 FFFF6683C410        <1>
    22                              <1> 
    23 0000099F EBFE                <1> 	jmp	$
    24                              <1> 
    25 000009A1 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 000009A8 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 000009B1 00                  <1>
    27 000009B2 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 000009B9 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 000009C2 00                  <1>
    29 000009C3 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 000009CA 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 000009D3 00                  <1>
    31 000009D4 2020202B31323A      <1> .s4:	db	"   +12:"
    32 000009DB 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 000009E4 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 000009E5 9C                  <1> 	pushf
    37 000009E6 0E                  <1> 	push	cs
    38 000009E7 68[CC080000]        <1> 	push	int_stop
    39                              <1> 
    40 000009EC B8[F2090000]        <1> 	mov	eax, .s0
    41 000009F1 CF                  <1> 	iret
    42                              <1> 
    43 000009F2 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 000009FB 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 00000A03 55                  <1> 	push	ebp
    47 00000A04 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 00000A06 50                  <1> 	push	eax
    50 00000A07 53                  <1> 	push	ebx
    51 00000A08 51                  <1> 	push	ecx
    52 00000A09 57                  <1> 	push	edi
    53                              <1> 
    54 00000A0A 8D05[E5090000]      <1> 	lea	eax, [int_default]
    55 00000A10 BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000A15 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 00000A17 B900010000          <1> 	mov	ecx, 256
    65 00000A1C BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000A21 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 00000A23 894704              <1> 	mov	[edi + 4], eax	; top
    69 00000A26 83C708              <1> 	add	edi, 8
    70 00000A29 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 00000A2B 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000A32 5F                  <1> 	pop	edi
    75 00000A33 59                  <1> 	pop	ecx
    76 00000A34 5B                  <1> 	pop	ebx
    77 00000A35 58                  <1> 	pop	eax
    78                              <1> 
    79 00000A36 89EC                <1> 	mov	esp, ebp
    80 00000A38 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00000A39 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 00000A3A 9C                  <1> 	pushf
    86 00000A3B 0E                  <1> 	push	cs
    87 00000A3C 68[CC080000]        <1> 	push	int_stop
    88                              <1> 
    89 00000A41 B8[470A0000]        <1> 	mov	eax, .s0
    90 00000A46 CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 00000A47 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 00000A50 44495620203E2000    <1>
   132                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 00000A58 60                  <1> 	pusha
     3 00000A59 1E                  <1> 	push	ds
     4 00000A5A 06                  <1> 	push	es
     5                              <1> 
     6 00000A5B 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 00000A5F 8ED8                <1> 	mov	ds, ax
     8 00000A61 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000A63 E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 00000A65 5068[7C0A0000]E854- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 00000A6D 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 00000A74 B020                <2>  mov al, %2
    16 00000A76 E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 00000A78 07                  <1> 	pop	es
    20 00000A79 1F                  <1> 	pop	ds
    21 00000A7A 61                  <1> 	popa
    22                              <1> 
    23 00000A7B CF                  <1> 	iret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000A7C 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   133                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   134                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 00000A94 55                  <1> 	push	ebp
     4 00000A95 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000A97 56                  <1> 	push	esi
     7 00000A98 57                  <1> 	push	edi
     8 00000A99 53                  <1> 	push	ebx
     9                              <1> 
    10 00000A9A 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000A9D 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 00000AA0 B800000000          <1> 	mov	eax, 0
    14 00000AA5 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000AA7 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000AAA 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000AAC 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 00000AB0 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 00000AB2 43                  <1> 	inc	ebx
    23 00000AB3 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 00000AB6 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000AB8 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000ABD 5B                  <1> 	pop	ebx
    30 00000ABE 5F                  <1> 	pop	edi
    31 00000ABF 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000AC0 89EC                <1> 	mov	esp, ebp
    34 00000AC2 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000AC3 C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 00000AC4 55                  <1> 	push	ebp
    40 00000AC5 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 00000AC7 56                  <1> 	push	esi
    43 00000AC8 53                  <1> 	push	ebx
    44 00000AC9 51                  <1> 	push	ecx
    45                              <1> 
    46 00000ACA 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000ACD 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000AD0 89D9                <1> 	mov	ecx, ebx
    50 00000AD2 41                  <1> 	inc	ecx
    51 00000AD3 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 00000AD6 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000AD8 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000ADA 8A450C              <1> 	mov	al, [ebp +12]
    60 00000ADD 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000AE1 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 00000AE4 B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000AE9 59                  <1> 	pop	ecx
    66 00000AEA 5B                  <1> 	pop	ebx
    67 00000AEB 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000AEC 89EC                <1> 	mov	esp, ebp
    70 00000AEE 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000AEF C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000AF0 55                  <1> 	push	ebp
    77 00000AF1 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 00000AF3 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 00000AF4 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 00000AF7 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000AFA 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000AFD 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000B00 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 00000B03 B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000B08 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000B09 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000B0C 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000B0F 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000B16 [400B0000]50E803FC- <1>
    95 00000B1E FFFF6683C414        <1>
    96 00000B24 68[400B0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000B2C 52E861F9FFFF6683C4- <1>
    96 00000B35 10                  <1>
    97                              <1> 
    98 00000B36 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000B39 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000B3B 61                  <1> 	popa
   104                              <1> 
   105 00000B3C 89EC                <1> 	mov	esp, ebp
   106 00000B3E 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000B3F C3                  <1> 	ret
   109                              <1> 
   110 00000B40 2D2D00              <1> .tmp:	db	"--",0
   135                                  %include	"../modules/protect/call_gate.s"
     1                              <1> call_gate:
     2                              <1> 	;retf	4 * 4
     3                              <1> ; if SS_GATE_0 called
     4 00000B43 55                  <1> 	push	ebp
     5 00000B44 89E5                <1> 	mov	ebp, esp
     6                              <1> 
     7 00000B46 60                  <1> 	pusha
     8 00000B47 1E                  <1> 	push	ds
     9 00000B48 06                  <1> 	push	es
    10                              <1> 
    11 00000B49 66B81000            <1> 	mov	ax, 0x0010
    12 00000B4D 8ED8                <1> 	mov	ds, ax
    13 00000B4F 8EC0                <1> 	mov	es, ax
    14                              <1> 
    15                              <1> 	;str	ax
    16                              <1> 	;cmp	ax, SS_TASK_1
    17                              <1> 	;je	.11L
    18                              <1> 
    19                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t0
    20                              <1> 	;jmp	.10E
    21                              <1> .11L:
    22                              <1> 	;cdecl	draw_str, 0, 0, 0x010F, .t1
    23                              <1> .10E:
    24                              <1> 		
    25                              <1> 	;cdecl	itoa, esp, .t2, 8, 16, 0b0100
    26                              <1> 	;cdecl	draw_str, 0, 1, 0x010F, .t2
    27                              <1> 
    28                              <1> 	;cdecl	itoa, dword [ESP_COUNTER], .t3, 8, 16, 0b0100
    29                              <1> 	;cdecl	draw_str, 0, 2, 0x010F, .t3
    30                              <1> 	
    31                              <1> 
    32                              <1> 
    33                              <1> 	; ebp + 0 -- EBP
    34                              <1> 	; ebp + 4 -- EIP
    35                              <1> 	; ebp + 8 -- CS
    36 00000B51 8B450C              <1> 	mov	eax, dword[ebp +12]
    37 00000B54 8B5D10              <1> 	mov	ebx, dword[ebp +16]
    38 00000B57 8B4D14              <1> 	mov	ecx, dword[ebp +20]
    39 00000B5A 8B5518              <1> 	mov	edx, dword[ebp +24]
    40 00000B5D 52515350E82DF9FFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx
    40 00000B66 6683C410            <1>
    41                              <1> 	; wrapper
    42                              <1> 
    43 00000B6A 07                  <1> 	pop	es
    44 00000B6B 1F                  <1> 	pop	ds
    45 00000B6C 61                  <1> 	popa
    46                              <1> 
    47 00000B6D 89EC                <1> 	mov	esp, ebp
    48 00000B6F 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000B70 CA1000              <1> 	retf	4 * 4	; 4 DWORDs
    51                              <1> 
    52                              <1> 
    53 00000B73 7461736B5F3000      <1> .t0:	db	"task_0",0
    54 00000B7A 7461736B5F3100      <1> .t1:	db	"task_1",0
    55 00000B81 2D2D2D2D2D2D2D2D00  <1> .t2:	db	"--------", 0
    56 00000B8A 2D2D2D2D2D2D2D2D00  <1> .t3:	db	"--------", 0
   136                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ; system calls
     2                              <1> trap_gate_81:	; system call 81, draw_char
     3                              <1> %ifdef	USE_TEST_AND_SET
     4 00000B93 68[E00B0000]E84B00- <1> 	cdecl	test_and_set, IN_USE_81
     4 00000B9B 00006683C404        <1>
     5                              <1> %endif
     6 00000BA1 50525153E8EAF7FFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
     6 00000BAA 6683C410            <1>
     7                              <1> %ifdef	USE_TEST_AND_SET
     8 00000BAE C705[E00B0000]0000- <1> 	mov	[IN_USE_81], dword 0
     8 00000BB6 0000                <1>
     9                              <1> %endif
    10 00000BB8 CF                  <1> 	iret
    11                              <1> 
    12                              <1> trap_gate_82:
    13                              <1> %ifdef	USE_TEST_AND_SET
    14 00000BB9 68[E40B0000]E82500- <1> 	cdecl	test_and_set, IN_USE_82
    14 00000BC1 00006683C404        <1>
    15                              <1> %endif
    16 00000BC7 535251E87CF9FFFF66- <1> 	cdecl	draw_pixel, ecx, edx, ebx
    16 00000BD0 83C40C              <1>
    17                              <1> %ifdef	USE_TEST_AND_SET
    18 00000BD3 C705[E40B0000]0000- <1> 	mov	[IN_USE_82], dword 0
    18 00000BDB 0000                <1>
    19                              <1> %endif
    20 00000BDD CF                  <1> 	iret
    21                              <1> 
    22 00000BDE 00<rept>            <1> ALIGN	4,		db	0
    23 00000BE0 00000000            <1> IN_USE_81:		dd	0
    24 00000BE4 00000000            <1> IN_USE_82:		dd	0
   137                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2 00000BE8 55                  <1> 	push	ebp
     3 00000BE9 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000BEB 50                  <1> 	push	eax
     6 00000BEC 53                  <1> 	push	ebx
     7                              <1> 
     8 00000BED B800000000          <1> 	mov	eax, 0		; set bit
     9 00000BF2 8B5D08              <1> 	mov	ebx, [ebp + 8]	; global variable
    10                              <1> 
    11                              <1> .10L:
    12 00000BF5 F00FAB03            <1> 	lock	bts [ebx], eax
    13 00000BF9 7307                <1> 	jnc	.10E		; we can use registers
    14                              <1> .12L:
    15 00000BFB 0FA303              <1> 	bt	[ebx], eax
    16 00000BFE 72FB                <1> 	jc	.12L		; we can not use
    17                              <1> 
    18 00000C00 EBF3                <1> 	jmp	.10L
    19                              <1> .10E:
    20                              <1> 	
    21 00000C02 5B                  <1> 	pop	ebx
    22 00000C03 58                  <1> 	pop	eax
    23                              <1> 
    24 00000C04 89EC                <1> 	mov	esp, ebp
    25 00000C06 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000C07 C3                  <1> 	ret
    28                              <1> 
   138                                  %include	"../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 	; eax : return value
     3                              <1> 	; ebx : segment selector
     4                              <1> 
     5 00000C08 8B83[4A0F0000]      <1> 	mov	eax, [GDT + ebx + 2]
     6 00000C0E C1E008              <1> 	shl	eax, 8
     7 00000C11 8A83[4F0F0000]      <1> 	mov	al, [GDT + ebx + 7]
     8 00000C17 C1C808              <1> 	ror	eax, 8
     9                              <1> 
    10 00000C1A C3                  <1> 	ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 	; eax : tss address
    14 00000C1B DD7068              <1> 	fnsave	[eax + 104]
    15 00000C1E C780D4000000010000- <1> 	mov	[eax + 104 + 108], dword 1	; store flag or present flag(?)
    15 00000C27 00                  <1>
    16                              <1> 	
    17 00000C28 C3                  <1> 	ret
    18                              <1> 
    19                              <1> load_fpu_context:
    20 00000C29 83B8D400000000      <1> 	cmp	[eax + 104 + 108], dword 0
    21 00000C30 7505                <1> 	jne	.10F
    22 00000C32 9BDBE3              <1> 	finit					; not initialized yet
    23 00000C35 EB03                <1> 	jmp	.10E
    24                              <1> .10F:
    25 00000C37 DD6068              <1> 	frstor	[eax + 104]
    26                              <1> .10E:
    27 00000C3A C3                  <1> 	ret
    28                              <1> 
    29                              <1> int_nm:
    30 00000C3B 60                  <1> 	pusha
    31 00000C3C 06                  <1> 	push	es
    32 00000C3D 1E                  <1> 	push	ds
    33                              <1> 
    34 00000C3E 66B81000            <1> 	mov	ax, DS_KERNEL
    35 00000C42 8EC0                <1> 	mov	es, ax
    36 00000C44 8ED8                <1> 	mov	ds, ax
    37                              <1> 
    38 00000C46 0F06                <1> 	clts
    39                              <1> 
    40 00000C48 8B3D[940C0000]      <1> 	mov	edi, [.last_tss]
    41 00000C4E 0F00CE              <1> 	str	esi
    42 00000C51 83E6F8              <1> 	and	esi, ~0x0007	; exclude TI,RPL bits
    43                              <1> 
    44 00000C54 83FF00              <1> 	cmp	edi, 0		; first use
    45 00000C57 7420                <1> 	je	.10F
    46                              <1> 
    47 00000C59 39FE                <1> 	cmp	esi, edi
    48 00000C5B 741A                <1> 	je	.12E
    49                              <1> 
    50 00000C5D FA                  <1> 	cli
    51                              <1> 
    52 00000C5E 89FB                <1> 	mov	ebx, edi
    53 00000C60 E8A3FFFFFF          <1> 	call	get_tss_base	; eax is address to tss
    54 00000C65 E8B1FFFFFF          <1> 	call	save_fpu_context; eax used here
    55                              <1> 
    56 00000C6A 89F3                <1> 	mov	ebx, esi
    57 00000C6C E897FFFFFF          <1> 	call	get_tss_base
    58 00000C71 E8B3FFFFFF          <1> 	call	load_fpu_context
    59                              <1> 
    60 00000C76 FB                  <1> 	sti
    61                              <1> .12E:
    62 00000C77 EB0E                <1> 	jmp	.10E
    63                              <1> .10F:
    64 00000C79 FA                  <1> 	cli
    65                              <1> 
    66 00000C7A 89F3                <1> 	mov	ebx, esi
    67 00000C7C E887FFFFFF          <1> 	call	get_tss_base
    68 00000C81 E8A3FFFFFF          <1> 	call	load_fpu_context
    69                              <1> 
    70 00000C86 FB                  <1> 	sti
    71                              <1> .10E:
    72                              <1> 
    73 00000C87 8935[940C0000]      <1> 	mov	[.last_tss], esi
    74                              <1> 
    75 00000C8D 1F                  <1> 	pop	ds
    76 00000C8E 07                  <1> 	pop	es
    77 00000C8F 61                  <1> 	popa
    78                              <1> 
    79 00000C90 CF                  <1> 	iret
    80                              <1> 
    81 00000C91 00<rept>            <1> ALIGN	4,	db	0
    82 00000C94 00000000            <1> .last_tss:	dd	0
   139                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2 00000C98 55                  <1> 	push	ebp
     3 00000C99 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000C9B 50                  <1> 	push	eax
     6 00000C9C 51                  <1> 	push	ecx
     7                              <1> 
     8 00000C9D 8B4D08              <1> 	mov	ecx, [ebp + 8]
     9 00000CA0 A1[8C0E0000]        <1> 	mov	eax, [TIMER_COUNT]
    10                              <1> .10L:
    11 00000CA5 3905[8C0E0000]      <1> 	cmp	[TIMER_COUNT], eax
    12 00000CAB 74F8                <1> 	je	.10L
    13 00000CAD 40                  <1> 	inc	eax		; per 10ms
    14 00000CAE E2F5                <1> 	loop	.10L		; 10ms * ecx]
    15                              <1> 
    16 00000CB0 59                  <1> 	pop	ecx
    17 00000CB1 58                  <1> 	pop	eax
    18                              <1> 
    19 00000CB2 89EC                <1> 	mov	esp, ebp
    20 00000CB4 5D                  <1> 	pop	ebp
    21                              <1> 
    22 00000CB5 C3                  <1> 	ret
    23                              <1> 
   140                                  ;%include	"../modules/protect/int_pf.s"
   141                                  %include	"modules/paging.s"
     1                              <1> page_set_4m:
     2 00000CB6 55                  <1> 	push	ebp
     3 00000CB7 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000CB9 60                  <1> 	pusha
     6                              <1> 
     7 00000CBA FC                  <1> 	cld
     8 00000CBB 8B7D08              <1> 	mov	edi, [ebp + 8]
     9 00000CBE B800000000          <1> 	mov	eax, 0x00000000		; null page directory
    10 00000CC3 B900040000          <1> 	mov	ecx, 1024		; 1024 directories
    11 00000CC8 F3AB                <1> 	rep	stosd
    12                              <1> 
    13 00000CCA 89F8                <1> 	mov	eax, edi		; we use memory after page directory
    14 00000CCC 2500F0FFFF          <1> 	and	eax, ~0x0000_0FFF
    15 00000CD1 83C807              <1> 	or	eax, 0b0000_0111	; enable read write
    16                              <1> 
    17 00000CD4 898700F0FFFF        <1> 	mov	[edi - (1024 * 4)], eax
    18                              <1> 	
    19 00000CDA B807000000          <1> 	mov	eax, 0x0000_0007
    20 00000CDF B900040000          <1> 	mov	ecx, 1024		; 1024 pages
    21                              <1> .10L:
    22 00000CE4 AB                  <1> 	stosd
    23 00000CE5 0500100000          <1> 	add	eax, 0x0000_1000
    24 00000CEA E2F8                <1> 	loop	.10L
    25                              <1> 
    26 00000CEC 61                  <1> 	popa
    27                              <1> 
    28 00000CED 89EC                <1> 	mov	esp, ebp
    29 00000CEF 5D                  <1> 	pop	ebp
    30                              <1> 
    31 00000CF0 C3                  <1> 	ret
    32                              <1> 
    33 00000CF1 2D2D2D2D2D2D2D2D2D- <1> .t0:	db	"----------------", 0
    33 00000CFA 2D2D2D2D2D2D2D00    <1>
    34                              <1> 
    35                              <1> init_page:
    36 00000D02 60                  <1> 	pusha
    37 00000D03 6800501000E8A9FFFF- <1> 	cdecl	page_set_4m, CR3_BASE
    37 00000D0C FF6683C404          <1>
    38 00000D11 6800002000E89BFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_4
    38 00000D1A FF6683C404          <1>
    39 00000D1F 6800202000E88DFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_5
    39 00000D28 FF6683C404          <1>
    40 00000D2D 6800402000E87FFFFF- <1> 	cdecl	page_set_4m, CR3_TASK_6
    40 00000D36 FF6683C404          <1>
    41 00000D3B C7051C641000000000- <1> 	mov [CR3_BASE + 0x1000 + 0x107 * 4], dword 0
    41 00000D44 00                  <1>
    42 00000D45 C7051C142000078010- <1> 	mov [CR3_TASK_4 + 0x1000 + 0x107 * 4], dword PARAM_TASK_4 + 7
    42 00000D4E 00                  <1>
    43 00000D4F C7051C342000079010- <1> 	mov [CR3_TASK_5 + 0x1000 + 0x107 * 4], dword PARAM_TASK_5 + 7
    43 00000D58 00                  <1>
    44 00000D59 C7051C54200007A010- <1> 	mov [CR3_TASK_6 + 0x1000 + 0x107 * 4], dword PARAM_TASK_6 + 7
    44 00000D62 00                  <1>
    45                              <1> 
    46 00000D63 6A4068[DC170000]68- <1> 	cdecl	memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size
    46 00000D6B 00801000E807F6FFFF- <1>
    46 00000D74 6683C40C            <1>
    47 00000D78 6A4068[1C180000]68- <1> 	cdecl	memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size
    47 00000D80 00901000E8F2F5FFFF- <1>
    47 00000D89 6683C40C            <1>
    48 00000D8D 6A4068[5C180000]68- <1> 	cdecl	memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size
    48 00000D95 00A01000E8DDF5FFFF- <1>
    48 00000D9E 6683C40C            <1>
    49                              <1> 
    50                              <1> 	; [0x00000000] = 0x0
    51 00000DA2 61                  <1> 	popa
    52                              <1> 
    53 00000DA3 C3                  <1> 	ret
    54                              <1> 
   142                                  %include	"modules/int_pf.s"
     1                              <1> int_pf:
     2 00000DA4 55                  <1> 	push	ebp
     3 00000DA5 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000DA7 60                  <1> 	pusha
     6 00000DA8 06                  <1> 	push	es
     7 00000DA9 1E                  <1> 	push	ds
     8                              <1> 
     9                              <1> 	; mov	ax, DS_KERNEL
    10                              <1> 	; mov	es, ax
    11                              <1> 	; mov	ds, ax
    12                              <1> 
    13 00000DAA 0F20D0              <1> 	mov	eax, cr2	; interrupt address
    14 00000DAD 2500F0FFFF          <1> 	and	eax, ~0x0FFF
    15 00000DB2 3D00701000          <1> 	cmp	eax, 0x0010_7000
    16 00000DB7 7521                <1> 	jne	.10F
    17                              <1> 	
    18 00000DB9 C7051C641000077010- <1> 	mov	[0x00106000 + 0x107 * 4], dword 0x0010_7007
    18 00000DC2 00                  <1>
    19                              <1> 	; 0x00107007 means 0x00107000 can use as read and write
    20 00000DC3 6A4068[9C170000]68- <1> 	cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    20 00000DCB 00701000E8A7F5FFFF- <1>
    20 00000DD4 6683C40C            <1>
    21                              <1> 
    22 00000DD8 EB15                <1> 	jmp	.10E
    23                              <1> .10F:
    24 00000DDA 83C404              <1> 	add	esp, 4
    25 00000DDD 83C404              <1> 	add	esp, 4
    26 00000DE0 61                  <1> 	popa
    27 00000DE1 5D                  <1> 	pop	ebp
    28                              <1> 
    29 00000DE2 9C                  <1> 	pushf
    30 00000DE3 0E                  <1> 	push	cs
    31 00000DE4 68[CC080000]        <1> 	push	int_stop
    32                              <1> 
    33 00000DE9 B8[F90D0000]        <1> 	mov	eax, .s0
    34 00000DEE CF                  <1> 	iret			; kernel stop
    35                              <1> .10E:
    36 00000DEF 1F                  <1> 	pop	ds
    37 00000DF0 07                  <1> 	pop	es
    38 00000DF1 61                  <1> 	popa
    39                              <1> 
    40 00000DF2 89EC                <1> 	mov	esp, ebp
    41 00000DF4 5D                  <1> 	pop	ebp
    42                              <1> 	
    43 00000DF5 83C404              <1> 	add	esp, 4	; error code clear
    44 00000DF8 CF                  <1> 	iret
    45                              <1> 	
    46 00000DF9 203C20504147452046- <1> .s0	db	" < PAGE FAULT > ", 0
    46 00000E02 41554C54203E2000    <1>
    47                              <1> 
   143                                  ;%include	"../modules/protect/int_timer.s"
   144                                  %include	"modules/my_int_timer.s"
     1                              <1> int_timer:
     2 00000E0A 60                  <1> 	pushad
     3 00000E0B 06                  <1> 	push	es
     4 00000E0C 1E                  <1> 	push	ds
     5                              <1> 
     6 00000E0D 66B81000            <1> 	mov	ax, 0x10
     7 00000E11 8ED8                <1> 	mov	ds, ax
     8 00000E13 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000E15 FF05[8C0E0000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 00000E1B B020                <2>  mov al, %2
    12 00000E1D E620                <2>  out %1, al
    13                              <1> 	
    14 00000E1F 660F00C8            <1> 	str	ax
    15 00000E23 6683F820            <1> 	cmp	ax, SS_TASK_0
    16 00000E27 7427                <1> 	je	.11L
    17 00000E29 6683F828            <1> 	cmp	ax, SS_TASK_1
    18 00000E2D 742A                <1> 	je	.12L
    19 00000E2F 6683F830            <1> 	cmp	ax, SS_TASK_2
    20 00000E33 742D                <1> 	je	.13L
    21 00000E35 6683F838            <1> 	cmp	ax, SS_TASK_3
    22 00000E39 7430                <1> 	je	.14L
    23 00000E3B 6683F840            <1> 	cmp	ax, SS_TASK_4
    24 00000E3F 7433                <1> 	je	.15L
    25 00000E41 6683F848            <1> 	cmp	ax, SS_TASK_5
    26 00000E45 7436                <1> 	je	.16L
    27                              <1> 
    28 00000E47 EA000000002000      <1> 	jmp	SS_TASK_0:0
    29 00000E4E EB36                <1> 	jmp	.10E
    30                              <1> .11L:
    31 00000E50 EA000000002800      <1> 	jmp	SS_TASK_1:0
    32 00000E57 EB2D                <1> 	jmp	.10E
    33                              <1> .12L:
    34 00000E59 EA000000003000      <1> 	jmp	SS_TASK_2:0
    35 00000E60 EB24                <1> 	jmp	.10E
    36                              <1> .13L:
    37 00000E62 EA000000003800      <1> 	jmp	SS_TASK_3:0
    38 00000E69 EB1B                <1> 	jmp	.10E
    39                              <1> .14L:
    40 00000E6B EA000000004000      <1> 	jmp	SS_TASK_4:0
    41 00000E72 EB12                <1> 	jmp	.10E
    42                              <1> .15L:
    43 00000E74 EA000000004800      <1> 	jmp	SS_TASK_5:0
    44 00000E7B EB09                <1> 	jmp	.10E
    45                              <1> .16L:
    46 00000E7D EA000000005000      <1> 	jmp	SS_TASK_6:0
    47 00000E84 EB00                <1> 	jmp	.10E
    48                              <1> .10E:
    49                              <1> 
    50 00000E86 1F                  <1> 	pop	ds
    51 00000E87 07                  <1> 	pop	es
    52 00000E88 61                  <1> 	popad
    53                              <1> 	
    54 00000E89 CF                  <1> 	iret
    55                              <1> 
    56 00000E8A 00<rept>            <1> ALIGN	4,	db	0
    57 00000E8C 0000000000000000    <1> TIMER_COUNT:	dq	0
    58                              <1> 
    59                              <1> 
    60                              <1> int_en_timer:
    61 00000E94 55                  <1> 	push	ebp
    62 00000E95 89E5                <1> 	mov	ebp, esp
    63                              <1> 	
    64 00000E97 50                  <1> 	push	eax
    65                              <1> 
    66                              <1> 	outp	0x43, 0b00_11_010_0
    66 00000E98 B034                <2>  mov al, %2
    66 00000E9A E643                <2>  out %1, al
    67                              <1> 	; counter 0
    68                              <1> 	; access mode, bottom -> top
    69                              <1> 	; mode, 2
    70                              <1> 	; bcd
    71                              <1> 
    72                              <1> 	outp	0x40, 0x9C
    72 00000E9C B09C                <2>  mov al, %2
    72 00000E9E E640                <2>  out %1, al
    73                              <1> 	outp	0x40, 0x2E
    73 00000EA0 B02E                <2>  mov al, %2
    73 00000EA2 E640                <2>  out %1, al
    74                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    75                              <1> 
    76 00000EA4 58                  <1> 	pop	eax
    77                              <1> 
    78 00000EA5 89EC                <1> 	mov 	esp, ebp
    79 00000EA7 5D                  <1> 	pop	ebp
    80                              <1> 
    81 00000EA8 C3                  <1> 	ret
    82                              <1> 
    83                              <1> 
   145                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00000EA9 55                  <1> 	push	ebp
     3 00000EAA 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000EAC 50                  <1> 	push	eax
     6                              <1> 
     7 00000EAD A1[8C0E0000]        <1> 	mov	eax, [TIMER_COUNT]
     8 00000EB2 C1E808              <1> 	shr	eax, 8
     9 00000EB5 3B05[E00E0000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 00000EBB 741E                <1> 	je	.10E
    11                              <1> 
    12 00000EBD A3[E00E0000]        <1> 	mov	[.index], eax
    13 00000EC2 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 00000EC5 8A80[E40E0000]      <1> 	mov	al, [.table + eax]
    16 00000ECB 506A0F6A1D6A00E8BD- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 00000ED4 F4FFFF6683C410      <1>
    17                              <1> .10E:
    18 00000EDB 58                  <1> 	pop	eax
    19                              <1> 
    20 00000EDC 89EC                <1> 	mov	esp, ebp
    21 00000EDE 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00000EDF C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000EE0 00000000            <1> .index:		dd	0
    27 00000EE4 7C2F2D5C            <1> .table:		dd	"|/-\"
   146                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 00000EE8 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 00000EF0 FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 00000EF8 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 00000F00 FFFF000000FACF00    <1> .cs_task_1:	dq	0x00CF_FA00_0000_FFFF
     6 00000F08 FFFF000000F2CF00    <1> .ds_task_1:	dq	0x00CF_F200_0000_FFFF
     7 00000F10 FFFF000000FACF00    <1> .cs_task_2:	dq	0x00CF_FA00_0000_FFFF
     8 00000F18 FFFF000000F2CF00    <1> .ds_task_2:	dq	0x00CF_F200_0000_FFFF
     9 00000F20 FFFF000000FACF00    <1> .cs_task_3:	dq	0x00CF_FA00_0000_FFFF
    10 00000F28 FFFF000000F2CF00    <1> .ds_task_3:	dq	0x00CF_F200_0000_FFFF
    11 00000F30 FFFF000000F2CF00    <1> .ds_task_4:	dq	0x00CF_F200_0000_FFFF
    12 00000F38 FFFF000000F2CF00    <1> .ds_task_5:	dq	0x00CF_F200_0000_FFFF
    13 00000F40 FFFF000000F2CF00    <1> .ds_task_6:	dq	0x00CF_F200_0000_FFFF
    14                              <1> .end:
    15                              <1> 
    16                              <1> ; ldt indexes
    17                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    18                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    19                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4 | 3	; offset | (use LDT bit) | (level = 3)
    20                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4 | 3	
    21                              <1> CS_TASK_2:	equ	(.cs_task_2 - LDT) | 4 | 3
    22                              <1> DS_TASK_2:	equ	(.ds_task_2 - LDT) | 4 | 3	
    23                              <1> CS_TASK_3:	equ	(.cs_task_3 - LDT) | 4 | 3
    24                              <1> DS_TASK_3:	equ	(.ds_task_3 - LDT) | 4 | 3
    25                              <1> DS_TASK_4:	equ	(.ds_task_4 - LDT) | 4 | 3
    26                              <1> DS_TASK_5:	equ	(.ds_task_5 - LDT) | 4 | 3
    27                              <1> DS_TASK_6:	equ	(.ds_task_6 - LDT) | 4 | 3
    28                              <1> 
    29                              <1> LDT_LIMIT	equ	.end - LDT - 1
    30                              <1> 
    31                              <1> 
    32 00000F48 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    33 00000F50 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    34 00000F58 FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    35 00000F60 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    36 00000F68 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    37 00000F70 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    38 00000F78 6700000000890000    <1> .tss_2:		dq	0x0000_8900_0000_0067
    39 00000F80 6700000000890000    <1> .tss_3:		dq	0x0000_8900_0000_0067
    40 00000F88 6700000000890000    <1> .tss_4:		dq	0x0000_8900_0000_0067
    41 00000F90 6700000000890000    <1> .tss_5:		dq	0x0000_8900_0000_0067
    42 00000F98 6700000000890000    <1> .tss_6:		dq	0x0000_8900_0000_0067
    43 00000FA0 0000080004EC0000    <1> .call_gate:	dq	0x0000_EC04_0008_0000
    44                              <1> .end:
    45                              <1> 
    46                              <1> ; gdt indexes
    47                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    48                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    49                              <1> SS_LDT		equ	.ldt - GDT
    50                              <1> SS_TASK_0	equ	.tss_0 - GDT		; jump point
    51                              <1> SS_TASK_1	equ	.tss_1 - GDT
    52                              <1> SS_TASK_2	equ	.tss_2 - GDT
    53                              <1> SS_TASK_3	equ	.tss_3 - GDT
    54                              <1> SS_TASK_4	equ	.tss_4 - GDT
    55                              <1> SS_TASK_5	equ	.tss_5 - GDT
    56                              <1> SS_TASK_6	equ	.tss_6 - GDT
    57                              <1> SS_GATE_0	equ	.call_gate - GDT
    58                              <1> 
    59 00000FA8 5F00                <1> GDTR:		dw	GDT.end - GDT - 1
    60 00000FAA [480F0000]          <1> 		dd	GDT
    61                              <1> 
    62                              <1> TSS_0:
    63 00000FAE 00000000            <1> .link:    dd 0
    64 00000FB2 00321000            <1> .esp0:    dd SP_TASK_0 - STACK_SIZE / 2
    65 00000FB6 10000000            <1> .ss0:     dd DS_KERNEL
    66 00000FBA 00000000            <1> .esp1:    dd 0
    67 00000FBE 00000000            <1> .ss1:     dd 0
    68 00000FC2 00000000            <1> .esp2:    dd 0
    69 00000FC6 00000000            <1> .ss2:     dd 0
    70 00000FCA 00501000            <1> .cr3:     dd CR3_BASE
    71 00000FCE 00000000            <1> .eip:     dd 0
    72 00000FD2 00000000            <1> .eflags:  dd 0
    73 00000FD6 00000000            <1> .eax:     dd 0
    74 00000FDA 00000000            <1> .ecx:     dd 0
    75 00000FDE 00000000            <1> .edx:     dd 0
    76 00000FE2 00000000            <1> .ebx:     dd 0
    77 00000FE6 00000000            <1> .esp:     dd 0
    78 00000FEA 00000000            <1> .ebp:     dd 0
    79 00000FEE 00000000            <1> .esi:     dd 0
    80 00000FF2 00000000            <1> .edi:     dd 0
    81 00000FF6 00000000            <1> .es:      dd 0
    82 00000FFA 00000000            <1> .cs:      dd 0
    83 00000FFE 00000000            <1> .ss:      dd 0
    84 00001002 00000000            <1> .ds:      dd 0
    85 00001006 00000000            <1> .fs:      dd 0
    86 0000100A 00000000            <1> .gs:      dd 0
    87 0000100E 00000000            <1> .ldt:     dd 0
    88 00001012 00000000            <1> .io:      dd 0
    89 00001016 00<rept>            <1> .fp_save: times 108 + 4 db 0
    90                              <1> 
    91                              <1> TSS_1:
    92 00001086 00000000            <1> .link:    dd 0
    93 0000108A 00361000            <1> .esp0:    dd SP_TASK_1 - STACK_SIZE / 2
    94 0000108E 10000000            <1> .ss0:     dd DS_KERNEL
    95 00001092 00000000            <1> .esp1:    dd 0
    96 00001096 00000000            <1> .ss1:     dd 0
    97 0000109A 00000000            <1> .esp2:    dd 0
    98 0000109E 00000000            <1> .ss2:     dd 0
    99 000010A2 00501000            <1> .cr3:     dd CR3_BASE
   100 000010A6 [96150000]          <1> .eip:     dd task_1	; start at task_1
   101 000010AA 02020000            <1> .eflags:  dd 0x0202
   102 000010AE 00000000            <1> .eax:     dd 0
   103 000010B2 00000000            <1> .ecx:     dd 0
   104 000010B6 00000000            <1> .edx:     dd 0
   105 000010BA 00000000            <1> .ebx:     dd 0
   106 000010BE 00381000            <1> .esp:     dd SP_TASK_1
   107 000010C2 00000000            <1> .ebp:     dd 0
   108 000010C6 00000000            <1> .esi:     dd 0
   109 000010CA 00000000            <1> .edi:     dd 0
   110 000010CE 27000000            <1> .es:      dd DS_TASK_1
   111 000010D2 1F000000            <1> .cs:      dd CS_TASK_1
   112 000010D6 27000000            <1> .ss:      dd DS_TASK_1
   113 000010DA 27000000            <1> .ds:      dd DS_TASK_1
   114 000010DE 27000000            <1> .fs:      dd DS_TASK_1
   115 000010E2 27000000            <1> .gs:      dd DS_TASK_1
   116 000010E6 18000000            <1> .ldt:     dd SS_LDT
   117 000010EA 00000000            <1> .io:      dd 0
   118 000010EE 00<rept>            <1> .fp_save: times 108 + 4 db 0
   119                              <1> 
   120                              <1> TSS_2:
   121 0000115E 00000000            <1> .link:    dd 0
   122 00001162 003A1000            <1> .esp0:    dd SP_TASK_2 - STACK_SIZE / 2
   123 00001166 10000000            <1> .ss0:     dd DS_KERNEL
   124 0000116A 00000000            <1> .esp1:    dd 0
   125 0000116E 00000000            <1> .ss1:	    dd 0
   126 00001172 00000000            <1> .esp2:    dd 0
   127 00001176 00000000            <1> .ss2:     dd 0
   128 0000117A 00501000            <1> .cr3:     dd CR3_BASE
   129 0000117E [CB150000]          <1> .eip:     dd task_2	; start at task_2
   130 00001182 02020000            <1> .eflags:  dd 0x0202
   131 00001186 00000000            <1> .eax:     dd 0
   132 0000118A 00000000            <1> .ecx:     dd 0
   133 0000118E 00000000            <1> .edx:     dd 0
   134 00001192 00000000            <1> .ebx:			dd 0
   135 00001196 003C1000            <1> .esp:			dd SP_TASK_2
   136 0000119A 00000000            <1> .ebp:			dd 0
   137 0000119E 00000000            <1> .esi:			dd 0
   138 000011A2 00000000            <1> .edi:			dd 0
   139 000011A6 37000000            <1> .es:			dd DS_TASK_2
   140 000011AA 2F000000            <1> .cs:			dd CS_TASK_2
   141 000011AE 37000000            <1> .ss:			dd DS_TASK_2
   142 000011B2 37000000            <1> .ds:			dd DS_TASK_2
   143 000011B6 37000000            <1> .fs:			dd DS_TASK_2
   144 000011BA 37000000            <1> .gs:			dd DS_TASK_2
   145 000011BE 18000000            <1> .ldt:			dd SS_LDT
   146 000011C2 00000000            <1> .io:			dd 0
   147 000011C6 00<rept>            <1> .fp_save: times 108 + 4 db 0
   148                              <1> 
   149                              <1> TSS_3:
   150 00001236 00000000            <1> .link:    dd 0
   151 0000123A 003E1000            <1> .esp0:    dd SP_TASK_3 - 512
   152 0000123E 10000000            <1> .ss0:     dd DS_KERNEL
   153 00001242 00000000            <1> .esp1:    dd 0
   154 00001246 00000000            <1> .ss1:     dd 0
   155 0000124A 00000000            <1> .esp2:    dd 0
   156 0000124E 00000000            <1> .ss2:     dd 0
   157 00001252 00501000            <1> .cr3:     dd CR3_BASE
   158 00001256 [9C160000]          <1> .eip:     dd task_3
   159 0000125A 02020000            <1> .eflags:  dd 0x0202
   160 0000125E 00000000            <1> .eax:     dd 0
   161 00001262 00000000            <1> .ecx:     dd 0
   162 00001266 00000000            <1> .edx:     dd 0
   163 0000126A 00000000            <1> .ebx:     dd 0
   164 0000126E 00401000            <1> .esp:     dd SP_TASK_3
   165 00001272 00000000            <1> .ebp:     dd 0
   166 00001276 00000000            <1> .esi:     dd 0
   167 0000127A 00000000            <1> .edi:     dd 0
   168 0000127E 47000000            <1> .es:      dd DS_TASK_3
   169 00001282 3F000000            <1> .cs:      dd CS_TASK_3
   170 00001286 47000000            <1> .ss:      dd DS_TASK_3
   171 0000128A 47000000            <1> .ds:      dd DS_TASK_3
   172 0000128E 47000000            <1> .fs:      dd DS_TASK_3
   173 00001292 47000000            <1> .gs:      dd DS_TASK_3
   174 00001296 18000000            <1> .ldt:     dd SS_LDT
   175 0000129A 00000000            <1> .io:      dd 0
   176 0000129E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   177                              <1> 
   178                              <1> TSS_4:
   179 0000130E 00000000            <1> .link:    dd 0
   180 00001312 00421000            <1> .esp0:    dd SP_TASK_4 - 512
   181 00001316 10000000            <1> .ss0:     dd DS_KERNEL
   182 0000131A 00000000            <1> .esp1:    dd 0
   183 0000131E 00000000            <1> .ss1:     dd 0
   184 00001322 00000000            <1> .esp2:    dd 0
   185 00001326 00000000            <1> .ss2:     dd 0
   186 0000132A 00002000            <1> .cr3:     dd CR3_TASK_4
   187 0000132E [9C160000]          <1> .eip:     dd task_3
   188 00001332 02020000            <1> .eflags:  dd 0x0202
   189 00001336 00000000            <1> .eax:     dd 0
   190 0000133A 00000000            <1> .ecx:     dd 0
   191 0000133E 00000000            <1> .edx:     dd 0
   192 00001342 00000000            <1> .ebx:     dd 0
   193 00001346 00441000            <1> .esp:     dd SP_TASK_4
   194 0000134A 00000000            <1> .ebp:     dd 0
   195 0000134E 00000000            <1> .esi:     dd 0
   196 00001352 00000000            <1> .edi:     dd 0
   197 00001356 4F000000            <1> .es:      dd DS_TASK_4
   198 0000135A 3F000000            <1> .cs:      dd CS_TASK_3
   199 0000135E 4F000000            <1> .ss:      dd DS_TASK_4
   200 00001362 4F000000            <1> .ds:      dd DS_TASK_4
   201 00001366 4F000000            <1> .fs:      dd DS_TASK_4
   202 0000136A 4F000000            <1> .gs:      dd DS_TASK_4
   203 0000136E 18000000            <1> .ldt:     dd SS_LDT
   204 00001372 00000000            <1> .io:      dd 0
   205 00001376 00<rept>            <1> .fp_save: times 108 + 4 db 0
   206                              <1> 
   207                              <1> TSS_5:
   208 000013E6 00000000            <1> .link:    dd 0
   209 000013EA 00461000            <1> .esp0:    dd SP_TASK_5 - 512
   210 000013EE 10000000            <1> .ss0:     dd DS_KERNEL
   211 000013F2 00000000            <1> .esp1:    dd 0
   212 000013F6 00000000            <1> .ss1:     dd 0
   213 000013FA 00000000            <1> .esp2:    dd 0
   214 000013FE 00000000            <1> .ss2:     dd 0
   215 00001402 00202000            <1> .cr3:     dd CR3_TASK_5
   216 00001406 [9C160000]          <1> .eip:     dd task_3
   217 0000140A 02020000            <1> .eflags:  dd 0x0202
   218 0000140E 00000000            <1> .eax:     dd 0
   219 00001412 00000000            <1> .ecx:     dd 0
   220 00001416 00000000            <1> .edx:     dd 0
   221 0000141A 00000000            <1> .ebx:     dd 0
   222 0000141E 00481000            <1> .esp:     dd SP_TASK_5
   223 00001422 00000000            <1> .ebp:     dd 0
   224 00001426 00000000            <1> .esi:     dd 0
   225 0000142A 00000000            <1> .edi:     dd 0
   226 0000142E 57000000            <1> .es:      dd DS_TASK_5
   227 00001432 3F000000            <1> .cs:      dd CS_TASK_3
   228 00001436 57000000            <1> .ss:      dd DS_TASK_5
   229 0000143A 57000000            <1> .ds:      dd DS_TASK_5
   230 0000143E 57000000            <1> .fs:      dd DS_TASK_5
   231 00001442 57000000            <1> .gs:      dd DS_TASK_5
   232 00001446 18000000            <1> .ldt:     dd SS_LDT
   233 0000144A 00000000            <1> .io:      dd 0
   234 0000144E 00<rept>            <1> .fp_save: times 108 + 4 db 0
   235                              <1> 
   236                              <1> TSS_6:
   237 000014BE 00000000            <1> .link:    dd 0
   238 000014C2 004A1000            <1> .esp0:    dd SP_TASK_6 - 512
   239 000014C6 10000000            <1> .ss0:     dd DS_KERNEL
   240 000014CA 00000000            <1> .esp1:    dd 0
   241 000014CE 00000000            <1> .ss1:     dd 0
   242 000014D2 00000000            <1> .esp2:    dd 0
   243 000014D6 00000000            <1> .ss2:     dd 0
   244 000014DA 00402000            <1> .cr3:     dd CR3_TASK_6
   245 000014DE [9C160000]          <1> .eip:     dd task_3
   246 000014E2 02020000            <1> .eflags:  dd 0x0202
   247 000014E6 00000000            <1> .eax:     dd 0
   248 000014EA 00000000            <1> .ecx:     dd 0
   249 000014EE 00000000            <1> .edx:     dd 0
   250 000014F2 00000000            <1> .ebx:     dd 0
   251 000014F6 004C1000            <1> .esp:     dd SP_TASK_6
   252 000014FA 00000000            <1> .ebp:     dd 0
   253 000014FE 00000000            <1> .esi:     dd 0
   254 00001502 00000000            <1> .edi:     dd 0
   255 00001506 5F000000            <1> .es:      dd DS_TASK_6
   256 0000150A 3F000000            <1> .cs:      dd CS_TASK_3
   257 0000150E 5F000000            <1> .ss:      dd DS_TASK_6
   258 00001512 5F000000            <1> .ds:      dd DS_TASK_6
   259 00001516 5F000000            <1> .fs:      dd DS_TASK_6
   260 0000151A 5F000000            <1> .gs:      dd DS_TASK_6
   261 0000151E 18000000            <1> .ldt:     dd SS_LDT
   262 00001522 00000000            <1> .io:      dd 0
   263 00001526 00<rept>            <1> .fp_save:	times 108 + 4 db 0
   264                              <1> 
   147                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 00001596 68[C4150000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 0000159E 006A3FE8EDEEFFFF66- <1>
     2 000015A7 83C410              <1>
     3                              <1> 	; cdecl	itoa, esp, .t0, 8, 16, 0b0100
     4                              <1> 	; cdecl	draw_str, 0, 2, 0x010F, .s0
     5                              <1> 	;mov	[ESP_COUNTER], esp
     6                              <1> 	; task_1 dose not have level 0
     7                              <1> 	; cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
     8                              <1> .10L:
     9                              <1> 	;cdecl	itoa, esp, .t0, 8, 16, 0b0100	
    10                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .t0
    11                              <1> 	;mov	[ESP_COUNTER], esp
    12                              <1> 	
    13                              <1> 	;cdecl	SS_GATE_0:0, 63, 0, 0x07, .s0
    14                              <1> 	
    15 000015AA A1[C4020000]        <1> 	mov	eax, [RTC_TIME]
    16 000015AF 5068000700006A006A- <1> 	cdecl	draw_time, 72, 0, 0x0700, eax
    16 000015B8 48E8F0F1FFFF6683C4- <1>
    16 000015C1 10                  <1>
    17                              <1> 
    18                              <1> 	; jmp	SS_TASK_0:0	
    19                              <1> 
    20 000015C2 EBE6                <1> 	jmp	.10L
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24 000015C4 5461736B2D3100      <1> .s0	db	"Task-1", 0
   148                                  %include	"task/task_2.s"
     1                              <1> task_2:
     2 000015CB 68[8E160000]6A076A- <1> 	cdecl	draw_str, 63, 1, 0x07, .s0
     2 000015D3 016A3FE8B8EEFFFF66- <1>
     2 000015DC 83C410              <1>
     3                              <1> 	
     4 000015DF DB05[7C160000]      <1> 	fild	dword [.c1000]
     5 000015E5 D9EB                <1> 	fldpi
     6 000015E7 DA35[80160000]      <1> 	fidiv	dword [.c180]
     7 000015ED D9EB                <1> 	fldpi
     8 000015EF DCC0                <1> 	fadd	st0, st0
     9 000015F1 D9EE                <1> 	fldz
    10                              <1> 	; 0 | 2pi | pi/180 | 1000
    11                              <1> 
    12                              <1> .10L:
    13 000015F3 D8C2                <1> 	fadd	st0, st2
    14 000015F5 D9F8                <1> 	fprem
    15 000015F7 D9C0                <1> 	fld	st0	; copy st0
    16 000015F9 D9FE                <1> 	fsin
    17 000015FB D8CC                <1> 	fmul	st0, st4
    18 000015FD DF35[84160000]      <1> 	fbstp	[.bcd]
    19                              <1> 
    20 00001603 A1[84160000]        <1> 	mov	eax, [.bcd]
    21 00001608 89C3                <1> 	mov	ebx, eax
    22                              <1> 	
    23 0000160A 250F0F0000          <1> 	and	eax, 0x0F0F
    24 0000160F 0D30300000          <1> 	or	eax, 0x3030
    25                              <1> 
    26 00001614 C1EB04              <1> 	shr	ebx, 4
    27 00001617 81E30F0F0000        <1> 	and	ebx, 0x0F0F
    28 0000161D 81CB30300000        <1> 	or	ebx, 0x3030
    29                              <1> 
    30 00001623 883D[96160000]      <1> 	mov	[.s2 + 0], bh
    31 00001629 8825[98160000]      <1> 	mov	[.s3 + 0], ah
    32 0000162F 881D[99160000]      <1> 	mov	[.s3 + 1], bl
    33 00001635 A2[9A160000]        <1> 	mov	[.s3 + 2], al
    34                              <1> 
    35 0000163A B807000000          <1> 	mov	eax, 7		; sign bit
    36 0000163F 0FA305[8D160000]    <1> 	bt	[.bcd + 9], eax
    37 00001646 7209                <1> 	jc	.10F
    38                              <1> 	
    39 00001648 C605[95160000]2B    <1> 	mov	[.s1 + 0], byte '+'
    40 0000164F EB07                <1> 	jmp	.10E
    41                              <1> .10F:
    42 00001651 C605[95160000]2D    <1> 	mov	[.s1 + 0], byte '-'
    43                              <1> .10E:
    44 00001658 68[95160000]6A076A- <1> 	cdecl	draw_str, 72, 1, 0x07, .s1
    44 00001660 016A48E82BEEFFFF66- <1>
    44 00001669 83C410              <1>
    45                              <1> 	
    46 0000166C 6A0AE825F6FFFF6683- <1> 	cdecl	wait_tick, 10
    46 00001675 C404                <1>
    47                              <1> 
    48 00001677 E977FFFFFF          <1> 	jmp	.10L
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52 0000167C E8030000            <1> .c1000	dd	1000
    53 00001680 B4000000            <1> .c180	dd	180
    54 00001684 00<rept>            <1> .bcd:	times	10	db	0x00
    55 0000168E 5461736B2D3200      <1> .s0	db	"Task-2", 0
    56 00001695 2D                  <1> .s1:	db	"-"
    57 00001696 302E                <1> .s2:	db	"0."
    58 00001698 30303000            <1> .s3:	db	"000", 0
   149                                  %include	"task/task_3.s"
     1                              <1> task_3:
     2                              <1> 	; push	ebp
     3 0000169C 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000169E 6A00                <1> 	push	dword 0	; origin x
     6 000016A0 6A00                <1> 	push	dword 0	; origin y
     7 000016A2 6A00                <1> 	push	dword 0	; 
     8 000016A4 6A00                <1> 	push	dword 0
     9 000016A6 6A00                <1> 	push	dword 0
    10                              <1> 
    11                              <1> 
    12 000016A8 BE00701000          <1> 	mov	esi, 0x0010_7000
    13                              <1> 
    14 000016AD 8B06                <1> 	mov	eax, [esi + rose.x0]
    15 000016AF 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    16                              <1> 
    17 000016B2 C1E803              <1> 	shr	eax, 3		; eax is x
    18 000016B5 C1EB04              <1> 	shr	ebx, 4		; ebx is y
    19 000016B8 4B                  <1> 	dec	ebx
    20 000016B9 8B4E24              <1> 	mov	ecx, [esi + rose.color_s]
    21 000016BC 8D5630              <1> 	lea	edx, [esi + rose.title]
    22                              <1> 
    23 000016BF 52515350E8CBEDFFFF- <1> 	cdecl	draw_str, eax, ebx, ecx, edx	; draw title
    23 000016C8 6683C410            <1>
    24                              <1> 
    25 000016CC 8B06                <1> 	mov	eax, [esi + rose.x0]
    26 000016CE 8B5E08              <1> 	mov	ebx, [esi + rose.x1]
    27 000016D1 29C3                <1> 	sub	ebx, eax
    28 000016D3 D1EB                <1> 	shr	ebx, 1			; half of size
    29 000016D5 01C3                <1> 	add	ebx, eax		; origin x
    30 000016D7 895DFC              <1> 	mov	[ebp - 4], ebx
    31                              <1> 
    32 000016DA 8B4604              <1> 	mov	eax, [esi + rose.y0]
    33 000016DD 8B5E0C              <1> 	mov	ebx, [esi + rose.y1]
    34 000016E0 29C3                <1> 	sub	ebx, eax
    35 000016E2 D1EB                <1> 	shr	ebx, 1
    36 000016E4 01C3                <1> 	add	ebx, eax
    37 000016E6 895DF8              <1> 	mov	[ebp - 8], ebx
    38                              <1> 
    39 000016E9 8B06                <1> 	mov	eax, [esi + rose.x0]	; x start
    40 000016EB 8B5DF8              <1> 	mov	ebx, [ebp - 8]		; y
    41 000016EE 8B4E08              <1> 	mov	ecx, [esi + rose.x1]	; x end
    42                              <1> 
    43 000016F1 FF761853515350E80F- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; x axis
    43 000016FA EFFFFF6683C414      <1>
    44                              <1> 
    45 00001701 8B4604              <1> 	mov	eax, [esi + rose.y0]	; y start
    46 00001704 8B5DFC              <1> 	mov	ebx, [ebp - 4]		; x
    47 00001707 8B4E0C              <1> 	mov	ecx, [esi + rose.y1]	; y end
    48                              <1> 
    49 0000170A FF761C51535053E8F6- <1> 	cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
    49 00001713 EEFFFF6683C414      <1>
    50                              <1> 
    51 0000171A 8B06                <1> 	mov	eax, [esi + rose.x0]
    52 0000171C 8B5E04              <1> 	mov	ebx, [esi + rose.y0]
    53 0000171F 8B4E08              <1> 	mov	ecx, [esi + rose.x1]
    54 00001722 8B560C              <1> 	mov	edx, [esi + rose.y1]
    55                              <1> 
    56 00001725 FF762052515350E88C- <1> 	cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
    56 0000172E EFFFFF6683C414      <1>
    57                              <1> 
    58 00001735 8B4608              <1> 	mov	eax, [esi + rose.x1]
    59 00001738 2B06                <1> 	sub	eax, [esi + rose.x0]
    60 0000173A D1E8                <1> 	shr	eax, 1
    61 0000173C 89C3                <1> 	mov	ebx, eax
    62 0000173E C1EB04              <1> 	shr	ebx, 4
    63 00001741 29D8                <1> 	sub	eax, ebx
    64                              <1> 	; eax -= eax / 16
    65                              <1> 
    66 00001743 FF7614FF761050E84D- <1> 	cdecl	fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
    66 0000174C 0100006683C40C      <1>
    67                              <1> .10L:
    68                              <1> 
    69 00001753 8D5DF4              <1> 	lea	ebx, [ebp - 12]	; x position address
    70 00001756 8D4DF0              <1> 	lea	ecx, [ebp - 16]	; y position address
    71 00001759 8B45EC              <1> 	mov	eax, [ebp - 20]	; t
    72                              <1> 
    73 0000175C 505153E85201000066- <1> 	cdecl	fpu_rose_update, ebx, ecx, eax
    73 00001765 83C40C              <1>
    74                              <1> 
    75 00001768 BA00000000          <1> 	mov	edx, 0
    76 0000176D 40                  <1> 	inc	eax
    77 0000176E BBA08C0000          <1> 	mov	ebx, 360 * 100
    78 00001773 F7F3                <1> 	div	ebx
    79                              <1> 	; EDX:EAX div ebx. EAX : /, EDX : %.
    80 00001775 8955EC              <1> 	mov	[ebp -20], edx
    81                              <1> 
    82 00001778 8B4DF4              <1> 	mov	ecx, [ebp -12]	; x = 0
    83 0000177B 8B55F0              <1> 	mov	edx, [ebp -16]	; y = 0
    84                              <1> 
    85 0000177E 034DFC              <1> 	add	ecx, [ebp - 4]	; x += X
    86 00001781 0355F8              <1> 	add	edx, [ebp - 8]	; t += Y
    87                              <1> 
    88 00001784 8B5E28              <1> 	mov	ebx, [esi + rose.color_f]
    89 00001787 CD82                <1> 	int	0x82		; draw_pixel at (ecx, edx). color is ebx
    90                              <1> 
    91 00001789 6A02E808F5FFFF6683- <1> 	cdecl	wait_tick, 2
    91 00001792 C404                <1>
    92                              <1> 
    93 00001794 8B5E2C              <1> 	mov	ebx, [esi + rose.color_b]
    94 00001797 CD82                <1> 	int	0x82
    95                              <1> 	
    96 00001799 EBB8                <1> 	jmp	.10L
    97                              <1> 
    98 0000179B 00                  <1> ALIGN	4,	db	0
    99                              <1> 
   100                              <1> ALIGN 4, db 0
   101                              <1> DRAW_PARAM:
   102                              <1> .t3:
   103                              <1>     istruc rose
   104 0000179C 20000000            <1>         at rose.x0, dd 32
   105 000017A0 20000000            <1>         at rose.y0, dd 32
   106 000017A4 D0000000            <1>         at rose.x1, dd 208
   107 000017A8 D0000000            <1>         at rose.y1, dd 208
   108                              <1> 
   109 000017AC 02000000            <1>         at rose.n, dd 2
   110 000017B0 01000000            <1>         at rose.d, dd 1
   111                              <1> 
   112 000017B4 07000000            <1>         at rose.color_x, dd 0x0007
   113 000017B8 07000000            <1>         at rose.color_y, dd 0x0007
   114 000017BC 0F000000            <1>         at rose.color_z, dd 0x000F
   115 000017C0 0F030000            <1>         at rose.color_s, dd 0x030F
   116 000017C4 0F000000            <1>         at rose.color_f, dd 0x000F
   117 000017C8 03000000            <1>         at rose.color_b, dd 0x0003
   118                              <1> 
   119 000017CC 5461736B2D3300      <1>         at rose.title, db "Task-3", 0
   120 000017D3 00<rept>            <1>     iend
   121                              <1> 
   122                              <1> .t4:
   123                              <1>     istruc rose
   124 000017DC F8000000            <1>         at rose.x0, dd 248
   125 000017E0 20000000            <1>         at rose.y0, dd 32
   126 000017E4 A8010000            <1>         at rose.x1, dd 424
   127 000017E8 D0000000            <1>         at rose.y1, dd 208
   128                              <1> 
   129 000017EC 03000000            <1>         at rose.n, dd 3
   130 000017F0 01000000            <1>         at rose.d, dd 1
   131                              <1> 
   132 000017F4 07000000            <1>         at rose.color_x, dd 0x0007
   133 000017F8 07000000            <1>         at rose.color_y, dd 0x0007
   134 000017FC 0F000000            <1>         at rose.color_z, dd 0x000F
   135 00001800 0F040000            <1>         at rose.color_s, dd 0x040F
   136 00001804 0F000000            <1>         at rose.color_f, dd 0x000F
   137 00001808 04000000            <1>         at rose.color_b, dd 0x0004
   138                              <1> 
   139 0000180C 5461736B2D3400      <1>         at rose.title, db "Task-4", 0
   140 00001813 00<rept>            <1>     iend
   141                              <1> 
   142                              <1> .t5:
   143                              <1>     istruc rose
   144 0000181C 20000000            <1>         at rose.x0, dd 32
   145 00001820 10010000            <1>         at rose.y0, dd 272
   146 00001824 D0000000            <1>         at rose.x1, dd 208
   147 00001828 C0010000            <1>         at rose.y1, dd 448
   148                              <1> 
   149 0000182C 02000000            <1>         at rose.n, dd 2
   150 00001830 06000000            <1>         at rose.d, dd 6
   151                              <1> 
   152 00001834 07000000            <1>         at rose.color_x, dd 0x0007
   153 00001838 07000000            <1>         at rose.color_y, dd 0x0007
   154 0000183C 0F000000            <1>         at rose.color_z, dd 0x000F
   155 00001840 0F050000            <1>         at rose.color_s, dd 0x050F
   156 00001844 0F000000            <1>         at rose.color_f, dd 0x000F
   157 00001848 05000000            <1>         at rose.color_b, dd 0x0005
   158                              <1> 
   159 0000184C 5461736B2D3500      <1>         at rose.title, db "Task-5", 0
   160 00001853 00<rept>            <1>     iend
   161                              <1> 
   162                              <1> .t6:
   163                              <1>     istruc rose
   164 0000185C F8000000            <1>         at rose.x0, dd 248
   165 00001860 10010000            <1>         at rose.y0, dd 272
   166 00001864 A8010000            <1>         at rose.x1, dd 424
   167 00001868 C0010000            <1>         at rose.y1, dd 448
   168                              <1> 
   169 0000186C 04000000            <1>         at rose.n, dd 4
   170 00001870 06000000            <1>         at rose.d, dd 6
   171                              <1> 
   172 00001874 07000000            <1>         at rose.color_x, dd 0x0007
   173 00001878 07000000            <1>         at rose.color_y, dd 0x0007
   174 0000187C 0F000000            <1>         at rose.color_z, dd 0x000F
   175 00001880 0F060000            <1>         at rose.color_s, dd 0x060F
   176 00001884 0F000000            <1>         at rose.color_f, dd 0x000F
   177 00001888 06000000            <1>         at rose.color_b, dd 0x0006
   178                              <1> 
   179 0000188C 5461736B2D3600      <1>         at rose.title, db "Task-6", 0
   180 00001893 00<rept>            <1>     iend
   181                              <1> 
   182                              <1> 
   183                              <1> 
   184                              <1> fpu_rose_init:	;	fpu_rose_init(A,n,d)
   185 0000189C 55                  <1> 	push	ebp
   186 0000189D 89E5                <1> 	mov	ebp, esp
   187                              <1> 
   188 0000189F 68B4000000          <1> 	push	dword 180
   189                              <1> 
   190 000018A4 D9EB                <1> 	fldpi
   191 000018A6 DA75FC              <1> 	fidiv	dword [ebp - 4]	; 180
   192 000018A9 DB450C              <1> 	fild	dword [ebp +12]	; n
   193 000018AC DA7510              <1> 	fidiv	dword [ebp +16]	; n / d
   194 000018AF DB4508              <1> 	fild	dword [ebp + 8]	; A
   195                              <1> 
   196 000018B2 89EC                <1> 	mov	esp, ebp
   197 000018B4 5D                  <1> 	pop	ebp
   198                              <1> 
   199 000018B5 C3                  <1> 	ret
   200                              <1> 
   201                              <1> fpu_rose_update:	;	fpu_rose_update(px, py, t)
   202                              <1> ; px,py is address. t is angle
   203 000018B6 55                  <1> 	push	ebp
   204 000018B7 89E5                <1> 	mov	ebp, esp
   205                              <1> 
   206 000018B9 50                  <1> 	push	eax
   207 000018BA 53                  <1> 	push	ebx
   208                              <1> 
   209 000018BB 8B4508              <1> 	mov	eax, [ebp + 8]
   210 000018BE 8B5D0C              <1> 	mov	ebx, [ebp +12]
   211                              <1> 
   212 000018C1 DB4510              <1> 	fild	dword [ebp +16]
   213 000018C4 D8CB                <1> 	fmul	st0, st3		; st0 is degree, st3 is radian / degree. st0 is radian
   214 000018C6 D9C0                <1> 	fld	st0
   215                              <1> 
   216 000018C8 D9FB                <1> 	fsincos
   217 000018CA D9CA                <1> 	fxch	st2			; change st0, st2
   218 000018CC D8CC                <1> 	fmul	st0, st4		; st0 = kθ
   219 000018CE D9FE                <1> 	fsin				; st0 = sin(kθ)
   220 000018D0 D8CB                <1> 	fmul	st0, st3		; st0 = Asin(kθ)
   221                              <1> 
   222 000018D2 D9CA                <1> 	fxch	st2
   223 000018D4 D8CA                <1> 	fmul	st0, st2
   224 000018D6 DB18                <1> 	fistp	dword [eax]		; store x pos
   225                              <1> 
   226 000018D8 DEC9                <1> 	fmulp	st1, st0
   227 000018DA D9E0                <1> 	fchs				; convert to display coordinate
   228 000018DC DB1B                <1> 	fistp	dword [ebx]		; store y pos
   229                              <1> 
   230 000018DE 5B                  <1> 	pop	ebx
   231 000018DF 58                  <1> 	pop	eax
   232                              <1> 
   233 000018E0 89EC                <1> 	mov	esp, ebp
   234 000018E2 5D                  <1> 	pop	ebp
   235                              <1> 
   236 000018E3 C3                  <1> 	ret
   237                              <1> 
   238                              <1> 
   239                              <1> 	
   240                              <1> 
   241                              <1> 
   150                                  ;%include	"../../../../testOS/src/39_rose/tasks/task_3.s"
   151                                  
   152                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   153                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   154                                  
   155                                  
   156                                  
   157 000018E4 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
