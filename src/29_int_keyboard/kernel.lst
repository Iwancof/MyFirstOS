     1                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD		equ	0x7c00
     2                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     3                              <1> 
     4                              <1> BOOT_SIZE		equ	(1024 * 8)
     5                              <1> SECT_SIZE		equ	(512)
     6                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
     7                              <1> 
     8                              <1> E820_RECORD_SIZE	equ	20
     9                              <1> 
    10                              <1> KERNEL_LOAD		equ	0x0010_1000
    11                              <1> KERNEL_SIZE		equ	(1024 * 8)
    12                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> VECT_BASE		equ	0x0010_0000
    15                              <1> 
    16                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    17                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    18                              <1> 
    19                              <1> struc			ring_buff		; for keyboard
    20 00000000 <res 00000004>      <1> 				.rp	resd	1
    21 00000004 <res 00000004>      <1> 				.wp	resd	1
    22 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    23                              <1> endstruc
    24                              <1> ;struc ring_buff
    25                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    26                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    27                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    28                              <1> ;endstruc
     2                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     3                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     4                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     5                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     6                                  ;%include	"../../../../testOS/src/include/macro.s"
     7                                  
     8                                  ORG	KERNEL_LOAD
     9                                  
    10                                  ALIGN	4
    11 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    12 00000002 00001000                	dd	VECT_BASE
    13                                  
    14                                  
    15                                  [BITS 32]
    16                                  
    17                                  
    18                                  kernel:
    19 00000006 FA                      	cli
    20                                  
    21 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    22 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    23 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    24 00000013 C1E004                  	shl	eax, 4
    25 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    26 00000018 A3[14010000]            	mov	[FONT_ADR], eax
    27                                  	
    28 0000001D E828080000              	cdecl	init_int
    29 00000022 E8C1060000              	cdecl	init_pic
    30                                  
    31 00000027 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    31 0000002F [81080000]668907C1-
    31 00000037 E810668947065F58   
    32 0000003F 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    32 00000047 [9F080000]668907C1-
    32 0000004F E810668947065F58   
    33 00000057 5057BF40011000B8-       	set_vect	0x28, int_rtc
    33 0000005F [AB060000]668907C1-
    33 00000067 E810668947065F58   
    34                                  	
    35 0000006F 6A10E85E0600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    35 00000078 C404               
    36                                  	
    37                                  	outp	0x21, 0b1111_1001	; slave
    37 0000007A B0F9                <1>  mov al, %2
    37 0000007C E621                <1>  out %1, al
    38                                  	outp	0xA1, 0b1111_1110	; rtc
    38 0000007E B0FE                <1>  mov al, %2
    38 00000080 E6A1                <1>  out %1, al
    39                                  
    40 00000082 FB                      	sti
    41                                  
    42 00000083 6A0D6A3FE807020000-     	cdecl	draw_font, 63, 13
    42 0000008C 6683C408           
    43 00000090 6A046A3FE87E020000-     	cdecl	draw_color_bar, 63, 4
    43 00000099 6683C408           
    44                                  
    45 0000009D 68[FA000000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    45 000000A5 00006A0E6A19E81E02-
    45 000000AE 00006683C410       
    46                                  
    47                                  .10L:
    48 000000B4 A1[18010000]            	mov	eax, [RTC_TIME]
    49 000000B9 5068000700006A006A-     	cdecl	draw_time, 72, 0, 0x0700, eax
    49 000000C2 48E82D0500006683C4-
    49 000000CB 10                 
    50                                  
    51 000000CC 68[10010000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
    51 000000D2 [C4080000]E8010800-
    51 000000DA 006683C408         
    52 000000DF 83F800                  	cmp	eax, 0
    53 000000E2 74D0                    	je	.10L
    54                                  
    55 000000E4 68[C4080000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
    55 000000EC 02E8460800006683C4-
    55 000000F5 0C                 
    56                                  
    57 000000F6 EBBC                    	jmp	.10L
    58                                  
    59 000000F8 EBFE                    	jmp	$
    60                                  	
    61                                  	
    62 000000FA 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    62 00000103 65726E656C212000   
    63 0000010B 2D2D2D2D00              .t0:	db	"----",0
    64 00000110 00000000                .int_key:	dd	0
    65                                  
    66                                  ALIGN	4,	db	0
    67 00000114 00000000                FONT_ADR:	dd	0
    68 00000118 00000000                RTC_TIME:	dd	0
    69                                  
    70                                  
    71                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 0000011C 55                  <1> 	push	ebp
     4 0000011D 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 0000011F 50                  <1> 	push	eax
     7 00000120 52                  <1> 	push	edx
     8                              <1> 
     9 00000121 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 00000124 80E403              <1> 	and	ah, 0x03
    11 00000127 B004                <1> 	mov	al, 0x04	; read map
    12 00000129 66BACE03            <1> 	mov	dx, 0x03CE
    13 0000012D 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 0000012F 5A                  <1> 	pop	edx
    16 00000130 58                  <1> 	pop	eax
    17                              <1> 
    18 00000131 89EC                <1> 	mov	esp,ebp
    19 00000133 5D                  <1> 	pop	ebp
    20                              <1> 
    21 00000134 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 00000135 55                  <1> 	push	ebp
    25 00000136 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 00000138 50                  <1> 	push	eax
    28 00000139 52                  <1> 	push	edx
    29                              <1> 
    30 0000013A 8A6508              <1> 	mov	ah, [ebp + 8]
    31 0000013D 80E40F              <1> 	and	ah, 0x0F
    32 00000140 B002                <1> 	mov	al, 0x02		; write select
    33 00000142 66BAC403            <1> 	mov	dx, 0x03C4
    34 00000146 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 00000148 5A                  <1> 	pop	edx
    37 00000149 58                  <1> 	pop	eax
    38                              <1> 
    39 0000014A 89EC                <1> 	mov	esp, ebp
    40 0000014C 5D                  <1> 	pop	ebp
    41                              <1> 
    42 0000014D C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 0000014E 55                  <1> 	push	ebp
    51 0000014F 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 00000151 50                  <1> 	push	eax
    54 00000152 53                  <1> 	push	ebx
    55 00000153 51                  <1> 	push	ecx
    56 00000154 52                  <1> 	push	edx
    57 00000155 56                  <1> 	push	esi
    58 00000156 57                  <1> 	push	edi
    59                              <1> 
    60 00000157 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 0000015A 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 0000015D 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 00000161 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 00000165 84C7                <1> 	test	bh, al			; BACK
    67 00000167 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 0000016A FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 0000016C 84C3                <1> 	test	bl, al			; FORWARD
    71 0000016E 0F94C2              <1> 	setz	dl
    72 00000171 FECA                <1> 	dec	dl
    73                              <1> 
    74 00000173 FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 00000174 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 00000179 AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 0000017A 88C4                <1> 	mov	ah, al			; AL is font data
    80 0000017C F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 0000017E 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 00000180 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 00000186 7404                <1> 	jz	.11F
    86 00000188 2227                <1> 	and	ah, [edi]
    87 0000018A EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 0000018C 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 0000018E 08E0                <1> 	or	al,ah
    92 00000190 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 00000192 83C750              <1> 	add	edi,80			; next
    95 00000195 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 00000197 5F                  <1> 	pop	edi
    99 00000198 5E                  <1> 	pop	esi
   100 00000199 5A                  <1> 	pop	edx
   101 0000019A 59                  <1> 	pop	ecx
   102 0000019B 5B                  <1> 	pop	ebx
   103 0000019C 58                  <1> 	pop	eax
   104                              <1> 
   105 0000019D 89EC                <1> 	mov	esp, ebp
   106 0000019F 5D                  <1> 	pop	ebp
   107                              <1> 
   108 000001A0 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 000001A1 55                  <1> 	push	ebp
   113 000001A2 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 000001A4 57                  <1> 	push	edi
   116 000001A5 50                  <1> 	push	eax
   117 000001A6 53                  <1> 	push	ebx
   118                              <1> 
   119 000001A7 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 000001AA 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 000001AE 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 000001B2 84C3                <1> 	test	bl, al
   124 000001B4 0F94C3              <1> 	setz	bl
   125 000001B7 FECB                <1> 	dec	bl
   126                              <1> 
   127 000001B9 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 000001BC 88C4                <1> 	mov	ah, al
   129 000001BE F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 000001C0 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 000001C2 20D8                <1> 	and	al, bl
   134 000001C4 08E0                <1> 	or	al, ah
   135 000001C6 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 000001C8 5B                  <1> 	pop	ebx
   138 000001C9 58                  <1> 	pop	eax
   139 000001CA 5F                  <1> 	pop	edi
   140                              <1> 
   141 000001CB 89EC                <1> 	mov	esp, ebp
   142 000001CD 5D                  <1> 	pop	ebp
   143                              <1> 
   144 000001CE C3                  <1> 	ret
   145                              <1> 
    72                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 000001CF 55                  <1> 	push	ebp
     4 000001D0 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000001D2 56                  <1> 	push	esi
     7 000001D3 57                  <1> 	push	edi
     8 000001D4 50                  <1> 	push	eax
     9 000001D5 53                  <1> 	push	ebx
    10 000001D6 51                  <1> 	push	ecx
    11 000001D7 52                  <1> 	push	edx
    12                              <1> 
    13 000001D8 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 000001DC C1E604              <1> 	shl	esi, 4
    15 000001DF 0335[14010000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 000001E5 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 000001E8 C1E708              <1> 	shl	edi, 8
    19 000001EB 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 000001F2 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 000001F5 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 000001F9 6A03E81CFFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 00000202 C404                <1>
    25 00000204 6A08E82AFFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 0000020D C404                <1>
    26 0000020F 536A085756E835FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 00000218 FF6683C410          <1>
    27                              <1> 
    28 0000021D 6A02E8F8FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 00000226 C404                <1>
    29 00000228 6A04E806FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 00000231 C404                <1>
    30 00000233 536A045756E811FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 0000023C FF6683C410          <1>
    31                              <1> 
    32 00000241 6A01E8D4FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 0000024A C404                <1>
    33 0000024C 6A02E8E2FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 00000255 C404                <1>
    34 00000257 536A025756E8EDFEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 00000260 FF6683C410          <1>
    35                              <1> 	
    36 00000265 6A00E8B0FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 0000026E C404                <1>
    37 00000270 6A01E8BEFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 00000279 C404                <1>
    38 0000027B 536A015756E8C9FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 00000284 FF6683C410          <1>
    39                              <1> 
    40 00000289 5A                  <1> 	pop	edx
    41 0000028A 59                  <1> 	pop	ecx
    42 0000028B 5B                  <1> 	pop	ebx
    43 0000028C 58                  <1> 	pop	eax
    44 0000028D 5F                  <1> 	pop	edi
    45 0000028E 5E                  <1> 	pop	esi
    46                              <1> 
    47 0000028F 89EC                <1> 	mov	esp, ebp
    48 00000291 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000292 C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
    73                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 00000293 55                  <1> 	push	ebp
     3 00000294 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000296 50                  <1> 	push	eax
     6 00000297 53                  <1> 	push	ebx
     7 00000298 51                  <1> 	push	ecx
     8                              <1> 
     9 00000299 B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 0000029E 81F900010000        <1> 	cmp	ecx,256
    12 000002A4 7321                <1> 	jae	.10E
    13                              <1> 
    14 000002A6 89C8                <1> 	mov	eax, ecx
    15 000002A8 83E00F              <1> 	and	eax, 0b00001111
    16 000002AB 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 000002AE 89CB                <1> 	mov	ebx, ecx
    19 000002B0 C1EB04              <1> 	shr	ebx, 4
    20 000002B3 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 000002B6 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 000002BF FF6683C410          <1>
    23                              <1> 	
    24 000002C4 41                  <1> 	inc	ecx
    25 000002C5 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 000002C7 59                  <1> 	pop	ecx
    30 000002C8 5B                  <1> 	pop	ebx
    31 000002C9 58                  <1> 	pop	eax
    32                              <1> 
    33 000002CA 89EC                <1> 	mov	esp, ebp
    34 000002CC 5D                  <1> 	pop	ebp
    35                              <1> 
    36 000002CD C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
    74                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 000002CE 55                  <1> 	push	ebp
     3 000002CF 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 000002D1 50                  <1> 	push	eax
     6 000002D2 53                  <1> 	push	ebx
     7 000002D3 51                  <1> 	push	ecx
     8 000002D4 52                  <1> 	push	edx
     9 000002D5 56                  <1> 	push	esi
    10                              <1> 
    11 000002D6 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 000002D9 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 000002DC 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 000002E0 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 000002E3 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 000002E4 AC                  <1> 	lodsb
    20 000002E5 3C00                <1> 	cmp	al, 0
    21 000002E7 7425                <1> 	je	.10E
    22 000002E9 50525153E8DDFEFFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    22 000002F2 6683C410            <1>
    23 000002F6 43                  <1> 	inc	ebx
    24 000002F7 83FB50              <1> 	cmp	ebx, 80
    25 000002FA 7CE8                <1> 	jl	.10L
    26 000002FC BB00000000          <1> 	mov	ebx, 0
    27 00000301 41                  <1> 	inc	ecx
    28 00000302 83F91E              <1> 	cmp	ecx, 30
    29 00000305 7CDD                <1> 	jl	.10L
    30 00000307 B900000000          <1> 	mov	ecx, 0
    31                              <1> 	
    32 0000030C EBD6                <1> 	jmp	.10L
    33                              <1> .10E:
    34                              <1> 
    35 0000030E 5E                  <1> 	pop	esi
    36 0000030F 5A                  <1> 	pop	edx
    37 00000310 59                  <1> 	pop	ecx
    38 00000311 5B                  <1> 	pop	ebx
    39 00000312 58                  <1> 	pop	eax
    40                              <1> 
    41 00000313 89EC                <1> 	mov	esp, ebp
    42 00000315 5D                  <1> 	pop	ebp
    43                              <1> 
    44 00000316 C3                  <1> 	ret
    75                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 00000317 55                  <1> 	push	ebp
     3 00000318 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000031A 56                  <1> 	push	esi
     6 0000031B 57                  <1> 	push	edi
     7 0000031C 50                  <1> 	push	eax
     8 0000031D 53                  <1> 	push	ebx
     9 0000031E 51                  <1> 	push	ecx
    10 0000031F 52                  <1> 	push	edx
    11                              <1> 
    12 00000320 8B7508              <1> 	mov	esi, [ebp + 8]
    13 00000323 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 00000326 B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 0000032B 83F910              <1> 	cmp	ecx, 16
    18 0000032E 732E                <1> 	jae	.10E
    19                              <1> 
    20 00000330 89C8                <1> 	mov	eax, ecx
    21 00000332 83E001              <1> 	and	eax, 0x01	; % 2
    22 00000335 C1E003              <1> 	shl	eax, 3		; *= 8
    23 00000338 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 0000033A 89CB                <1> 	mov	ebx, ecx
    26 0000033C D1EB                <1> 	shr	ebx, 1		; / 2
    27 0000033E 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 00000340 89CA                <1> 	mov	edx, ecx
    32 00000342 D1E2                <1> 	shl	edx, 1
    33 00000344 8B92[71030000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 0000034A 68[68030000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 00000352 E877FFFFFF6683C410  <1>
    36                              <1> 
    37 0000035B 41                  <1> 	inc	ecx
    38 0000035C EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 0000035E 52                  <1> 	push	edx	
    42 0000035F 51                  <1> 	push	ecx	
    43 00000360 53                  <1> 	push	ebx	
    44 00000361 50                  <1> 	push	eax	
    45 00000362 57                  <1> 	push	edi	
    46 00000363 56                  <1> 	push	esi	
    47                              <1> 
    48 00000364 89EC                <1> 	mov	esp, ebp
    49 00000366 5D                  <1> 	pop	ebp
    50                              <1> 
    51 00000367 C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 00000368 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 00000371 00000008            <1> .t0:	dw 0x0000,0x0800
    57 00000375 00010009            <1> 	dw 0x0100,0x0900
    58 00000379 0002000A            <1> 	dw 0x0200,0x0A00
    59 0000037D 0003000B            <1> 	dw 0x0300,0x0B00
    60 00000381 0004000C            <1> 	dw 0x0400,0x0C00
    61 00000385 0005000D            <1> 	dw 0x0500,0x0D00
    62 00000389 0006000E            <1> 	dw 0x0600,0x0E00
    63 0000038D 0007000F            <1> 	dw 0x0700,0x0F00
    76                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 00000391 55                  <1> 	push	ebp
     4 00000392 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000394 57                  <1> 	push	edi
     7 00000395 53                  <1> 	push	ebx
     8 00000396 51                  <1> 	push	ecx
     9                              <1> 
    10 00000397 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 0000039A C1E704              <1> 	shl	edi, 4
    12 0000039D 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 000003A4 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 000003A7 89D9                <1> 	mov	ecx, ebx
    16 000003A9 C1EB03              <1> 	shr	ebx, 3
    17 000003AC 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 000003AE 83E107              <1> 	and	ecx, 0x07
    20 000003B1 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 000003B6 D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 000003B8 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 000003BB 6A03E85AFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 000003C4 C404                <1>
    28 000003C6 6A08E868FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 000003CF C404                <1>
    29 000003D1 516A085753E8C6FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 000003DA FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 000003DF 6A02E836FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 000003E8 C404                <1>
    34 000003EA 6A04E844FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 000003F3 C404                <1>
    35 000003F5 516A045753E8A2FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 000003FE FF6683C410          <1>
    36                              <1> 	
    37 00000403 6A01E812FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 0000040C C404                <1>
    38 0000040E 6A02E820FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 00000417 C404                <1>
    39 00000419 516A025753E87EFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 00000422 FF6683C410          <1>
    40                              <1> 	
    41 00000427 6A00E8EEFCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 00000430 C404                <1>
    42 00000432 6A01E8FCFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 0000043B C404                <1>
    43 0000043D 516A015753E85AFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 00000446 FF6683C410          <1>
    44                              <1> 
    45 0000044B 59                  <1> 	pop	ecx
    46 0000044C 5B                  <1> 	pop	ebx
    47 0000044D 5F                  <1> 	pop	edi
    48                              <1> 
    49 0000044E 89EC                <1> 	mov	esp, ebp
    50 00000450 5D                  <1> 	pop	ebp
    51                              <1> 
    52 00000451 C3                  <1> 	ret
    53                              <1> 
    77                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 00000452 55                  <1> 	push	ebp
     3 00000453 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000455 6A00                <1> 	push	dword 0	; SUM: - 4
     6 00000457 6A00                <1> 	push	dword 0	; x0 : - 8
     7 00000459 6A00                <1> 	push	dword 0	; wid: -12
     8 0000045B 6A00                <1> 	push	dword 0	; inx: -16
     9 0000045D 6A00                <1> 	push	dword 0	; y0 : -20
    10 0000045F 6A00                <1> 	push	dword 0	; hei: -24
    11 00000461 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 00000463 50                  <1> 	push	eax
    14 00000464 53                  <1> 	push	ebx
    15 00000465 51                  <1> 	push	ecx
    16 00000466 52                  <1> 	push	edx
    17 00000467 56                  <1> 	push	esi
    18 00000468 57                  <1> 	push	edi
    19                              <1> 
    20 00000469 8B4508              <1> 	mov	eax, [ebp + 8]
    21 0000046C 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 0000046F 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 00000471 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 00000473 F7DB                <1> 	neg	ebx
    26 00000475 BEFFFFFFFF          <1> 	mov	esi, -1
    27 0000047A EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 0000047C BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 00000481 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 00000484 8B5514              <1> 	mov	edx, [ebp +20]
    34 00000487 29CA                <1> 	sub	edx, ecx
    35 00000489 7D09                <1> 	jge	.20F
    36                              <1> 
    37 0000048B F7DA                <1> 	neg	edx
    38 0000048D BFFFFFFFFF          <1> 	mov	edi, -1
    39 00000492 EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 00000494 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 00000499 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 0000049C 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 0000049F 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 000004A2 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 000004A5 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 000004A8 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 000004AB 39D3                <1> 	cmp	ebx, edx
    53 000004AD 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 000004AF 8D75EC              <1> 	lea	esi, [ebp -20]
    56 000004B2 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 000004B5 EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 000004B7 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 000004BA 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 000004BD 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 000004C0 83F900              <1> 	cmp	ecx, 0
    67 000004C3 7505                <1> 	jnz	.30E
    68 000004C5 B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75 000004CA FF7518FF75ECFF75F8- <1>         cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    75 000004D3 E8B9FEFFFF6683C40C  <1>
    76                              <1> 	
    77                              <1> 	; update coordinate
    78 000004DC 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    79 000004DF 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    80                              <1> 
    81 000004E1 8B45FC              <1> 	mov	eax, [ebp - 4]
    82 000004E4 0347FC              <1> 	add	eax, [edi - 4]
    83 000004E7 8B5EFC              <1> 	mov	ebx, [esi - 4]
    84                              <1> 
    85 000004EA 39D8                <1> 	cmp	eax, ebx
    86 000004EC 7C07                <1> 	jl	.52E
    87 000004EE 29D8                <1> 	sub	eax, ebx	; sum -= wid
    88                              <1> 	; sum can only add -1 or 1
    89                              <1> 	; so. not be  "dif * 2 < sum" 
    90                              <1> 
    91 000004F0 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
    92 000004F3 011F                <1> 	add	[edi - 0], ebx
    93                              <1> .52E:
    94 000004F5 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
    95                              <1> 
    96 000004F8 E2D0                <1> 	loop	.50L
    97                              <1> .50E:
    98                              <1> 
    99                              <1> 
   100 000004FA 5F                  <1> 	pop	edi
   101 000004FB 5E                  <1> 	pop	esi
   102 000004FC 5A                  <1> 	pop	edx
   103 000004FD 59                  <1> 	pop	ecx
   104 000004FE 5B                  <1> 	pop	ebx
   105 000004FF 58                  <1> 	pop	eax
   106                              <1> 
   107 00000500 89EC                <1> 	mov	esp, ebp
   108 00000502 5D                  <1> 	pop	ebp
   109                              <1> 
   110 00000503 C3                  <1> 	ret
   111                              <1> 
   112                              <1> 
    78                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 00000504 55                  <1> 	push	ebp
     3 00000505 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000507 50                  <1> 	push	eax
     6 00000508 53                  <1> 	push	ebx
     7 00000509 51                  <1> 	push	ecx
     8 0000050A 52                  <1> 	push	edx
     9 0000050B 56                  <1> 	push	esi
    10                              <1> 
    11 0000050C 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 0000050F 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 00000512 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 00000515 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 00000518 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 0000051B 39C8                <1> 	cmp	eax, ecx
    21 0000051D 7C01                <1> 	jl	.10E		; OK
    22 0000051F 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 00000520 39D3                <1> 	cmp	ebx, edx
    25 00000522 7C02                <1> 	jl	.20E		; OK
    26 00000524 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 00000526 5653515350E822FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 0000052F FF6683C414          <1>
    36 00000534 5652505350E814FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 0000053D FF6683C414          <1>
    37                              <1> 
    38 00000542 4A                  <1> 	dec	edx
    39 00000543 5652515250E805FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 0000054C FF6683C414          <1>
    40 00000551 42                  <1> 	inc	edx
    41                              <1> 
    42 00000552 49                  <1> 	dec	ecx
    43 00000553 5652515351E8F5FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 0000055C FF6683C414          <1>
    44                              <1> 
    45 00000561 5E                  <1> 	pop	esi
    46 00000562 5A                  <1> 	pop	edx
    47 00000563 59                  <1> 	pop	ecx
    48 00000564 5B                  <1> 	pop	ebx
    49 00000565 58                  <1> 	pop	eax
    50                              <1> 
    51 00000566 89EC                <1> 	mov	esp, ebp
    52 00000568 5D                  <1> 	pop	ebp
    53                              <1> 
    54 00000569 C3                  <1> 	ret
    55                              <1> 
    79                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 0000056A 55                  <1> 	push 	ebp
     3 0000056B 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000056D 50                  <1> 	push	eax
     6 0000056E 53                  <1> 	push	ebx
     7 0000056F 51                  <1> 	push	ecx
     8 00000570 52                  <1> 	push	edx
     9 00000571 56                  <1> 	push	esi
    10 00000572 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 00000573 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 00000577 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 0000057A 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 0000057D 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 0000057F B020                <1> 	mov	al,' '
    27 00000581 F7C304000000        <1> 	test	ebx, 0b0100
    28 00000587 7402                <1> 	je	.42E
    29 00000589 B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 0000058B FC                  <1> 	cld
    32 0000058C F3AA                <1> 	rep	stosb
    33                              <1> 
    34 0000058E 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 00000591 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 00000594 89F7                <1> 	mov	edi, esi
    37 00000596 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 00000598 4F                  <1> 	dec	edi
    39                              <1> 
    40 00000599 F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 0000059F 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 000005A1 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 000005A4 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 000005A6 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 000005A9 F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 000005AF 7410                <1> .20Q:	je	.20E		; not print sign
    51 000005B1 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 000005B4 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 000005B6 F7D8                <1> 	neg	eax		; ax *= -1
    54 000005B8 C6062D              <1> 	mov	[esi], byte '-'
    55 000005BB EB03                <1> 	jmp	.22E
    56 000005BD C6062B              <1> .22F:	mov	[esi], byte '+'
    57 000005C0 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 000005C1 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 000005C4 BA00000000          <1> 	mov	edx, 0
    64 000005C9 F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 000005CB 89D6                <1> 	mov	esi, edx
    68 000005CD 8A96[E5050000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 000005D3 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 000005D5 4F                  <1> 	dec	edi
    72                              <1> 
    73 000005D6 83F800              <1> 	cmp	eax,0
    74 000005D9 E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 000005DB 5F                  <1> 	pop	edi
    79 000005DC 5E                  <1> 	pop	esi
    80 000005DD 5A                  <1> 	pop	edx
    81 000005DE 59                  <1> 	pop	ecx
    82 000005DF 5B                  <1> 	pop	ebx
    83 000005E0 58                  <1> 	pop	eax
    84                              <1> 
    85 000005E1 89EC                <1> 	mov	esp, ebp
    86 000005E3 5D                  <1> 	pop	ebp
    87                              <1> 
    88 000005E4 C3                  <1> 	ret
    89                              <1> 
    90 000005E5 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 000005EE 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
    80                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 000005F5 55                  <1> 	push	ebp
     3 000005F6 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000005F8 50                  <1> 	push	eax
     6 000005F9 53                  <1> 	push	ebx
     7                              <1> 
     8 000005FA 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 000005FD 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 00000600 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 00000607 [67060000]53E859FF- <1>
    10 0000060F FFFF6683C414        <1>
    11                              <1> 
    12 00000615 88E3                <1> 	mov	bl, ah
    13 00000617 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 0000061E [64060000]53E842FF- <1>
    13 00000626 FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 0000062C C1E810              <1> 	shr	eax, 16
    17 0000062F 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 00000636 [61060000]50E82AFF- <1>
    17 0000063E FFFF6683C414        <1>
    18                              <1> 
    19 00000644 68[61060000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 0000064C FF750CFF7508E877FC- <1>
    19 00000655 FFFF6683C410        <1>
    20                              <1> 
    21 0000065B 5B                  <1> 	pop	ebx
    22 0000065C 58                  <1> 	pop	eax
    23                              <1> 
    24 0000065D 89EC                <1> 	mov	esp, ebp
    25 0000065F 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000660 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 00000661 5A5A3A              <1> .hour:	db	"ZZ:"
    31 00000664 5A5A3A              <1> .min:	db	"ZZ:"
    32 00000667 5A5A00              <1> .sec:	db	"ZZ", 0
    81                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 0000066A 55                  <1> 	push	ebp
     3 0000066B 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000066D 53                  <1> 	push	ebx
     6                              <1> 
     7 0000066E B00A                <1> 	mov	al, 0x0A
     8 00000670 E670                <1> 	out	0x70, al
     9 00000672 E471                <1> 	in	al, 0x71
    10                              <1> 
    11 00000674 A880                <1> 	test	al, 0x80
    12 00000676 7407                <1> 	je	.10F
    13 00000678 B801000000          <1> 	mov	eax, 1		; data updating. error
    14 0000067D EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 0000067F B004                <1> 	mov	al, 0x04	; Hour
    17 00000681 E670                <1> 	out	0x70, al
    18 00000683 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 00000685 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 00000688 B002                <1> 	mov	al, 0x02
    23 0000068A E670                <1> 	out	0x70, al
    24 0000068C E471                <1> 	in	al, 0x71
    25                              <1> 
    26 0000068E C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 00000691 B000                <1> 	mov	al, 0x00
    29 00000693 E670                <1> 	out	0x70, al
    30 00000695 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 00000697 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 0000069C 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 0000069F 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 000006A1 B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 000006A6 5B                  <1> 	pop	ebx
    45                              <1> 
    46 000006A7 89EC                <1> 	mov	esp, ebp
    47 000006A9 5D                  <1> 	pop	ebp
    48                              <1> 
    49 000006AA C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
    82                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 000006AB 60                  <1> 	pusha		; all registers in stack
     3 000006AC 1E                  <1> 	push	ds
     4 000006AD 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 000006AE 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 000006B2 8ED8                <1> 	mov	ds, ax
     9 000006B4 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 000006B6 68[18010000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 000006BE FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 000006C4 B00C                <2>  mov al, %2
    13 000006C6 E670                <2>  out %1, al
    14 000006C8 E471                <1> 	in	al, 0x71
    15                              <1> 
    16 000006CA B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 000006CC E620                <1> 	out	0x20, al
    18 000006CE E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 000006D0 07                  <1> 	pop	es
    21 000006D1 1F                  <1> 	pop	ds
    22 000006D2 61                  <1> 	popa
    23                              <1> 
    24 000006D3 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 000006D4 55                  <1> 	push	ebp
    28 000006D5 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 000006D7 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 000006D8 B00B                <2>  mov al, %2
    32 000006DA E670                <2>  out %1, al
    33                              <1> 
    34 000006DC E471                <1> 	in	al, 0x71
    35 000006DE 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 000006E1 E671                <1> 	out	0x71, al
    38                              <1> 
    39 000006E3 58                  <1> 	pop	eax
    40                              <1> 
    41 000006E4 89EC                <1> 	mov	esp, ebp
    42 000006E6 5D                  <1> 	pop	ebp
    43                              <1> 
    44 000006E7 C3                  <1> 	ret
    45                              <1> 
    83                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 000006E8 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 000006E9 B011                <2>  mov al, %2
     6 000006EB E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 000006ED B020                <2>  mov al, %2
     7 000006EF E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 000006F1 B004                <2>  mov al, %2
     8 000006F3 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 000006F5 B005                <2>  mov al, %2
     9 000006F7 E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 000006F9 B0FF                <2>  mov al, %2
    10 000006FB E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 000006FD B011                <2>  mov al, %2
    12 000006FF E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 00000701 B028                <2>  mov al, %2
    13 00000703 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 00000705 B002                <2>  mov al, %2
    14 00000707 E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 00000709 B001                <2>  mov al, %2
    15 0000070B E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 0000070D B0FF                <2>  mov al, %2
    16 0000070F E6A1                <2>  out %1, al
    17                              <1> 
    18 00000711 58                  <1> 	pop	eax
    19                              <1> 
    20 00000712 C3                  <1> 	ret
    84                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 00000713 FB                  <1> 	sti
     3                              <1> 
     4 00000714 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 0000071D 19E8ABFBFFFF6683C4- <1>
     4 00000726 10                  <1>
     5                              <1> 
     6 00000727 8B0424              <1> 	mov	eax, [esp + 0]
     7 0000072A 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 00000731 [EF070000]50E82FFE- <1>
     7 00000739 FFFF6683C414        <1>
     8                              <1> 	
     9 0000073F 8B442404            <1> 	mov	eax, [esp + 4]
    10 00000743 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 0000074A [00080000]50E816FE- <1>
    10 00000752 FFFF6683C414        <1>
    11                              <1> 	
    12 00000758 8B442408            <1> 	mov	eax, [esp + 8]
    13 0000075C 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 00000763 [11080000]50E8FDFD- <1>
    13 0000076B FFFF6683C414        <1>
    14                              <1> 	
    15 00000771 8B44240C            <1> 	mov	eax, [esp +12]
    16 00000775 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 0000077C [22080000]50E8E4FD- <1>
    16 00000784 FFFF6683C414        <1>
    17                              <1> 
    18 0000078A 68[E8070000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 00000792 00006A106A19E831FB- <1>
    18 0000079B FFFF6683C410        <1>
    19 000007A1 68[F9070000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 000007A9 00006A116A19E81AFB- <1>
    19 000007B2 FFFF6683C410        <1>
    20 000007B8 68[0A080000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 000007C0 00006A126A19E803FB- <1>
    20 000007C9 FFFF6683C410        <1>
    21 000007CF 68[1B080000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 000007D7 00006A136A19E8ECFA- <1>
    21 000007E0 FFFF6683C410        <1>
    22                              <1> 
    23 000007E6 EBFE                <1> 	jmp	$
    24                              <1> 
    25 000007E8 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 000007EF 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 000007F8 00                  <1>
    27 000007F9 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 00000800 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 00000809 00                  <1>
    29 0000080A 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 00000811 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 0000081A 00                  <1>
    31 0000081B 2020202B31323A      <1> .s4:	db	"   +12:"
    32 00000822 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 0000082B 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 0000082C 9C                  <1> 	pushf
    37 0000082D 0E                  <1> 	push	cs
    38 0000082E 68[13070000]        <1> 	push	int_stop
    39                              <1> 
    40 00000833 B8[39080000]        <1> 	mov	eax, .s0
    41 00000838 CF                  <1> 	iret
    42                              <1> 
    43 00000839 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 00000842 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 0000084A 55                  <1> 	push	ebp
    47 0000084B 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 0000084D 50                  <1> 	push	eax
    50 0000084E 53                  <1> 	push	ebx
    51 0000084F 51                  <1> 	push	ecx
    52 00000850 57                  <1> 	push	edi
    53                              <1> 
    54 00000851 8D05[2C080000]      <1> 	lea	eax, [int_default]
    55 00000857 BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 0000085C 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 0000085E B900010000          <1> 	mov	ecx, 256
    65 00000863 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 00000868 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 0000086A 894704              <1> 	mov	[edi + 4], eax	; top
    69 0000086D 83C708              <1> 	add	edi, 8
    70 00000870 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 00000872 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 00000879 5F                  <1> 	pop	edi
    75 0000087A 59                  <1> 	pop	ecx
    76 0000087B 5B                  <1> 	pop	ebx
    77 0000087C 58                  <1> 	pop	eax
    78                              <1> 
    79 0000087D 89EC                <1> 	mov	esp, ebp
    80 0000087F 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00000880 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 00000881 9C                  <1> 	pushf
    86 00000882 0E                  <1> 	push	cs
    87 00000883 68[13070000]        <1> 	push	int_stop
    88                              <1> 
    89 00000888 B8[8E080000]        <1> 	mov	eax, .s0
    90 0000088D CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 0000088E 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 00000897 44495620203E2000    <1>
    85                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 0000089F 60                  <1> 	pusha
     3 000008A0 1E                  <1> 	push	ds
     4 000008A1 06                  <1> 	push	es
     5                              <1> 
     6 000008A2 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 000008A6 8ED8                <1> 	mov	ds, ax
     8 000008A8 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 000008AA E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 000008AC 5068[C4080000]E855- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 000008B4 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 000008BB B020                <2>  mov al, %2
    16 000008BD E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 000008BF 07                  <1> 	pop	es
    20 000008C0 1F                  <1> 	pop	ds
    21 000008C1 61                  <1> 	popa
    22                              <1> 
    23 000008C2 CF                  <1> 	iret
    24                              <1> 
    25 000008C3 00                  <1> ALIGN	4,	db	0
    26 000008C4 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
    86                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
    87                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 000008DC 55                  <1> 	push	ebp
     4 000008DD 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 000008DF 56                  <1> 	push	esi
     7 000008E0 57                  <1> 	push	edi
     8 000008E1 53                  <1> 	push	ebx
     9                              <1> 
    10 000008E2 8B7508              <1> 	mov	esi, [ebp + 8]
    11 000008E5 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 000008E8 B800000000          <1> 	mov	eax, 0
    14 000008ED 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 000008EF 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 000008F2 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 000008F4 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 000008F8 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 000008FA 43                  <1> 	inc	ebx
    23 000008FB 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 000008FE 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 00000900 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 00000905 5B                  <1> 	pop	ebx
    30 00000906 5F                  <1> 	pop	edi
    31 00000907 5E                  <1> 	pop	esi
    32                              <1> 
    33 00000908 89EC                <1> 	mov	esp, ebp
    34 0000090A 5D                  <1> 	pop	ebp
    35                              <1> 
    36 0000090B C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 0000090C 55                  <1> 	push	ebp
    40 0000090D 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 0000090F 56                  <1> 	push	esi
    43 00000910 53                  <1> 	push	ebx
    44 00000911 51                  <1> 	push	ecx
    45                              <1> 
    46 00000912 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 00000915 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 00000918 89D9                <1> 	mov	ecx, ebx
    50 0000091A 41                  <1> 	inc	ecx
    51 0000091B 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 0000091E 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 00000920 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 00000922 8A450C              <1> 	mov	al, [ebp +12]
    60 00000925 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 00000929 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 0000092C B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 00000931 59                  <1> 	pop	ecx
    66 00000932 5B                  <1> 	pop	ebx
    67 00000933 5E                  <1> 	pop	esi
    68                              <1> 
    69 00000934 89EC                <1> 	mov	esp, ebp
    70 00000936 5D                  <1> 	pop	ebp
    71                              <1> 
    72 00000937 C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 00000938 55                  <1> 	push	ebp
    77 00000939 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 0000093B 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 0000093C 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 0000093F 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 00000942 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 00000945 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 00000948 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 0000094B B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 00000950 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 00000951 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 00000954 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 00000957 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 0000095E [88090000]50E802FC- <1>
    95 00000966 FFFF6683C414        <1>
    96 0000096C 68[88090000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000974 52E854F9FFFF6683C4- <1>
    96 0000097D 10                  <1>
    97                              <1> 
    98 0000097E 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000981 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000983 61                  <1> 	popa
   104                              <1> 
   105 00000984 89EC                <1> 	mov	esp, ebp
   106 00000986 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000987 C3                  <1> 	ret
   109                              <1> 
   110 00000988 2D2D00              <1> .tmp:	db	"--",0
    88                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
    89                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
    90                                  
    91 0000098B 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
