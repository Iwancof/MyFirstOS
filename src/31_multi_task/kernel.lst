     1                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD		equ	0x7c00
     2                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     3                              <1> 
     4                              <1> BOOT_SIZE		equ	(1024 * 8)
     5                              <1> SECT_SIZE		equ	(512)
     6                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
     7                              <1> 
     8                              <1> E820_RECORD_SIZE	equ	20
     9                              <1> 
    10                              <1> KERNEL_LOAD		equ	0x0010_1000
    11                              <1> KERNEL_SIZE		equ	(1024 * 8)
    12                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> VECT_BASE		equ	0x0010_0000
    15                              <1> 
    16                              <1> %define			RING_ITEM_SIZE	(1 << 4)
    17                              <1> %define			RING_INDEX_MASK	(RING_ITEM_SIZE - 1)
    18                              <1> 
    19                              <1> struc			ring_buff		; for keyboard
    20 00000000 <res 00000004>      <1> 				.rp	resd	1
    21 00000004 <res 00000004>      <1> 				.wp	resd	1
    22 00000008 <res 00000010>      <1> 				.item	resb	RING_ITEM_SIZE
    23                              <1> endstruc
    24                              <1> ;struc ring_buff
    25                              <1> ;    .rp resd 1                  ; RP:書き込み位置
    26                              <1> ;    .wp resd 1                  ; WP:読み込み位置
    27                              <1> ;    .item resb RING_ITEM_SIZE   ; バッファ
    28                              <1> ;endstruc
    29                              <1> 
    30                              <1> STACK_BASE		equ	0x0010_3000
    31                              <1> STACK_SIZE		equ	1024
    32                              <1> 
    33                              <1> SP_TASK_0		equ	STACK_BASE + (STACK_SIZE * 1)
    34                              <1> SP_TASK_1		equ	STACK_BASE + (STACK_SIZE * 2)
     2                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     3                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     4                                  %include	"../include/set_vect.s"
     1                              <1> %macro	set_vect 1-*.nolist	; vector_number, function_pointer
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, VECT_BASE + (%1 * 8)	; number converts to address
     6                              <1> 	mov	eax, %2
     7                              <1> 	
     8                              <1> 	%if	%0 == 3
     9                              <1> 		mov	[edi + 4],%3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 0], ax			; bottom
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 6], ax			; tom
    15                              <1> 
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     5                                  %include	"../include/outp.s"
     1                              <1> %macro	outp	2
     2                              <1> 	mov	al, %2
     3                              <1> 	out	%1, al
     4                              <1> %endmacro
     6                                  %include	"../include/set_desc.s"
     1                              <1> %macro	set_desc	2-*
     2                              <1> 	push	eax
     3                              <1> 	push	edi
     4                              <1> 
     5                              <1> 	mov	edi, %1
     6                              <1> 	mov	eax, %2
     7                              <1> 
     8                              <1> 	%if %0 == 3
     9                              <1> 		mov	[edi + 0], %3
    10                              <1> 	%endif
    11                              <1> 
    12                              <1> 	mov	[edi + 2], ax
    13                              <1> 	shr	eax, 16
    14                              <1> 	mov	[edi + 4], al
    15                              <1> 	mov	[edi + 7], ah
    16                              <1> 
    17                              <1> 	pop	edi
    18                              <1> 	pop	eax
    19                              <1> %endmacro
     7                                  ;%include	"../../../../testOS/src/include/macro.s"
     8                                  
     9                                  ORG	KERNEL_LOAD
    10                                  
    11                                  ALIGN	4
    12 00000000 FF07                    IDTR:	dw	8 * 256 - 1	; size
    13 00000002 00001000                	dd	VECT_BASE
    14                                  
    15                                  
    16                                  [BITS 32]
    17                                  
    18                                  
    19                                  kernel:
    20 00000006 FA                      	cli
    21                                  
    22                                  
    23 00000007 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    24 0000000C 0FB706                  	movzx	eax, word [esi + 0]
    25 0000000F 0FB75E02                	movzx	ebx, word [esi + 2]
    26 00000013 C1E004                  	shl	eax, 4
    27 00000016 01D8                    	add	eax, ebx		; Emulate real mode addressing
    28 00000018 A3[B8010000]            	mov	[FONT_ADR], eax
    29                                  	
    30                                  	set_desc	GDT.ldt, LDT, word LDT_LIMIT
    30 0000001D 50                  <1>  push eax
    30 0000001E 57                  <1>  push edi
    30                              <1> 
    30 0000001F BF[E40A0000]        <1>  mov edi, %1
    30 00000024 B8[A40A0000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if %0 == 3
    30 00000029 66C7072700          <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 0000002E 66894702            <1>  mov [edi + 2], ax
    30 00000032 C1E810              <1>  shr eax, 16
    30 00000035 884704              <1>  mov [edi + 4], al
    30 00000038 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000003B 5F                  <1>  pop edi
    30 0000003C 58                  <1>  pop eax
    31                                  	set_desc	GDT.tss_0, TSS_0
    31 0000003D 50                  <1>  push eax
    31 0000003E 57                  <1>  push edi
    31                              <1> 
    31 0000003F BF[EC0A0000]        <1>  mov edi, %1
    31 00000044 B8[020B0000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if %0 == 3
    31                              <1>  mov [edi + 0], %3
    31                              <1>  %endif
    31                              <1> 
    31 00000049 66894702            <1>  mov [edi + 2], ax
    31 0000004D C1E810              <1>  shr eax, 16
    31 00000050 884704              <1>  mov [edi + 4], al
    31 00000053 886707              <1>  mov [edi + 7], ah
    31                              <1> 
    31 00000056 5F                  <1>  pop edi
    31 00000057 58                  <1>  pop eax
    32                                  	set_desc	GDT.tss_1, TSS_1
    32 00000058 50                  <1>  push eax
    32 00000059 57                  <1>  push edi
    32                              <1> 
    32 0000005A BF[F40A0000]        <1>  mov edi, %1
    32 0000005F B8[6A0B0000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if %0 == 3
    32                              <1>  mov [edi + 0], %3
    32                              <1>  %endif
    32                              <1> 
    32 00000064 66894702            <1>  mov [edi + 2], ax
    32 00000068 C1E810              <1>  shr eax, 16
    32 0000006B 884704              <1>  mov [edi + 4], al
    32 0000006E 886707              <1>  mov [edi + 7], ah
    32                              <1> 
    32 00000071 5F                  <1>  pop edi
    32 00000072 58                  <1>  pop eax
    33 00000073 0F0115[FC0A0000]        	lgdt		[GDTR]
    34                                  
    35 0000007A BC00341000              	mov	esp, SP_TASK_0
    36 0000007F 66B82000                	mov	ax, SS_TASK_0	; set tss0
    37 00000083 0F00D8                  	ltr	ax
    38                                  	; say "this process is task 0" to CPU
    39                                  
    40                                  
    41 00000086 E863080000              	cdecl	init_int
    42 0000008B E8FC060000              	cdecl	init_pic
    43                                  
    44 00000090 5057BF00001000B8-       	set_vect	0x00, int_zero_div
    44 00000098 [25090000]668907C1-
    44 000000A0 E810668947065F58   
    45 000000A8 5057BF00011000B8-       	set_vect	0x20, int_timer
    45 000000B0 [2F0A0000]668907C1-
    45 000000B8 E810668947065F58   
    46 000000C0 5057BF08011000B8-       	set_vect	0x21, int_keyboard
    46 000000C8 [43090000]668907C1-
    46 000000D0 E810668947065F58   
    47 000000D8 5057BF40011000B8-       	set_vect	0x28, int_rtc
    47 000000E0 [4F070000]668907C1-
    47 000000E8 E810668947065F58   
    48                                  	
    49 000000F0 6A10E8810600006683-     	cdecl	rtc_int_en, 0x10	; interrupt per udpate
    49 000000F9 C404               
    50 000000FB E850090000              	cdecl	int_en_timer
    51                                  	
    52                                  	outp	0x21, 0b1111_1000	; slave
    52 00000100 B0F8                <1>  mov al, %2
    52 00000102 E621                <1>  out %1, al
    53                                  	outp	0xA1, 0b1111_1110	; rtc
    53 00000104 B0FE                <1>  mov al, %2
    53 00000106 E6A1                <1>  out %1, al
    54                                  	
    55 00000108 FB                      	sti
    56                                  
    57 00000109 6A0D6A3FE825020000-     	cdecl	draw_font, 63, 13
    57 00000112 6683C408           
    58 00000116 6A046A3FE89C020000-     	cdecl	draw_color_bar, 63, 4
    58 0000011F 6683C408           
    59                                  
    60 00000123 68[8C010000]680F01-             cdecl	draw_str, 25, 14, 0x010F, .s0
    60 0000012B 00006A0E6A19E83C02-
    60 00000134 00006683C410       
    61                                  
    62 0000013A 9A40420F002800          	call	SS_TASK_1:1000000
    63                                  
    64                                  .10L:
    65 00000141 A1[BC010000]            	mov	eax, [RTC_TIME]
    66 00000146 5068000700006A006A-     	cdecl	draw_time, 72, 0, 0x0700, eax
    66 0000014F 48E8440500006683C4-
    66 00000158 10                 
    67 00000159 E807090000              	cdecl	draw_rotation_bar
    68                                  
    69 0000015E 68[B3010000]68-         	cdecl	ring_rd, _KEY_BUFF, .int_key
    69 00000164 [68090000]E8130800-
    69 0000016C 006683C408         
    70 00000171 83F800                  	cmp	eax, 0
    71 00000174 74CB                    	je	.10L
    72                                  
    73 00000176 68[68090000]6A1D6A-     	cdecl	draw_key, 2, 29, _KEY_BUFF
    73 0000017E 02E8580800006683C4-
    73 00000187 0C                 
    74                                  
    75                                  
    76 00000188 EBB7                    	jmp	.10L
    77                                  
    78 0000018A EBFE                    	jmp	$
    79                                  	
    80                                  	
    81 0000018C 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    81 00000195 65726E656C212000   
    82 0000019D 2D2D2D2D00              .t0:	db	"----",0
    83 000001A2 2D2D2D2D2D2D2D2D2D-     .t1:	db	"----------------",0
    83 000001AB 2D2D2D2D2D2D2D00   
    84 000001B3 00000000                .int_key:	dd	0
    85                                  
    86 000001B7 00                      ALIGN	4,	db	0
    87 000001B8 00000000                FONT_ADR:	dd	0
    88 000001BC 00000000                RTC_TIME:	dd	0
    89                                  
    90                                  
    91                                  %include	"../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:	; cga_set_read_plane(plane)
     2                              <1> ; this function only selects read plane
     3 000001C0 55                  <1> 	push	ebp
     4 000001C1 89E5                <1> 	mov	ebp, esp
     5                              <1> 	
     6 000001C3 50                  <1> 	push	eax
     7 000001C4 52                  <1> 	push	edx
     8                              <1> 
     9 000001C5 8A6508              <1> 	mov	ah, [ebp + 8]	; 32bit
    10 000001C8 80E403              <1> 	and	ah, 0x03
    11 000001CB B004                <1> 	mov	al, 0x04	; read map
    12 000001CD 66BACE03            <1> 	mov	dx, 0x03CE
    13 000001D1 66EF                <1> 	out	dx, ax
    14                              <1> 
    15 000001D3 5A                  <1> 	pop	edx
    16 000001D4 58                  <1> 	pop	eax
    17                              <1> 
    18 000001D5 89EC                <1> 	mov	esp,ebp
    19 000001D7 5D                  <1> 	pop	ebp
    20                              <1> 
    21 000001D8 C3                  <1> 	ret
    22                              <1> 
    23                              <1> vga_set_write_plane:
    24 000001D9 55                  <1> 	push	ebp
    25 000001DA 89E5                <1> 	mov	ebp, esp
    26                              <1> 
    27 000001DC 50                  <1> 	push	eax
    28 000001DD 52                  <1> 	push	edx
    29                              <1> 
    30 000001DE 8A6508              <1> 	mov	ah, [ebp + 8]
    31 000001E1 80E40F              <1> 	and	ah, 0x0F
    32 000001E4 B002                <1> 	mov	al, 0x02		; write select
    33 000001E6 66BAC403            <1> 	mov	dx, 0x03C4
    34 000001EA 66EF                <1> 	out	dx, ax
    35                              <1> 
    36 000001EC 5A                  <1> 	pop	edx
    37 000001ED 58                  <1> 	pop	eax
    38                              <1> 
    39 000001EE 89EC                <1> 	mov	esp, ebp
    40 000001F0 5D                  <1> 	pop	ebp
    41                              <1> 
    42 000001F1 C3                  <1> 	ret
    43                              <1> 
    44                              <1> vram_font_copy: ; vram_font_copy(font,vram,plane,color)
    45                              <1> ; select plane, and same color
    46                              <1> ; so, this function must be called each plane
    47                              <1> ; COLOR FORMAT
    48                              <1> ; ----IRGB,---TIRGB
    49                              <1> ; BACK_COL,FORD_COL
    50 000001F2 55                  <1> 	push	ebp
    51 000001F3 89E5                <1> 	mov	ebp, esp
    52                              <1> 
    53 000001F5 50                  <1> 	push	eax
    54 000001F6 53                  <1> 	push	ebx
    55 000001F7 51                  <1> 	push	ecx
    56 000001F8 52                  <1> 	push	edx
    57 000001F9 56                  <1> 	push	esi
    58 000001FA 57                  <1> 	push	edi
    59                              <1> 
    60 000001FB 8B7508              <1> 	mov	esi, [ebp + 8]		; font address
    61 000001FE 8B7D0C              <1> 	mov	edi, [ebp +12]		; vram address
    62 00000201 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; abs expand
    63 00000205 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; abs expand. color
    64                              <1> 
    65                              <1> 	; DX is mask value
    66 00000209 84C7                <1> 	test	bh, al			; BACK
    67 0000020B 0F94C6              <1> 	setz	dh			; DH = ZF ? 0x01 : 0x00
    68 0000020E FECE                <1> 	dec	dh			; DH = ZF ? 0x00 : 0xFF
    69                              <1> 
    70 00000210 84C3                <1> 	test	bl, al			; FORWARD
    71 00000212 0F94C2              <1> 	setz	dl
    72 00000215 FECA                <1> 	dec	dl
    73                              <1> 
    74 00000217 FC                  <1> 	cld	; Direction PLUS
    75                              <1> 
    76 00000218 B910000000          <1> 	mov	ecx, 16			; 16 dot
    77                              <1> .10L:
    78 0000021D AC                  <1> 	lodsb				; AX = [ESI],ESI++
    79 0000021E 88C4                <1> 	mov	ah, al			; AL is font data
    80 00000220 F6D4                <1> 	not	ah			; AH is anti font data
    81                              <1> 
    82 00000222 20D0                <1> 	and	al, dl			; FORWARD font data
    83                              <1> 
    84 00000224 F7C310000000        <1> 	test	ebx, 0b00010000		; I bit
    85 0000022A 7404                <1> 	jz	.11F
    86 0000022C 2227                <1> 	and	ah, [edi]
    87 0000022E EB02                <1> 	jmp	.11E
    88                              <1> .11F:
    89 00000230 20F4                <1> 	and	ah, dh			; normal
    90                              <1> .11E:
    91 00000232 08E0                <1> 	or	al,ah
    92 00000234 8807                <1> 	mov	[edi],al
    93                              <1> 
    94 00000236 83C750              <1> 	add	edi,80			; next
    95 00000239 E2E2                <1> 	loop	.10L
    96                              <1> .10E:
    97                              <1> 
    98 0000023B 5F                  <1> 	pop	edi
    99 0000023C 5E                  <1> 	pop	esi
   100 0000023D 5A                  <1> 	pop	edx
   101 0000023E 59                  <1> 	pop	ecx
   102 0000023F 5B                  <1> 	pop	ebx
   103 00000240 58                  <1> 	pop	eax
   104                              <1> 
   105 00000241 89EC                <1> 	mov	esp, ebp
   106 00000243 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000244 C3                  <1> 	ret
   109                              <1> 
   110                              <1> 	
   111                              <1> vram_bit_copy:
   112 00000245 55                  <1> 	push	ebp
   113 00000246 89E5                <1> 	mov	ebp, esp
   114                              <1> 
   115 00000248 57                  <1> 	push	edi
   116 00000249 50                  <1> 	push	eax
   117 0000024A 53                  <1> 	push	ebx
   118                              <1> 
   119 0000024B 8B7D0C              <1> 	mov	edi, [ebp +12]	; vram address
   120 0000024E 0FB64510            <1> 	movzx	eax, byte [ebp +16]	; plane
   121 00000252 0FB75D14            <1> 	movzx	ebx, word [ebp +20]	; color
   122                              <1> 
   123 00000256 84C3                <1> 	test	bl, al
   124 00000258 0F94C3              <1> 	setz	bl
   125 0000025B FECB                <1> 	dec	bl
   126                              <1> 
   127 0000025D 8A4508              <1> 	mov	al, [ebp + 8]	; bit pattern
   128 00000260 88C4                <1> 	mov	ah, al
   129 00000262 F6D4                <1> 	not	ah
   130                              <1> 	; AL = (bit pattern), AH = ~(bit pattern)
   131                              <1> 
   132 00000264 2227                <1> 	and	ah, [edi]	; [edi] is now data
   133 00000266 20D8                <1> 	and	al, bl
   134 00000268 08E0                <1> 	or	al, ah
   135 0000026A 8807                <1> 	mov	[edi], al
   136                              <1> 
   137 0000026C 5B                  <1> 	pop	ebx
   138 0000026D 58                  <1> 	pop	eax
   139 0000026E 5F                  <1> 	pop	edi
   140                              <1> 
   141 0000026F 89EC                <1> 	mov	esp, ebp
   142 00000271 5D                  <1> 	pop	ebp
   143                              <1> 
   144 00000272 C3                  <1> 	ret
   145                              <1> 
    92                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> ; draw_char(row,col,color,ch)
     3 00000273 55                  <1> 	push	ebp
     4 00000274 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000276 56                  <1> 	push	esi
     7 00000277 57                  <1> 	push	edi
     8 00000278 50                  <1> 	push	eax
     9 00000279 53                  <1> 	push	ebx
    10 0000027A 51                  <1> 	push	ecx
    11 0000027B 52                  <1> 	push	edx
    12                              <1> 
    13 0000027C 0FB67514            <1> 	movzx	esi, byte [ebp + 20]	; esi = ch
    14 00000280 C1E604              <1> 	shl	esi, 4
    15 00000283 0335[B8010000]      <1> 	add	esi, [FONT_ADR]
    16                              <1> 
    17 00000289 8B7D0C              <1> 	mov	edi, [ebp +12]
    18 0000028C C1E708              <1> 	shl	edi, 8
    19 0000028F 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    20 00000296 037D08              <1> 	add	edi, [ebp + 8]
    21                              <1> 
    22 00000299 0FB75D10            <1> 	movzx	ebx, word [ebp +16]
    23                              <1> 
    24 0000029D 6A03E81CFFFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    24 000002A6 C404                <1>
    25 000002A8 6A08E82AFFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    25 000002B1 C404                <1>
    26 000002B3 536A085756E835FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x08, ebx
    26 000002BC FF6683C410          <1>
    27                              <1> 
    28 000002C1 6A02E8F8FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    28 000002CA C404                <1>
    29 000002CC 6A04E806FFFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    29 000002D5 C404                <1>
    30 000002D7 536A045756E811FFFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x04, ebx
    30 000002E0 FF6683C410          <1>
    31                              <1> 
    32 000002E5 6A01E8D4FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    32 000002EE C404                <1>
    33 000002F0 6A02E8E2FEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    33 000002F9 C404                <1>
    34 000002FB 536A025756E8EDFEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x02, ebx
    34 00000304 FF6683C410          <1>
    35                              <1> 	
    36 00000309 6A00E8B0FEFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    36 00000312 C404                <1>
    37 00000314 6A01E8BEFEFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    37 0000031D C404                <1>
    38 0000031F 536A015756E8C9FEFF- <1> 	cdecl	vram_font_copy, esi, edi, 0x01, ebx
    38 00000328 FF6683C410          <1>
    39                              <1> 
    40 0000032D 5A                  <1> 	pop	edx
    41 0000032E 59                  <1> 	pop	ecx
    42 0000032F 5B                  <1> 	pop	ebx
    43 00000330 58                  <1> 	pop	eax
    44 00000331 5F                  <1> 	pop	edi
    45 00000332 5E                  <1> 	pop	esi
    46                              <1> 
    47 00000333 89EC                <1> 	mov	esp, ebp
    48 00000335 5D                  <1> 	pop	ebp
    49                              <1> 
    50 00000336 C3                  <1> 	ret
    51                              <1> 
    52                              <1> 	
    93                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2 00000337 55                  <1> 	push	ebp
     3 00000338 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000033A 50                  <1> 	push	eax
     6 0000033B 53                  <1> 	push	ebx
     7 0000033C 51                  <1> 	push	ecx
     8                              <1> 
     9 0000033D B900000000          <1> 	mov	ecx, 0
    10                              <1> .10L:
    11 00000342 81F900010000        <1> 	cmp	ecx,256
    12 00000348 7321                <1> 	jae	.10E
    13                              <1> 
    14 0000034A 89C8                <1> 	mov	eax, ecx
    15 0000034C 83E00F              <1> 	and	eax, 0b00001111
    16 0000034F 034508              <1> 	add	eax, [ebp + 8]
    17                              <1> 
    18 00000352 89CB                <1> 	mov	ebx, ecx
    19 00000354 C1EB04              <1> 	shr	ebx, 4
    20 00000357 035D0C              <1> 	add	ebx, [ebp +12]
    21                              <1> 
    22 0000035A 516A075350E80FFFFF- <1> 	cdecl	draw_char, eax, ebx, 0x07, ecx
    22 00000363 FF6683C410          <1>
    23                              <1> 	
    24 00000368 41                  <1> 	inc	ecx
    25 00000369 EBD7                <1> 	jmp	.10L
    26                              <1> 
    27                              <1> .10E:
    28                              <1> 
    29 0000036B 59                  <1> 	pop	ecx
    30 0000036C 5B                  <1> 	pop	ebx
    31 0000036D 58                  <1> 	pop	eax
    32                              <1> 
    33 0000036E 89EC                <1> 	mov	esp, ebp
    34 00000370 5D                  <1> 	pop	ebp
    35                              <1> 
    36 00000371 C3                  <1> 	ret
    37                              <1> 
    38                              <1> 
    39                              <1> 
    94                                  %include	"../modules/protect/draw_str.s"
     1                              <1> draw_str:	; draw_str(row,col,color,str)
     2 00000372 55                  <1> 	push	ebp
     3 00000373 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000375 50                  <1> 	push	eax
     6 00000376 53                  <1> 	push	ebx
     7 00000377 51                  <1> 	push	ecx
     8 00000378 52                  <1> 	push	edx
     9 00000379 56                  <1> 	push	esi
    10                              <1> 
    11 0000037A 8B5D08              <1> 	mov	ebx, [ebp + 8]
    12 0000037D 8B4D0C              <1> 	mov	ecx, [ebp +12]
    13 00000380 0FB75510            <1> 	movzx	edx, word [ebp +16]
    14 00000384 8B7514              <1> 	mov	esi, [ebp +20]
    15                              <1> 	
    16 00000387 FC                  <1> 	cld
    17                              <1> .10L:
    18                              <1> 	;mov	eax, 0
    19 00000388 AC                  <1> 	lodsb
    20 00000389 3C00                <1> 	cmp	al, 0
    21 0000038B 7425                <1> 	je	.10E
    22 0000038D 50525153E8DDFEFFFF- <1> 	cdecl	draw_char, ebx, ecx, edx, eax
    22 00000396 6683C410            <1>
    23 0000039A 43                  <1> 	inc	ebx
    24 0000039B 83FB50              <1> 	cmp	ebx, 80
    25 0000039E 7CE8                <1> 	jl	.10L
    26 000003A0 BB00000000          <1> 	mov	ebx, 0
    27 000003A5 41                  <1> 	inc	ecx
    28 000003A6 83F91E              <1> 	cmp	ecx, 30
    29 000003A9 7CDD                <1> 	jl	.10L
    30 000003AB B900000000          <1> 	mov	ecx, 0
    31                              <1> 	
    32 000003B0 EBD6                <1> 	jmp	.10L
    33                              <1> .10E:
    34                              <1> 
    35 000003B2 5E                  <1> 	pop	esi
    36 000003B3 5A                  <1> 	pop	edx
    37 000003B4 59                  <1> 	pop	ecx
    38 000003B5 5B                  <1> 	pop	ebx
    39 000003B6 58                  <1> 	pop	eax
    40                              <1> 
    41 000003B7 89EC                <1> 	mov	esp, ebp
    42 000003B9 5D                  <1> 	pop	ebp
    43                              <1> 
    44 000003BA C3                  <1> 	ret
    95                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:	; draw_color_bar(row,col)
     2 000003BB 55                  <1> 	push	ebp
     3 000003BC 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000003BE 56                  <1> 	push	esi
     6 000003BF 57                  <1> 	push	edi
     7 000003C0 50                  <1> 	push	eax
     8 000003C1 53                  <1> 	push	ebx
     9 000003C2 51                  <1> 	push	ecx
    10 000003C3 52                  <1> 	push	edx
    11                              <1> 
    12 000003C4 8B7508              <1> 	mov	esi, [ebp + 8]
    13 000003C7 8B7D0C              <1> 	mov	edi, [ebp +12]
    14                              <1> 
    15 000003CA B900000000          <1> 	mov	ecx, 0		; counter
    16                              <1> .10L:
    17 000003CF 83F910              <1> 	cmp	ecx, 16
    18 000003D2 732E                <1> 	jae	.10E
    19                              <1> 
    20 000003D4 89C8                <1> 	mov	eax, ecx
    21 000003D6 83E001              <1> 	and	eax, 0x01	; % 2
    22 000003D9 C1E003              <1> 	shl	eax, 3		; *= 8
    23 000003DC 01F0                <1> 	add	eax, esi
    24                              <1> 
    25 000003DE 89CB                <1> 	mov	ebx, ecx
    26 000003E0 D1EB                <1> 	shr	ebx, 1		; / 2
    27 000003E2 01FB                <1> 	add	ebx, edi	
    28                              <1> 
    29                              <1> 	; (x,y) = (eax,ebx)
    30                              <1> 
    31 000003E4 89CA                <1> 	mov	edx, ecx
    32 000003E6 D1E2                <1> 	shl	edx, 1
    33 000003E8 8B92[15040000]      <1> 	mov	edx, [.t0 + edx]	; select color
    34                              <1> 
    35 000003EE 68[0C040000]525350- <1> 	cdecl	draw_str, eax, ebx, edx, .s0
    35 000003F6 E877FFFFFF6683C410  <1>
    36                              <1> 
    37 000003FF 41                  <1> 	inc	ecx
    38 00000400 EBCD                <1> 	jmp	.10L
    39                              <1> 
    40                              <1> .10E:
    41 00000402 52                  <1> 	push	edx	
    42 00000403 51                  <1> 	push	ecx	
    43 00000404 53                  <1> 	push	ebx	
    44 00000405 50                  <1> 	push	eax	
    45 00000406 57                  <1> 	push	edi	
    46 00000407 56                  <1> 	push	esi	
    47                              <1> 
    48 00000408 89EC                <1> 	mov	esp, ebp
    49 0000040A 5D                  <1> 	pop	ebp
    50                              <1> 
    51 0000040B C3                  <1> 	ret
    52                              <1> 
    53                              <1> ;.s0:	db	"        ",0
    54 0000040C 202020202020202000  <1> .s0:    db '        ', 0
    55                              <1> 
    56 00000415 00000008            <1> .t0:	dw 0x0000,0x0800
    57 00000419 00010009            <1> 	dw 0x0100,0x0900
    58 0000041D 0002000A            <1> 	dw 0x0200,0x0A00
    59 00000421 0003000B            <1> 	dw 0x0300,0x0B00
    60 00000425 0004000C            <1> 	dw 0x0400,0x0C00
    61 00000429 0005000D            <1> 	dw 0x0500,0x0D00
    62 0000042D 0006000E            <1> 	dw 0x0600,0x0E00
    63 00000431 0007000F            <1> 	dw 0x0700,0x0F00
    96                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:	; draw_pixel(X,Y,color)
     2                              <1> ; X,Y is PIXEL data
     3 00000435 55                  <1> 	push	ebp
     4 00000436 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000438 57                  <1> 	push	edi
     7 00000439 53                  <1> 	push	ebx
     8 0000043A 51                  <1> 	push	ecx
     9                              <1> 
    10 0000043B 8B7D0C              <1> 	mov	edi, [ebp +12]
    11 0000043E C1E704              <1> 	shl	edi, 4
    12 00000441 8DBCBF00000A00      <1> 	lea	edi, [edi * 4 + edi + 0x000A_0000]
    13                              <1> 
    14 00000448 8B5D08              <1> 	mov	ebx, [ebp + 8]	
    15 0000044B 89D9                <1> 	mov	ecx, ebx
    16 0000044D C1EB03              <1> 	shr	ebx, 3
    17 00000450 01DF                <1> 	add	edi, ebx
    18                              <1> 
    19 00000452 83E107              <1> 	and	ecx, 0x07
    20 00000455 BB80000000          <1> 	mov	ebx, 0b1000_0000
    21                              <1> 	; for examle. ecx = 1
    22                              <1> 	; ebx = 0b0100_0000
    23 0000045A D3EB                <1> 	shr	ebx, cl
    24                              <1> 	
    25 0000045C 8B4D10              <1> 	mov	ecx, [ebp +16]	; color
    26                              <1> 
    27 0000045F 6A03E85AFDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x03
    27 00000468 C404                <1>
    28 0000046A 6A08E868FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x08
    28 00000473 C404                <1>
    29 00000475 516A085753E8C6FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    29 0000047E FF6683C410          <1>
    30                              <1> 	; vram_bit_copy
    31                              <1> 	; bit_pattarn, address, plane, color
    32                              <1> 
    33 00000483 6A02E836FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x02
    33 0000048C C404                <1>
    34 0000048E 6A04E844FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x04
    34 00000497 C404                <1>
    35 00000499 516A045753E8A2FDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    35 000004A2 FF6683C410          <1>
    36                              <1> 	
    37 000004A7 6A01E812FDFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x01
    37 000004B0 C404                <1>
    38 000004B2 6A02E820FDFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x02
    38 000004BB C404                <1>
    39 000004BD 516A025753E87EFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    39 000004C6 FF6683C410          <1>
    40                              <1> 	
    41 000004CB 6A00E8EEFCFFFF6683- <1> 	cdecl	vga_set_read_plane, 0x00
    41 000004D4 C404                <1>
    42 000004D6 6A01E8FCFCFFFF6683- <1> 	cdecl	vga_set_write_plane, 0x01
    42 000004DF C404                <1>
    43 000004E1 516A015753E85AFDFF- <1> 	cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    43 000004EA FF6683C410          <1>
    44                              <1> 
    45 000004EF 59                  <1> 	pop	ecx
    46 000004F0 5B                  <1> 	pop	ebx
    47 000004F1 5F                  <1> 	pop	edi
    48                              <1> 
    49 000004F2 89EC                <1> 	mov	esp, ebp
    50 000004F4 5D                  <1> 	pop	ebp
    51                              <1> 
    52 000004F5 C3                  <1> 	ret
    53                              <1> 
    97                                  %include	"../modules/protect/draw_line.s"
     1                              <1> draw_line:	; draw_line(X0,Y0,X1,Y0,color)
     2 000004F6 55                  <1> 	push	ebp
     3 000004F7 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000004F9 6A00                <1> 	push	dword 0	; SUM: - 4
     6 000004FB 6A00                <1> 	push	dword 0	; x0 : - 8
     7 000004FD 6A00                <1> 	push	dword 0	; wid: -12
     8 000004FF 6A00                <1> 	push	dword 0	; inx: -16
     9 00000501 6A00                <1> 	push	dword 0	; y0 : -20
    10 00000503 6A00                <1> 	push	dword 0	; hei: -24
    11 00000505 6A00                <1> 	push	dword 0	; iny: -28
    12                              <1> 
    13 00000507 50                  <1> 	push	eax
    14 00000508 53                  <1> 	push	ebx
    15 00000509 51                  <1> 	push	ecx
    16 0000050A 52                  <1> 	push	edx
    17 0000050B 56                  <1> 	push	esi
    18 0000050C 57                  <1> 	push	edi
    19                              <1> 
    20 0000050D 8B4508              <1> 	mov	eax, [ebp + 8]
    21 00000510 8B5D10              <1> 	mov	ebx, [ebp +16]
    22 00000513 29C3                <1> 	sub	ebx, eax	; X1 - X0
    23 00000515 7D09                <1> 	jge	.10F
    24                              <1> 	
    25 00000517 F7DB                <1> 	neg	ebx
    26 00000519 BEFFFFFFFF          <1> 	mov	esi, -1
    27 0000051E EB05                <1> 	jmp	.10E
    28                              <1> .10F:
    29 00000520 BE01000000          <1> 	mov	esi, 1
    30                              <1> .10E:
    31                              <1> 	
    32 00000525 8B4D0C              <1> 	mov	ecx, [ebp +12]
    33 00000528 8B5514              <1> 	mov	edx, [ebp +20]
    34 0000052B 29CA                <1> 	sub	edx, ecx
    35 0000052D 7D09                <1> 	jge	.20F
    36                              <1> 
    37 0000052F F7DA                <1> 	neg	edx
    38 00000531 BFFFFFFFFF          <1> 	mov	edi, -1
    39 00000536 EB05                <1> 	jmp	.20E
    40                              <1> .20F:
    41 00000538 BF01000000          <1> 	mov	edi, 1
    42                              <1> .20E:
    43                              <1> 	
    44 0000053D 8945F8              <1> 	mov	[ebp - 8], eax	; start.x
    45 00000540 895DF4              <1> 	mov	[ebp -12], ebx	; width
    46 00000543 8975F0              <1> 	mov	[ebp -16], esi	; inc_x
    47                              <1> 
    48 00000546 894DEC              <1> 	mov	[ebp -20], ecx	; start.y
    49 00000549 8955E8              <1> 	mov	[ebp -24], edx	; hegiht
    50 0000054C 897DE4              <1> 	mov	[ebp -28], edi	; inc_y
    51                              <1> 
    52 0000054F 39D3                <1> 	cmp	ebx, edx
    53 00000551 7F08                <1> 	jg	.22F		; determin abs axis
    54                              <1> 
    55 00000553 8D75EC              <1> 	lea	esi, [ebp -20]
    56 00000556 8D7DF8              <1> 	lea	edi, [ebp - 8]
    57                              <1> 	
    58 00000559 EB06                <1> 	jmp	.22E
    59                              <1> .22F:
    60 0000055B 8D75F8              <1> 	lea	esi, [ebp - 8]
    61 0000055E 8D7DEC              <1> 	lea	edi, [ebp -20]
    62                              <1> .22E:
    63                              <1> 	; ESI, EDI is "ADDRESS"
    64                              <1> 
    65 00000561 8B4EFC              <1> 	mov	ecx, [esi - 4]	; Abs axis
    66 00000564 83F900              <1> 	cmp	ecx, 0
    67 00000567 7505                <1> 	jnz	.30E
    68 00000569 B901000000          <1> 	mov	ecx, 1		; not have length
    69                              <1> .30E:
    70                              <1> 	
    71                              <1> .50L:
    72                              <1> 	;cdecl	draw_pixel,	dword [ebp - 8], \	; x0
    73                              <1> 	;			dword [ebp -20], \	; y0
    74                              <1> 	;			dword [ebp +24]		; color
    75 0000056E FF7518FF75ECFF75F8- <1>         cdecl draw_pixel, dword [ebp - 8], dword [ebp - 20], dword [ebp + 24]
    75 00000577 E8B9FEFFFF6683C40C  <1>
    76                              <1> 	
    77                              <1> 	; update coordinate
    78 00000580 8B46F8              <1> 	mov	eax, [esi - 8] 	; abs axis -1 or 0 or -1
    79 00000583 0106                <1> 	add	[esi - 0], eax	; abs coordinate
    80                              <1> 
    81 00000585 8B45FC              <1> 	mov	eax, [ebp - 4]
    82 00000588 0347FC              <1> 	add	eax, [edi - 4]
    83 0000058B 8B5EFC              <1> 	mov	ebx, [esi - 4]
    84                              <1> 
    85 0000058E 39D8                <1> 	cmp	eax, ebx
    86 00000590 7C07                <1> 	jl	.52E
    87 00000592 29D8                <1> 	sub	eax, ebx	; sum -= wid
    88                              <1> 	; sum can only add -1 or 1
    89                              <1> 	; so. not be  "dif * 2 < sum" 
    90                              <1> 
    91 00000594 8B5FF8              <1> 	mov	ebx, [edi - 8]	; ebx = inc
    92 00000597 011F                <1> 	add	[edi - 0], ebx
    93                              <1> .52E:
    94 00000599 8945FC              <1> 	mov	[ebp - 4], eax	; sum = eax
    95                              <1> 
    96 0000059C E2D0                <1> 	loop	.50L
    97                              <1> .50E:
    98                              <1> 
    99                              <1> 
   100 0000059E 5F                  <1> 	pop	edi
   101 0000059F 5E                  <1> 	pop	esi
   102 000005A0 5A                  <1> 	pop	edx
   103 000005A1 59                  <1> 	pop	ecx
   104 000005A2 5B                  <1> 	pop	ebx
   105 000005A3 58                  <1> 	pop	eax
   106                              <1> 
   107 000005A4 89EC                <1> 	mov	esp, ebp
   108 000005A6 5D                  <1> 	pop	ebp
   109                              <1> 
   110 000005A7 C3                  <1> 	ret
   111                              <1> 
   112                              <1> 
    98                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> draw_rect:	; draw_rect(x0,y0,x1,y1,color)
     2 000005A8 55                  <1> 	push	ebp
     3 000005A9 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 000005AB 50                  <1> 	push	eax
     6 000005AC 53                  <1> 	push	ebx
     7 000005AD 51                  <1> 	push	ecx
     8 000005AE 52                  <1> 	push	edx
     9 000005AF 56                  <1> 	push	esi
    10                              <1> 
    11 000005B0 8B4508              <1> 	mov	eax, [ebp + 8]	; x0
    12 000005B3 8B5D0C              <1> 	mov	ebx, [ebp +12]	; y0
    13 000005B6 8B4D10              <1> 	mov	ecx, [ebp +16]	; x1
    14 000005B9 8B5514              <1> 	mov	edx, [ebp +20]	; y1
    15 000005BC 8B7518              <1> 	mov	esi, [ebp +24]	; color
    16                              <1> 
    17                              <1> 	; make "eax(x0) <= ebx(x1)" and
    18                              <1> 	;      "ecx(y0) <= edx(y1)"
    19                              <1> 	
    20 000005BF 39C8                <1> 	cmp	eax, ecx
    21 000005C1 7C01                <1> 	jl	.10E		; OK
    22 000005C3 91                  <1> 	xchg	eax, ecx
    23                              <1> .10E:
    24 000005C4 39D3                <1> 	cmp	ebx, edx
    25 000005C6 7C02                <1> 	jl	.20E		; OK
    26 000005C8 87DA                <1> 	xchg	ebx, edx
    27                              <1> .20E:
    28                              <1> 	; (EAX,EBX) -------- (ECX,EBX)
    29                              <1> 	;     |			 |
    30                              <1> 	;     |			 |
    31                              <1> 	;     |			 |
    32                              <1> 	;     |			 |
    33                              <1> 	; (EAX,EDX) -------- (ECX,EDX)
    34                              <1> 
    35 000005CA 5653515350E822FFFF- <1> 	cdecl	draw_line, eax, ebx, ecx, ebx, esi
    35 000005D3 FF6683C414          <1>
    36 000005D8 5652505350E814FFFF- <1> 	cdecl	draw_line, eax, ebx, eax, edx, esi
    36 000005E1 FF6683C414          <1>
    37                              <1> 
    38 000005E6 4A                  <1> 	dec	edx
    39 000005E7 5652515250E805FFFF- <1> 	cdecl	draw_line, eax, edx, ecx, edx, esi
    39 000005F0 FF6683C414          <1>
    40 000005F5 42                  <1> 	inc	edx
    41                              <1> 
    42 000005F6 49                  <1> 	dec	ecx
    43 000005F7 5652515351E8F5FEFF- <1> 	cdecl	draw_line, ecx, ebx, ecx, edx, esi
    43 00000600 FF6683C414          <1>
    44                              <1> 
    45 00000605 5E                  <1> 	pop	esi
    46 00000606 5A                  <1> 	pop	edx
    47 00000607 59                  <1> 	pop	ecx
    48 00000608 5B                  <1> 	pop	ebx
    49 00000609 58                  <1> 	pop	eax
    50                              <1> 
    51 0000060A 89EC                <1> 	mov	esp, ebp
    52 0000060C 5D                  <1> 	pop	ebp
    53                              <1> 
    54 0000060D C3                  <1> 	ret
    55                              <1> 
    99                                  %include	"../modules/protect/itoa.s"
     1                              <1> itoa:	;itoa(num,buf,size,radix,flag);
     2 0000060E 55                  <1> 	push 	ebp
     3 0000060F 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000611 50                  <1> 	push	eax
     6 00000612 53                  <1> 	push	ebx
     7 00000613 51                  <1> 	push	ecx
     8 00000614 52                  <1> 	push	edx
     9 00000615 56                  <1> 	push	esi
    10 00000616 57                  <1> 	push	edi
    11                              <1> 
    12                              <1> 
    13                              <1> 	;init
    14 00000617 0FB75D18            <1> 	movzx	ebx, word [ebp + 24]	; bx = flag
    15 0000061B 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    16 0000061E 8B750C              <1> 	mov	esi, [ebp + 12]	; si = dist
    17                              <1> 
    18 00000621 89F7                <1> 	mov	edi, esi
    19                              <1> 
    20                              <1> 	;cmp	cx,0
    21                              <1> 	;jg	.10A
    22                              <1> 	;jmp	.40A		; no buffer
    23                              <1> 
    24                              <1> .10A:				; start
    25                              <1> 
    26 00000623 B020                <1> 	mov	al,' '
    27 00000625 F7C304000000        <1> 	test	ebx, 0b0100
    28 0000062B 7402                <1> 	je	.42E
    29 0000062D B030                <1> 	mov	al,'0'
    30                              <1> .42E:
    31 0000062F FC                  <1> 	cld
    32 00000630 F3AA                <1> 	rep	stosb
    33                              <1> 
    34 00000632 8B4508              <1> 	mov	eax, [ebp + 8]	; ax = num	
    35 00000635 8B4D10              <1> 	mov	ecx, [ebp + 16]	; cx = size
    36 00000638 89F7                <1> 	mov	edi, esi
    37 0000063A 01CF                <1> 	add	edi, ecx		; di is tail of buffer
    38 0000063C 4F                  <1> 	dec	edi
    39                              <1> 
    40 0000063D F7C301000000        <1> 	test	ebx, 0b0001	; tmp flag.is_signed
    41 00000643 7408                <1> .10Q:	jz	.10E		; if tmp == unsigned 
    42 00000645 83F800              <1>   	cmp	eax, 0		; check(ax - 0)
    43 00000648 7D03                <1> .12Q:	jge	.12E		; if 0 <= ax goto .12E
    44 0000064A 83CB02              <1> 	or	ebx, 0b0010	; flag |= print_sign
    45                              <1> .12E:
    46                              <1> .10E:
    47                              <1> 	
    48                              <1> 
    49 0000064D F7C302000000        <1> 	test	ebx, 0b0010	; if flag.print_size
    50 00000653 7410                <1> .20Q:	je	.20E		; not print sign
    51 00000655 83F800              <1> 	cmp 	eax,0		; check(ax - 0)
    52 00000658 7D07                <1> 	jge	.22F		; if 0 <= ax got .22F
    53 0000065A F7D8                <1> 	neg	eax		; ax *= -1
    54 0000065C C6062D              <1> 	mov	[esi], byte '-'
    55 0000065F EB03                <1> 	jmp	.22E
    56 00000661 C6062B              <1> .22F:	mov	[esi], byte '+'
    57 00000664 49                  <1> .22E:	dec	ecx		; finaly
    58                              <1> .20E:
    59                              <1> 
    60 00000665 8B5D14              <1> 	mov	ebx,[ebp + 20]	; bx = radix
    61                              <1> .30L:
    62                              <1> 	
    63 00000668 BA00000000          <1> 	mov	edx, 0
    64 0000066D F7F3                <1> 	div	ebx		; DX = AX % radix
    65                              <1> 				; AX = AX / radix
    66                              <1> 
    67 0000066F 89D6                <1> 	mov	esi, edx
    68 00000671 8A96[89060000]      <1> 	mov	dl, byte [.ascii + esi]	; DL = ASCII[DX]
    69                              <1> 
    70 00000677 8817                <1> 	mov	[edi],dl		; start writing in tail of buffer
    71 00000679 4F                  <1> 	dec	edi
    72                              <1> 
    73 0000067A 83F800              <1> 	cmp	eax,0
    74 0000067D E0E9                <1> 	loopnz	.30L
    75                              <1> 
    76                              <1> .40A:
    77                              <1> 
    78 0000067F 5F                  <1> 	pop	edi
    79 00000680 5E                  <1> 	pop	esi
    80 00000681 5A                  <1> 	pop	edx
    81 00000682 59                  <1> 	pop	ecx
    82 00000683 5B                  <1> 	pop	ebx
    83 00000684 58                  <1> 	pop	eax
    84                              <1> 
    85 00000685 89EC                <1> 	mov	esp, ebp
    86 00000687 5D                  <1> 	pop	ebp
    87                              <1> 
    88 00000688 C3                  <1> 	ret
    89                              <1> 
    90 00000689 303132333435363738- <1> .ascii	db	"0123456789ABCDEF"
    90 00000692 39414243444546      <1>
    91                              <1> 
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
   100                                  %include	"../modules/protect/draw_time.s"
     1                              <1> draw_time:	; draw_time(col, row, color, time)
     2 00000699 55                  <1> 	push	ebp
     3 0000069A 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 0000069C 50                  <1> 	push	eax
     6 0000069D 53                  <1> 	push	ebx
     7                              <1> 
     8 0000069E 8B4514              <1> 	mov	eax, [ebp +20]	; time
     9 000006A1 0FB6D8              <1> 	movzx	ebx, al		; seconds
    10 000006A4 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .sec, 2, 16, 0b0100
    10 000006AB [0B070000]53E859FF- <1>
    10 000006B3 FFFF6683C414        <1>
    11                              <1> 
    12 000006B9 88E3                <1> 	mov	bl, ah
    13 000006BB 6A046A106A0268-     <1> 	cdecl	itoa, ebx, .min, 2, 16, 0b0100
    13 000006C2 [08070000]53E842FF- <1>
    13 000006CA FFFF6683C414        <1>
    14                              <1> 	; buffer size is 2. so ignore bh
    15                              <1> 
    16 000006D0 C1E810              <1> 	shr	eax, 16
    17 000006D3 6A046A106A0268-     <1> 	cdecl	itoa, eax, .hour, 2, 16, 0b0100
    17 000006DA [05070000]50E82AFF- <1>
    17 000006E2 FFFF6683C414        <1>
    18                              <1> 
    19 000006E8 68[05070000]FF7510- <1> 	cdecl	draw_str, dword[ebp + 8], dword[ebp +12], dword[ebp +16], .hour
    19 000006F0 FF750CFF7508E877FC- <1>
    19 000006F9 FFFF6683C410        <1>
    20                              <1> 
    21 000006FF 5B                  <1> 	pop	ebx
    22 00000700 58                  <1> 	pop	eax
    23                              <1> 
    24 00000701 89EC                <1> 	mov	esp, ebp
    25 00000703 5D                  <1> 	pop	ebp
    26                              <1> 
    27 00000704 C3                  <1> 	ret
    28                              <1> 
    29                              <1> 
    30 00000705 5A5A3A              <1> .hour:	db	"ZZ:"
    31 00000708 5A5A3A              <1> .min:	db	"ZZ:"
    32 0000070B 5A5A00              <1> .sec:	db	"ZZ", 0
   101                                  %include	"../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2 0000070E 55                  <1> 	push	ebp
     3 0000070F 89E5                <1> 	mov	ebp, esp
     4                              <1> 
     5 00000711 53                  <1> 	push	ebx
     6                              <1> 
     7 00000712 B00A                <1> 	mov	al, 0x0A
     8 00000714 E670                <1> 	out	0x70, al
     9 00000716 E471                <1> 	in	al, 0x71
    10                              <1> 
    11 00000718 A880                <1> 	test	al, 0x80
    12 0000071A 7407                <1> 	je	.10F
    13 0000071C B801000000          <1> 	mov	eax, 1		; data updating. error
    14 00000721 EB27                <1> 	jmp	.10E
    15                              <1> .10F:
    16 00000723 B004                <1> 	mov	al, 0x04	; Hour
    17 00000725 E670                <1> 	out	0x70, al
    18 00000727 E471                <1> 	in	al, 0x71
    19                              <1> 	
    20 00000729 C1E008              <1> 	shl	eax, 8
    21                              <1> 
    22 0000072C B002                <1> 	mov	al, 0x02
    23 0000072E E670                <1> 	out	0x70, al
    24 00000730 E471                <1> 	in	al, 0x71
    25                              <1> 
    26 00000732 C1E008              <1> 	shl	eax, 8
    27                              <1> 	
    28 00000735 B000                <1> 	mov	al, 0x00
    29 00000737 E670                <1> 	out	0x70, al
    30 00000739 E471                <1> 	in	al, 0x71
    31                              <1> 
    32 0000073B 25FFFFFF00          <1> 	and	eax, 0x00FFFFFF
    33                              <1> 
    34                              <1> 	; EAX             AX,AH   AL
    35                              <1> 	; ----====----====----====----====
    36                              <1> 	; 00000000[ HOUR ][  MIN ][  SEC ]
    37                              <1> 
    38 00000740 8B5D08              <1> 	mov	ebx, [ebp + 8]
    39 00000743 8903                <1> 	mov	[ebx], eax
    40                              <1> 
    41 00000745 B800000000          <1> 	mov	eax, 0
    42                              <1> .10E:
    43                              <1> 
    44 0000074A 5B                  <1> 	pop	ebx
    45                              <1> 
    46 0000074B 89EC                <1> 	mov	esp, ebp
    47 0000074D 5D                  <1> 	pop	ebp
    48                              <1> 
    49 0000074E C3                  <1> 	ret
    50                              <1> 
    51                              <1> 
   102                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2 0000074F 60                  <1> 	pusha		; all registers in stack
     3 00000750 1E                  <1> 	push	ds
     4 00000751 06                  <1> 	push	es
     5                              <1> 
     6                              <1> 	; select second segment
     7 00000752 66B81000            <1> 	mov	ax, 0x0010	; 8 * 2
     8 00000756 8ED8                <1> 	mov	ds, ax
     9 00000758 8EC0                <1> 	mov	es, ax
    10                              <1> 
    11 0000075A 68[BC010000]E8AAFF- <1> 	cdecl	rtc_get_time, RTC_TIME
    11 00000762 FFFF6683C404        <1>
    12                              <1> 
    13                              <1> 	outp	0x70, 0x0C
    13 00000768 B00C                <2>  mov al, %2
    13 0000076A E670                <2>  out %1, al
    14 0000076C E471                <1> 	in	al, 0x71
    15                              <1> 
    16 0000076E B020                <1> 	mov	al, 0x20	; End of interrupt command
    17 00000770 E620                <1> 	out	0x20, al
    18 00000772 E6A0                <1> 	out	0xA0, al
    19                              <1> 
    20 00000774 07                  <1> 	pop	es
    21 00000775 1F                  <1> 	pop	ds
    22 00000776 61                  <1> 	popa
    23                              <1> 
    24 00000777 CF                  <1> 	iret
    25                              <1> 
    26                              <1> rtc_int_en:
    27 00000778 55                  <1> 	push	ebp
    28 00000779 89E5                <1> 	mov	ebp, esp
    29                              <1> 
    30 0000077B 50                  <1> 	push	eax
    31                              <1> 
    32                              <1> 	outp	0x70, 0x0B
    32 0000077C B00B                <2>  mov al, %2
    32 0000077E E670                <2>  out %1, al
    33                              <1> 
    34 00000780 E471                <1> 	in	al, 0x71
    35 00000782 0A4508              <1> 	or	al, [ebp + 8]
    36                              <1> 
    37 00000785 E671                <1> 	out	0x71, al
    38                              <1> 
    39 00000787 58                  <1> 	pop	eax
    40                              <1> 
    41 00000788 89EC                <1> 	mov	esp, ebp
    42 0000078A 5D                  <1> 	pop	ebp
    43                              <1> 
    44 0000078B C3                  <1> 	ret
    45                              <1> 
   103                                  %include	"../modules/protect/pic.s"
     1                              <1> init_pic:	; () -> ()
     2                              <1> ; see p298
     3                              <1> ; ICW -- Initializion command words
     4 0000078C 50                  <1> 	push	eax
     5                              <1> 
     6                              <1> 	outp	0x20, 0x11	; ICW1, ICW4 enable
     6 0000078D B011                <2>  mov al, %2
     6 0000078F E620                <2>  out %1, al
     7                              <1> 	outp	0x21, 0x20	; ICW2, base address is 0x20
     7 00000791 B020                <2>  mov al, %2
     7 00000793 E621                <2>  out %1, al
     8                              <1> 	outp	0x21, 0x04	; ICW3, slave position, 0b0000_0100. on third
     8 00000795 B004                <2>  mov al, %2
     8 00000797 E621                <2>  out %1, al
     9                              <1> 	outp	0x21, 0x05	; ICW4, ???
     9 00000799 B005                <2>  mov al, %2
     9 0000079B E621                <2>  out %1, al
    10                              <1> 	outp	0x21, 0xFF	; mask
    10 0000079D B0FF                <2>  mov al, %2
    10 0000079F E621                <2>  out %1, al
    11                              <1> 
    12                              <1> 	outp	0xA0, 0x11	; ICW1, ICW4 enable
    12 000007A1 B011                <2>  mov al, %2
    12 000007A3 E6A0                <2>  out %1, al
    13                              <1> 	outp	0xA1, 0x28	; ICW2, base address is 0x28(0x20 + 8(master))
    13 000007A5 B028                <2>  mov al, %2
    13 000007A7 E6A1                <2>  out %1, al
    14                              <1> 	outp	0xA1, 0x02	; slave ID is 0x02
    14 000007A9 B002                <2>  mov al, %2
    14 000007AB E6A1                <2>  out %1, al
    15                              <1> 	outp	0xA1, 0x01	; normal end of interrupt
    15 000007AD B001                <2>  mov al, %2
    15 000007AF E6A1                <2>  out %1, al
    16                              <1> 	outp	0xA1, 0xFF	; mask
    16 000007B1 B0FF                <2>  mov al, %2
    16 000007B3 E6A1                <2>  out %1, al
    17                              <1> 
    18 000007B5 58                  <1> 	pop	eax
    19                              <1> 
    20 000007B6 C3                  <1> 	ret
   104                                  %include	"../modules/protect/interrupt.s"
     1                              <1> int_stop:
     2 000007B7 FB                  <1> 	sti
     3                              <1> 
     4 000007B8 50680F0600006A0F6A- <1> 	cdecl	draw_str, 25, 15, 0x060F, eax
     4 000007C1 19E8ABFBFFFF6683C4- <1>
     4 000007CA 10                  <1>
     5                              <1> 
     6 000007CB 8B0424              <1> 	mov	eax, [esp + 0]
     7 000007CE 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p1, 8, 16, 0b0100
     7 000007D5 [93080000]50E82FFE- <1>
     7 000007DD FFFF6683C414        <1>
     8                              <1> 	
     9 000007E3 8B442404            <1> 	mov	eax, [esp + 4]
    10 000007E7 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p2, 8, 16, 0b0100
    10 000007EE [A4080000]50E816FE- <1>
    10 000007F6 FFFF6683C414        <1>
    11                              <1> 	
    12 000007FC 8B442408            <1> 	mov	eax, [esp + 8]
    13 00000800 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p3, 8, 16, 0b0100
    13 00000807 [B5080000]50E8FDFD- <1>
    13 0000080F FFFF6683C414        <1>
    14                              <1> 	
    15 00000815 8B44240C            <1> 	mov	eax, [esp +12]
    16 00000819 6A046A106A0868-     <1> 	cdecl	itoa, eax, .p4, 8, 16, 0b0100
    16 00000820 [C6080000]50E8E4FD- <1>
    16 00000828 FFFF6683C414        <1>
    17                              <1> 
    18 0000082E 68[8C080000]68040F- <1> 	cdecl	draw_str, 25, 16, 0x0F04, .s1
    18 00000836 00006A106A19E831FB- <1>
    18 0000083F FFFF6683C410        <1>
    19 00000845 68[9D080000]68040F- <1> 	cdecl	draw_str, 25, 17, 0x0F04, .s2
    19 0000084D 00006A116A19E81AFB- <1>
    19 00000856 FFFF6683C410        <1>
    20 0000085C 68[AE080000]68040F- <1> 	cdecl	draw_str, 25, 18, 0x0F04, .s3
    20 00000864 00006A126A19E803FB- <1>
    20 0000086D FFFF6683C410        <1>
    21 00000873 68[BF080000]68040F- <1> 	cdecl	draw_str, 25, 19, 0x0F04, .s4
    21 0000087B 00006A136A19E8ECFA- <1>
    21 00000884 FFFF6683C410        <1>
    22                              <1> 
    23 0000088A EBFE                <1> 	jmp	$
    24                              <1> 
    25 0000088C 4553502B20303A      <1> .s1:	db	"ESP+ 0:"
    26 00000893 2D2D2D2D2D2D2D2D20- <1> .p1:	db	"-------- ", 0
    26 0000089C 00                  <1>
    27 0000089D 2020202B20343A      <1> .s2:	db	"   + 4:"
    28 000008A4 2D2D2D2D2D2D2D2D20- <1> .p2:	db	"-------- ", 0
    28 000008AD 00                  <1>
    29 000008AE 2020202B20383A      <1> .s3:	db	"   + 8:"
    30 000008B5 2D2D2D2D2D2D2D2D20- <1> .p3:	db	"-------- ", 0
    30 000008BE 00                  <1>
    31 000008BF 2020202B31323A      <1> .s4:	db	"   +12:"
    32 000008C6 2D2D2D2D2D2D2D2D20- <1> .p4:	db	"-------- ", 0
    32 000008CF 00                  <1>
    33                              <1> 	
    34                              <1> 
    35                              <1> int_default:
    36 000008D0 9C                  <1> 	pushf
    37 000008D1 0E                  <1> 	push	cs
    38 000008D2 68[B7070000]        <1> 	push	int_stop
    39                              <1> 
    40 000008D7 B8[DD080000]        <1> 	mov	eax, .s0
    41 000008DC CF                  <1> 	iret
    42                              <1> 
    43 000008DD 203C2020202053544F- <1> .s0:	db	" <    STOP    > ", 0
    43 000008E6 50202020203E2000    <1>
    44                              <1> 
    45                              <1> init_int:
    46 000008EE 55                  <1> 	push	ebp
    47 000008EF 89E5                <1> 	mov	ebp, esp
    48                              <1> 
    49 000008F1 50                  <1> 	push	eax
    50 000008F2 53                  <1> 	push	ebx
    51 000008F3 51                  <1> 	push	ecx
    52 000008F4 57                  <1> 	push	edi
    53                              <1> 
    54 000008F5 8D05[D0080000]      <1> 	lea	eax, [int_default]
    55 000008FB BB008E0800          <1> 	mov	ebx, 0x0008_8E00
    56 00000900 6693                <1> 	xchg	ax, bx
    57                              <1> 
    58                              <1> 	; eax -> int_default[32:16]::8E00
    59                              <1> 	; ebx -> 0x0008		   ::int_default[15:0]
    60                              <1> 	; [eax:ebx] is interrupt disc
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64 00000902 B900010000          <1> 	mov	ecx, 256
    65 00000907 BF00001000          <1> 	mov	edi, VECT_BASE
    66                              <1> .10L:
    67 0000090C 891F                <1> 	mov	[edi + 0], ebx	; bottom
    68 0000090E 894704              <1> 	mov	[edi + 4], eax	; top
    69 00000911 83C708              <1> 	add	edi, 8
    70 00000914 E2F6                <1> 	loop	.10L
    71                              <1> 
    72 00000916 0F011D[00000000]    <1> 	lidt	[IDTR]
    73                              <1> 
    74 0000091D 5F                  <1> 	pop	edi
    75 0000091E 59                  <1> 	pop	ecx
    76 0000091F 5B                  <1> 	pop	ebx
    77 00000920 58                  <1> 	pop	eax
    78                              <1> 
    79 00000921 89EC                <1> 	mov	esp, ebp
    80 00000923 5D                  <1> 	pop	ebp
    81                              <1> 
    82 00000924 C3                  <1> 	ret
    83                              <1> 
    84                              <1> int_zero_div:
    85 00000925 9C                  <1> 	pushf
    86 00000926 0E                  <1> 	push	cs
    87 00000927 68[B7070000]        <1> 	push	int_stop
    88                              <1> 
    89 0000092C B8[32090000]        <1> 	mov	eax, .s0
    90 00000931 CF                  <1> 	iret
    91                              <1> 
    92                              <1> 
    93 00000932 203C20205A45524F5F- <1> .s0:	db	" <  ZERO_DIV  > ", 0
    93 0000093B 44495620203E2000    <1>
   105                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2 00000943 60                  <1> 	pusha
     3 00000944 1E                  <1> 	push	ds
     4 00000945 06                  <1> 	push	es
     5                              <1> 
     6 00000946 66B81000            <1> 	mov	ax, 0x0010	; SEL_DATA. see 468p
     7 0000094A 8ED8                <1> 	mov	ds, ax
     8 0000094C 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 0000094E E460                <1> 	in	al, 0x60
    11                              <1> 	; see 291p
    12                              <1> 	; when interrupted, data can be read
    13                              <1> 
    14 00000950 5068[68090000]E855- <1> 	cdecl	ring_wr, _KEY_BUFF, eax
    14 00000958 0000006683C408      <1>
    15                              <1> 	
    16                              <1> 	outp	0x20, 0x20
    16 0000095F B020                <2>  mov al, %2
    16 00000961 E620                <2>  out %1, al
    17                              <1> 	; end of interrupt command to master only
    18                              <1> 
    19 00000963 07                  <1> 	pop	es
    20 00000964 1F                  <1> 	pop	ds
    21 00000965 61                  <1> 	popa
    22                              <1> 
    23 00000966 CF                  <1> 	iret
    24                              <1> 
    25 00000967 00                  <1> ALIGN	4,	db	0
    26 00000968 00<rept>            <1> _KEY_BUFF:	times	ring_buff_size	db	0
    27                              <1> ; ring buff
    28                              <1> ; ring_buff_size is struct "ring_buff"'s size created by nasm
    29                              <1> 
    30                              <1> 	
   106                                  ;%include	"../../../../testOS/src/modules/protect/int_keyboard.s"
   107                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ring_rd:	; ring_rd(ring_address, dest_address)
     2                              <1> 		; return eax
     3 00000980 55                  <1> 	push	ebp
     4 00000981 89E5                <1> 	mov	ebp, esp
     5                              <1> 
     6 00000983 56                  <1> 	push	esi
     7 00000984 57                  <1> 	push	edi
     8 00000985 53                  <1> 	push	ebx
     9                              <1> 
    10 00000986 8B7508              <1> 	mov	esi, [ebp + 8]
    11 00000989 8B7D0C              <1> 	mov	edi, [ebp +12]
    12                              <1> 
    13 0000098C B800000000          <1> 	mov	eax, 0
    14 00000991 8B1E                <1> 	mov	ebx, [esi + ring_buff.rp]
    15 00000993 3B5E04              <1> 	cmp	ebx, [esi + ring_buff.wp]
    16 00000996 7411                <1> 	je	.10E					; no data. eax = 0
    17                              <1> 
    18 00000998 8A441E08            <1> 	mov	al, [esi + ring_buff.item + ebx]	; read point
    19                              <1> 	
    20 0000099C 8807                <1> 	mov	[edi], al
    21                              <1> 	
    22 0000099E 43                  <1> 	inc	ebx
    23 0000099F 83E30F              <1> 	and	ebx, RING_INDEX_MASK			; % 8
    24 000009A2 891E                <1> 	mov	[esi + ring_buff.rp], ebx
    25                              <1> 
    26 000009A4 B801000000          <1> 	mov	eax, 1					; read something
    27                              <1> 
    28                              <1> .10E:
    29 000009A9 5B                  <1> 	pop	ebx
    30 000009AA 5F                  <1> 	pop	edi
    31 000009AB 5E                  <1> 	pop	esi
    32                              <1> 
    33 000009AC 89EC                <1> 	mov	esp, ebp
    34 000009AE 5D                  <1> 	pop	ebp
    35                              <1> 
    36 000009AF C3                  <1> 	ret
    37                              <1> 
    38                              <1> ring_wr:	; ring_wr(ring_address, src) src is not address. 
    39 000009B0 55                  <1> 	push	ebp
    40 000009B1 89E5                <1> 	mov	ebp, esp
    41                              <1> 
    42 000009B3 56                  <1> 	push	esi
    43 000009B4 53                  <1> 	push	ebx
    44 000009B5 51                  <1> 	push	ecx
    45                              <1> 
    46 000009B6 8B7508              <1> 	mov	esi, [ebp + 8]
    47                              <1> 
    48 000009B9 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]
    49 000009BC 89D9                <1> 	mov	ecx, ebx
    50 000009BE 41                  <1> 	inc	ecx
    51 000009BF 83E10F              <1> 	and	ecx, RING_INDEX_MASK
    52                              <1> 	; ebx is write point
    53                              <1> 	; ecx is next point
    54                              <1> 
    55 000009C2 3B0E                <1> 	cmp	ecx, [esi + ring_buff.rp]
    56 000009C4 740F                <1> 	je	.10E
    57                              <1> 
    58                              <1> 	; can write
    59 000009C6 8A450C              <1> 	mov	al, [ebp +12]
    60 000009C9 88441E08            <1> 	mov	[esi + ring_buff.item + ebx], al	; ebx is index
    61 000009CD 894E04              <1> 	mov	[esi + ring_buff.wp], ecx		; next point
    62                              <1> 
    63 000009D0 B801000000          <1> 	mov	eax, 1					; OK
    64                              <1> .10E:
    65 000009D5 59                  <1> 	pop	ecx
    66 000009D6 5B                  <1> 	pop	ebx
    67 000009D7 5E                  <1> 	pop	esi
    68                              <1> 
    69 000009D8 89EC                <1> 	mov	esp, ebp
    70 000009DA 5D                  <1> 	pop	ebp
    71                              <1> 
    72 000009DB C3                  <1> 	ret
    73                              <1> 	
    74                              <1> 
    75                              <1> draw_key:	
    76 000009DC 55                  <1> 	push	ebp
    77 000009DD 89E5                <1> 	mov	ebp, esp
    78                              <1> 
    79 000009DF 60                  <1> 	pusha
    80                              <1> 	; easy
    81                              <1> 
    82 000009E0 8B5508              <1> 	mov	edx, [ebp + 8]	; x offset
    83 000009E3 8B7D0C              <1> 	mov	edi, [ebp +12]	; y offset
    84 000009E6 8B7510              <1> 	mov	esi, [ebp +16]	; ring buff address
    85                              <1> 
    86 000009E9 8B5E04              <1> 	mov	ebx, [esi + ring_buff.wp]	; seeing point
    87 000009EC 8D7608              <1> 	lea	esi, [esi + ring_buff.item]	; item start address
    88 000009EF B910000000          <1> 	mov	ecx, RING_ITEM_SIZE
    89                              <1> .10L:
    90 000009F4 4B                  <1> 	dec	ebx
    91                              <1> 	; 3 -> 2, 0 -> FF
    92 000009F5 83E30F              <1> 	and	ebx, RING_INDEX_MASK
    93 000009F8 8A041E              <1> 	mov	al, [esi + ebx]
    94                              <1> 
    95 000009FB 6A046A106A0268-     <1> 	cdecl	itoa, eax, .tmp, 2, 0x10, 0b0100
    95 00000A02 [2C0A0000]50E802FC- <1>
    95 00000A0A FFFF6683C414        <1>
    96 00000A10 68[2C0A0000]6A0257- <1> 	cdecl	draw_str, edx, edi, 0x02, .tmp
    96 00000A18 52E854F9FFFF6683C4- <1>
    96 00000A21 10                  <1>
    97                              <1> 
    98 00000A22 83C203              <1> 	add	edx, 3
    99                              <1> 	; string is 2, so space is 1
   100                              <1> 
   101 00000A25 E2CD                <1> 	loop	.10L
   102                              <1> 
   103 00000A27 61                  <1> 	popa
   104                              <1> 
   105 00000A28 89EC                <1> 	mov	esp, ebp
   106 00000A2A 5D                  <1> 	pop	ebp
   107                              <1> 
   108 00000A2B C3                  <1> 	ret
   109                              <1> 
   110 00000A2C 2D2D00              <1> .tmp:	db	"--",0
   108                                  %include	"../modules/protect/int_timer.s"
     1                              <1> int_timer:
     2 00000A2F 60                  <1> 	pushad
     3 00000A30 06                  <1> 	push	es
     4 00000A31 1E                  <1> 	push	ds
     5                              <1> 
     6 00000A32 66B81000            <1> 	mov	ax, 0x10
     7 00000A36 8ED8                <1> 	mov	ds, ax
     8 00000A38 8EC0                <1> 	mov	es, ax
     9                              <1> 
    10 00000A3A FF05[480A0000]      <1> 	inc	dword[TIMER_COUNT]
    11                              <1> 
    12                              <1> 	outp	0x20, 0x20
    12 00000A40 B020                <2>  mov al, %2
    12 00000A42 E620                <2>  out %1, al
    13                              <1> 
    14 00000A44 1F                  <1> 	pop	ds
    15 00000A45 07                  <1> 	pop	es
    16 00000A46 61                  <1> 	popad
    17                              <1> 
    18 00000A47 CF                  <1> 	iret
    19                              <1> 
    20                              <1> ALIGN	4,	db	0
    21 00000A48 0000000000000000    <1> TIMER_COUNT:	dq	0
    22                              <1> 
    23                              <1> 
    24                              <1> int_en_timer:
    25 00000A50 55                  <1> 	push	ebp
    26 00000A51 89E5                <1> 	mov	ebp, esp
    27                              <1> 	
    28 00000A53 50                  <1> 	push	eax
    29                              <1> 
    30                              <1> 	outp	0x43, 0b00_11_010_0
    30 00000A54 B034                <2>  mov al, %2
    30 00000A56 E643                <2>  out %1, al
    31                              <1> 	; counter 0
    32                              <1> 	; access mode, bottom -> top
    33                              <1> 	; mode, 2
    34                              <1> 	; bcd
    35                              <1> 
    36                              <1> 	outp	0x40, 0x9C
    36 00000A58 B09C                <2>  mov al, %2
    36 00000A5A E640                <2>  out %1, al
    37                              <1> 	outp	0x40, 0x2E
    37 00000A5C B02E                <2>  mov al, %2
    37 00000A5E E640                <2>  out %1, al
    38                              <1> 	; 2E9C(16) = 11932(10) = (1193182 / 100)
    39                              <1> 
    40 00000A60 58                  <1> 	pop	eax
    41                              <1> 
    42 00000A61 89EC                <1> 	mov 	esp, ebp
    43 00000A63 5D                  <1> 	pop	ebp
    44                              <1> 
    45 00000A64 C3                  <1> 	ret
    46                              <1> 
    47                              <1> 
   109                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2 00000A65 55                  <1> 	push	ebp
     3 00000A66 89E5                <1> 	mov	ebp, esp
     4                              <1> 	
     5 00000A68 50                  <1> 	push	eax
     6                              <1> 
     7 00000A69 A1[480A0000]        <1> 	mov	eax, [TIMER_COUNT]
     8 00000A6E C1E808              <1> 	shr	eax, 8
     9 00000A71 3B05[9C0A0000]      <1> 	cmp	eax, [.index]	; per 10ms * 16
    10 00000A77 741E                <1> 	je	.10E
    11                              <1> 
    12 00000A79 A3[9C0A0000]        <1> 	mov	[.index], eax
    13 00000A7E 83E003              <1> 	and	eax, 0x03
    14                              <1> 
    15 00000A81 8A80[A00A0000]      <1> 	mov	al, [.table + eax]
    16 00000A87 506A0F6A1D6A00E8E0- <1> 	cdecl	draw_char, 0, 29, 0x000F, eax
    16 00000A90 F7FFFF6683C410      <1>
    17                              <1> .10E:
    18 00000A97 58                  <1> 	pop	eax
    19                              <1> 
    20 00000A98 89EC                <1> 	mov	esp, ebp
    21 00000A9A 5D                  <1> 	pop	ebp
    22                              <1> 
    23 00000A9B C3                  <1> 	ret
    24                              <1> 
    25                              <1> ALIGN	4,	db	0
    26 00000A9C 00000000            <1> .index:		dd	0
    27 00000AA0 7C2F2D5C            <1> .table:		dd	"|/-\"
   110                                  %include	"descriptor.s"
     1                              <1> ; setting of task0 
     2 00000AA4 0000000000000000    <1> LDT:		dq	0x0000_0000_0000_0000
     3 00000AAC FFFF0000009ACF00    <1> .cs_task_0:	dq	0x00CF_9A00_0000_FFFF
     4 00000AB4 FFFF00000092CF00    <1> .ds_task_0:	dq	0x00CF_9200_0000_FFFF
     5 00000ABC FFFF0000009ACF00    <1> .cs_task_1:	dq	0x00CF_9A00_0000_FFFF
     6 00000AC4 FFFF00000092CF00    <1> .ds_task_1:	dq	0x00CF_9200_0000_FFFF
     7                              <1> .end:
     8                              <1> 
     9                              <1> ; ldt indexes
    10                              <1> CS_TASK_0:	equ	(.cs_task_0 - LDT) | 4	; offset | (use LDT bit)
    11                              <1> DS_TASK_0:	equ	(.ds_task_0 - LDT) | 4
    12                              <1> CS_TASK_1:	equ	(.cs_task_1 - LDT) | 4	; offset | (use LDT bit)
    13                              <1> DS_TASK_1:	equ	(.ds_task_1 - LDT) | 4
    14                              <1> 
    15                              <1> LDT_LIMIT	equ	.end - LDT - 1
    16                              <1> 
    17                              <1> 
    18 00000ACC 0000000000000000    <1> GDT:		dq	0x0000_0000_0000_0000
    19 00000AD4 FFFF0000009ACF00    <1> .cs_kernel:	dq	0x00CF_9A00_0000_FFFF
    20 00000ADC FFFF00000092CF00    <1> .ds_kernel:	dq	0x00CF_9200_0000_FFFF
    21 00000AE4 0000000000820000    <1> .ldt		dq	0x0000_8200_0000_0000	; uninitialized
    22 00000AEC 6700000000890000    <1> .tss_0:		dq	0x0000_8900_0000_0067	; uninitialized(but flags are initialized)
    23 00000AF4 6700000000890000    <1> .tss_1:		dq	0x0000_8900_0000_0067	; uninitialized(buf flags are initialized)
    24                              <1> .end:
    25                              <1> 
    26                              <1> ; gdt indexes
    27                              <1> CS_KERNEL	equ	.cs_kernel - GDT
    28                              <1> DS_KERNEL	equ	.ds_kernel - GDT
    29                              <1> SS_LDT		equ	.ldt - GDT
    30                              <1> SS_TASK_0	equ	.tss_0 - GDT
    31                              <1> SS_TASK_1	equ	.tss_1 - GDT
    32                              <1> 
    33 00000AFC 2F00                <1> GDTR:		dw	GDT.end - GDT - 1
    34 00000AFE [CC0A0000]          <1> 		dd	GDT
    35                              <1> 
    36                              <1> TSS_0:
    37 00000B02 00000000            <1> .link:   dd 0
    38 00000B06 00321000            <1> .esp0:   dd SP_TASK_0 - STACK_SIZE / 2
    39 00000B0A 10000000            <1> .ss0:    dd DS_KERNEL
    40 00000B0E 00000000            <1> .esp1:   dd 0
    41 00000B12 00000000            <1> .ss1:    dd 0
    42 00000B16 00000000            <1> .esp2:   dd 0
    43 00000B1A 00000000            <1> .ss2:    dd 0
    44 00000B1E 00000000            <1> .cr3:    dd 0
    45 00000B22 00000000            <1> .eip:    dd 0
    46 00000B26 00000000            <1> .eflags: dd 0
    47 00000B2A 00000000            <1> .eax:    dd 0
    48 00000B2E 00000000            <1> .ecx:    dd 0
    49 00000B32 00000000            <1> .edx:    dd 0
    50 00000B36 00000000            <1> .ebx:    dd 0
    51 00000B3A 00000000            <1> .esp:    dd 0
    52 00000B3E 00000000            <1> .ebp:    dd 0
    53 00000B42 00000000            <1> .esi:    dd 0
    54 00000B46 00000000            <1> .edi:    dd 0
    55 00000B4A 00000000            <1> .es:     dd 0
    56 00000B4E 00000000            <1> .cs:     dd 0
    57 00000B52 00000000            <1> .ss:     dd 0
    58 00000B56 00000000            <1> .ds:     dd 0
    59 00000B5A 00000000            <1> .fs:     dd 0
    60 00000B5E 00000000            <1> .gs:     dd 0
    61 00000B62 00000000            <1> .ldt:    dd 0
    62 00000B66 00000000            <1> .io:     dd 0
    63                              <1> 
    64                              <1> TSS_1:
    65 00000B6A 00000000            <1> .link:   dd 0
    66 00000B6E 00361000            <1> .esp0:   dd SP_TASK_1 - STACK_SIZE / 2
    67 00000B72 10000000            <1> .ss0:    dd DS_KERNEL
    68 00000B76 00000000            <1> .esp1:   dd 0
    69 00000B7A 00000000            <1> .ss1:    dd 0
    70 00000B7E 00000000            <1> .esp2:   dd 0
    71 00000B82 00000000            <1> .ss2:    dd 0
    72 00000B86 00000000            <1> .cr3:    dd 0
    73 00000B8A [D20B0000]          <1> .eip:    dd task_1
    74 00000B8E 02020000            <1> .eflags: dd 0x0202
    75 00000B92 00000000            <1> .eax:    dd 0
    76 00000B96 00000000            <1> .ecx:    dd 0
    77 00000B9A 00000000            <1> .edx:    dd 0
    78 00000B9E 00000000            <1> .ebx:    dd 0
    79 00000BA2 00381000            <1> .esp:    dd SP_TASK_1
    80 00000BA6 00000000            <1> .ebp:    dd 0
    81 00000BAA 00000000            <1> .esi:    dd 0
    82 00000BAE 00000000            <1> .edi:    dd 0
    83 00000BB2 24000000            <1> .es:     dd DS_TASK_1
    84 00000BB6 1C000000            <1> .cs:     dd CS_TASK_1
    85 00000BBA 24000000            <1> .ss:     dd DS_TASK_1
    86 00000BBE 24000000            <1> .ds:     dd DS_TASK_1
    87 00000BC2 24000000            <1> .fs:     dd DS_TASK_1
    88 00000BC6 24000000            <1> .gs:     dd DS_TASK_1
    89 00000BCA 18000000            <1> .ldt:    dd SS_LDT
    90 00000BCE 00000000            <1> .io:     dd 0
    91                              <1> 
   111                                  %include	"task/task_1.s"
     1                              <1> task_1:
     2 00000BD2 68[E70B0000]6A076A- <1> 	cdecl	draw_str, 63, 0, 0x07, .s0
     2 00000BDA 006A3FE890F7FFFF66- <1>
     2 00000BE3 83C410              <1>
     3                              <1> 
     4 00000BE6 CF                  <1> 	iret
     5                              <1> 
     6 00000BE7 5461736B2D3100      <1> .s0	db	"Task-1", 0
   112                                  ;%include	"../../../../testOS/src/modules/protect/ring_buff.s"
   113                                  ;%include	"../../../../testOS/src/modules/protect/some.s"
   114                                  
   115                                  
   116                                  
   117 00000BEE 00<rept>                	times	KERNEL_SIZE - ($ - $$)	db	0
