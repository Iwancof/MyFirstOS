     1                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD		equ	0x7c00
     2                              <1> BOOT_END		equ	BOOT_LOAD + BOOT_SIZE
     3                              <1> 
     4                              <1> BOOT_SIZE		equ	(1024 * 8)
     5                              <1> SECT_SIZE		equ	(512)
     6                              <1> BOOT_SECT		equ	(BOOT_SIZE / SECT_SIZE)
     7                              <1> 
     8                              <1> E820_RECORD_SIZE	equ	20
     9                              <1> 
    10                              <1> KERNEL_LOAD		equ	0x0010_1000
    11                              <1> KERNEL_SIZE		equ	(1024 * 8)
    12                              <1> KERNEL_SECT		equ	(KERNEL_SIZE / SECT_SIZE)
     2                                  %include	"../include/cdecl.s"
     1                              <1> %macro	cdecl	1-*.nolist
     2                              <1> 	%rep	%0 - 1
     3                              <1> 		push	%{-1:-1}
     4                              <1> 		%rotate -1
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1
     7                              <1> 		call %1
     8                              <1> 	%if 1 < %0
     9                              <1> 		add	sp,(__BITS__ >> 3) * (%0 - 1)
    10                              <1> 	%endif
    11                              <1> %endmacro
     3                                  %include	"../include/drive.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1> 	.no	resw	1	; number of drive
     3 00000002 <res 00000002>      <1> 	.cyln	resw	1	; cylnder
     4 00000004 <res 00000002>      <1> 	.head	resw	1	; head
     5 00000006 <res 00000002>      <1> 	.sect	resw	1	; sector
     6                              <1> endstruc
     4                                  
     5                                  ORG	KERNEL_LOAD
     6                                  
     7                                  [BITS 32]
     8                                  
     9                                  kernel:
    10                                  	
    11 00000000 BE007E0000              	mov	esi, BOOT_LOAD + SECT_SIZE
    12 00000005 0FB706                  	movzx	eax, word [esi + 0]
    13 00000008 0FB75E02                	movzx	ebx, word [esi + 2]
    14 0000000C C1E004                  	shl	eax, 4
    15 0000000F 01D8                    	add	eax, ebx		; Emulate real mode addressing
    16 00000011 A3[CC000000]            	mov	[FONT_ADR], eax
    17                                  
    18 00000016 B002                    	mov	al, 0x02
    19 00000018 66BAC403                	mov	dx, 0x3C4
    20                                  
    21 0000001C B404                    	mov	ah, 0x04
    22 0000001E 66EF                    	out	dx, ax
    23                                  
    24 00000020 C60500000A00FF          	mov	[0x000A_0000 + 0], byte 0xFF
    25                                  	
    26 00000027 B402                    	mov	ah, 0x02
    27 00000029 66EF                    	out	dx, ax
    28                                  
    29 0000002B C60502000A00FF          	mov	[0x000A_0000 + 2], byte 0xFF
    30                                  
    31 00000032 B401                    	mov	ah, 0x01
    32 00000034 66EF                    	out	dx, ax
    33                                  
    34 00000036 C60501000A00FF          	mov	[0x000A_0000 + 1], byte 0xFF
    35                                  
    36 0000003D B40A                    	mov	ah, 0x02 | 0b1000	; Green
    37 0000003F 66EF                    	out	dx, ax
    38                                  
    39 00000041 8D3D50000A00            	lea	edi, [0x000A_0000 + 80]	; edi = 0x000A_0050
    40 00000047 B950000000              	mov	ecx, 80
    41 0000004C B0FF                    	mov	al, 0xFF
    42 0000004E F3AA                    	rep	stosb
    43                                  
    44 00000050 BF01000000              	mov	edi, 1
    45 00000055 C1E708                  	shl	edi, 8
    46 00000058 8DBCBF00000A00          	lea	edi, [edi * 4 + edi + 0x000A_0000]
    47                                  
    48 0000005F 66C707FF00              	mov	[edi + (80 * 0)], word 0xFF
    49 00000064 66C74750FF00            	mov	[edi + (80 * 1)], word 0xFF
    50 0000006A 66C787A0000000FF00      	mov	[edi + (80 * 2)], word 0xFF
    51 00000073 66C787F0000000FF00      	mov	[edi + (80 * 3)], word 0xFF
    52 0000007C 66C78740010000FF00      	mov	[edi + (80 * 4)], word 0xFF
    53 00000085 66C78790010000FF00      	mov	[edi + (80 * 5)], word 0xFF
    54 0000008E 66C787E0010000FF00      	mov	[edi + (80 * 6)], word 0xFF
    55 00000097 66C78730020000FF00      	mov	[edi + (80 * 7)], word 0xFF
    56                                  
    57 000000A0 BE41000000              	mov	esi, 'A'
    58 000000A5 C1E604                  	shl	esi, 4
    59 000000A8 0335[CC000000]          	add	esi, [FONT_ADR]
    60                                  
    61 000000AE BF02000000              	mov	edi, 2
    62 000000B3 C1E708                  	shl	edi, 8
    63 000000B6 8DBCBF00000A00          	lea	edi, [edi * 4 + edi + 0x000A_0000]
    64                                  
    65 000000BD B910000000              	mov	ecx, 16
    66                                  .10L:
    67 000000C2 A4                      	movsb
    68 000000C3 83C74F                  	add	edi, 80 - 1
    69 000000C6 E2FA                    	loop	.10L
    70                                  	
    71                                  
    72 000000C8 EBFE                    	jmp	$
    73                                  
    74 000000CA 00<rept>                ALIGN	4,	db	0
    75 000000CC 00000000                FONT_ADR:	dd	0
    76                                  
    77 000000D0 00<rept>                	times	KERNEL_SIZE - ($$ - $)	db	0
